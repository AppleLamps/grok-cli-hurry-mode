{"version":3,"sources":["../src/utils/settings-manager.ts","../src/mcp/config.ts","../src/grok/client.ts","../src/mcp/transports.ts","../src/mcp/client.ts","../src/grok/tools.ts","../src/agent/grok-agent.ts","../src/utils/confirmation-service.ts","../src/tools/bash.ts","../src/tools/text-editor.ts","../src/tools/morph-editor.ts","../src/tools/todo-tool.ts","../src/tools/confirmation-tool.ts","../src/tools/search.ts","../src/tools/advanced/multi-file-editor.ts","../src/tools/advanced/advanced-search.ts","../src/tools/advanced/file-tree-operations.ts","../src/tools/advanced/code-aware-editor.ts","../src/tools/advanced/operation-history.ts","../src/tools/intelligence/symbol-search.ts","../src/tools/intelligence/dependency-analyzer.ts","../src/tools/intelligence/code-context.ts","../src/tools/intelligence/refactoring-assistant.ts","../src/tools/intelligence/engine.ts","../src/utils/token-counter.ts","../src/utils/custom-instructions.ts","../package.json","../src/utils/text-utils.ts","../src/hooks/use-input-history.ts","../src/hooks/use-enhanced-input.ts","../src/ui/components/command-suggestions.tsx","../src/utils/model-config.ts","../src/tools/documentation/claude-md-parser.ts","../src/tools/documentation/agent-system-generator.ts","../src/tools/documentation/docs-menu.ts","../src/tools/documentation/readme-generator.ts","../src/tools/documentation/comments-generator.ts","../src/tools/documentation/api-docs-generator.ts","../src/tools/documentation/changelog-generator.ts","../src/tools/documentation/update-agent-docs.ts","../src/subagents/subagent-framework.ts","../src/tools/documentation/self-healing-system.ts","../src/hooks/use-input-handler.ts","../src/ui/components/loading-spinner.tsx","../src/ui/components/model-selection.tsx","../src/ui/utils/colors.ts","../src/ui/shared/max-sized-box.tsx","../src/ui/components/diff-renderer.tsx","../src/ui/utils/markdown-renderer.tsx","../src/ui/components/chat-history.tsx","../src/ui/components/chat-input.tsx","../src/ui/components/mcp-status.tsx","../src/ui/components/confirmation-dialog.tsx","../src/ui/components/api-key-input.tsx","../src/ui/components/chat-interface.tsx","../src/index.ts","../src/commands/mcp.ts"],"names":["path","config","resolve","EventEmitter","loadMCPConfig","execAsync","promisify","exec","ops","path2","numberedLines","oldLines","newLines","writeFilePromise","replacementLines","pathExists","ops2","path3","axios","ops3","path4","ops4","path5","ops5","path6","ops7","path8","ops8","path9","ops9","ops10","glob","ops11","ops12","ops13","parseTS","node","path14","fs2","now","mcpManager","fs","useState","useCallback","existsSync","ops14","ops15","ops16","ops17","ops18","ops19","execSync","gitCommand","ops20","ops21","error","useMemo","input","jsxs","Box","Text","jsx","React","index","toolName","cursorChar","Fragment","useEffect","useInput","useRef","manager","tools"],"mappings":"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","file":"index.js","sourcesContent":["import * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport * as os from \"os\";\r\n\r\n/**\r\n * User-level settings stored in ~/.grok/user-settings.json\r\n * These are global settings that apply across all projects\r\n */\r\nexport interface UserSettings {\r\n  apiKey?: string; // Grok API key\r\n  baseURL?: string; // API base URL\r\n  defaultModel?: string; // User's preferred default model\r\n  models?: string[]; // Available models list\r\n}\r\n\r\n/**\r\n * Project-level settings stored in .grok/settings.json\r\n * These are project-specific settings\r\n */\r\nexport interface ProjectSettings {\r\n  model?: string; // Current model for this project\r\n  mcpServers?: Record<string, any>; // MCP server configurations\r\n}\r\n\r\n/**\r\n * Default values for user settings\r\n */\r\nconst DEFAULT_USER_SETTINGS: Partial<UserSettings> = {\r\n  baseURL: \"https://api.x.ai/v1\",\r\n  defaultModel: \"grok-code-fast-1\",\r\n  models: [\r\n    \"grok-code-fast-1\",\r\n    \"grok-4-latest\",\r\n    \"grok-3-latest\",\r\n    \"grok-3-fast\",\r\n    \"grok-3-mini-fast\",\r\n  ],\r\n};\r\n\r\n/**\r\n * Default values for project settings\r\n */\r\nconst DEFAULT_PROJECT_SETTINGS: Partial<ProjectSettings> = {\r\n  model: \"grok-code-fast-1\",\r\n};\r\n\r\n/**\r\n * Unified settings manager that handles both user-level and project-level settings\r\n */\r\nexport class SettingsManager {\r\n  private static instance: SettingsManager;\r\n\r\n  private userSettingsPath: string;\r\n  private projectSettingsPath: string;\r\n\r\n  private constructor() {\r\n    // User settings path: ~/.grok/user-settings.json\r\n    this.userSettingsPath = path.join(\r\n      os.homedir(),\r\n      \".grok\",\r\n      \"user-settings.json\"\r\n    );\r\n\r\n    // Project settings path: .grok/settings.json (in current working directory)\r\n    this.projectSettingsPath = path.join(\r\n      process.cwd(),\r\n      \".grok\",\r\n      \"settings.json\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get singleton instance\r\n   */\r\n  public static getInstance(): SettingsManager {\r\n    if (!SettingsManager.instance) {\r\n      SettingsManager.instance = new SettingsManager();\r\n    }\r\n    return SettingsManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Ensure directory exists for a given file path\r\n   */\r\n  private ensureDirectoryExists(filePath: string): void {\r\n    const dir = path.dirname(filePath);\r\n    if (!fs.existsSync(dir)) {\r\n      fs.mkdirSync(dir, { recursive: true, mode: 0o700 });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load user settings from ~/.grok/user-settings.json\r\n   */\r\n  public loadUserSettings(): UserSettings {\r\n    try {\r\n      if (!fs.existsSync(this.userSettingsPath)) {\r\n        // Create default user settings if file doesn't exist\r\n        this.saveUserSettings(DEFAULT_USER_SETTINGS);\r\n        return { ...DEFAULT_USER_SETTINGS };\r\n      }\r\n\r\n      const content = fs.readFileSync(this.userSettingsPath, \"utf-8\");\r\n      const settings = JSON.parse(content);\r\n\r\n      // Merge with defaults to ensure all required fields exist\r\n      return { ...DEFAULT_USER_SETTINGS, ...settings };\r\n    } catch (error) {\r\n      console.warn(\r\n        \"Failed to load user settings:\",\r\n        error instanceof Error ? error.message : \"Unknown error\"\r\n      );\r\n      return { ...DEFAULT_USER_SETTINGS };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save user settings to ~/.grok/user-settings.json\r\n   */\r\n  public saveUserSettings(settings: Partial<UserSettings>): void {\r\n    try {\r\n      this.ensureDirectoryExists(this.userSettingsPath);\r\n\r\n      // Read existing settings directly to avoid recursion\r\n      let existingSettings: UserSettings = { ...DEFAULT_USER_SETTINGS };\r\n      if (fs.existsSync(this.userSettingsPath)) {\r\n        try {\r\n          const content = fs.readFileSync(this.userSettingsPath, \"utf-8\");\r\n          const parsed = JSON.parse(content);\r\n          existingSettings = { ...DEFAULT_USER_SETTINGS, ...parsed };\r\n        } catch (error) {\r\n          // If file is corrupted, use defaults\r\n          console.warn(\"Corrupted user settings file, using defaults\");\r\n        }\r\n      }\r\n\r\n      const mergedSettings = { ...existingSettings, ...settings };\r\n\r\n      fs.writeFileSync(\r\n        this.userSettingsPath,\r\n        JSON.stringify(mergedSettings, null, 2),\r\n        { mode: 0o600 } // Secure permissions for API key\r\n      );\r\n    } catch (error) {\r\n      console.error(\r\n        \"Failed to save user settings:\",\r\n        error instanceof Error ? error.message : \"Unknown error\"\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update a specific user setting\r\n   */\r\n  public updateUserSetting<K extends keyof UserSettings>(\r\n    key: K,\r\n    value: UserSettings[K]\r\n  ): void {\r\n    const settings = { [key]: value } as Partial<UserSettings>;\r\n    this.saveUserSettings(settings);\r\n  }\r\n\r\n  /**\r\n   * Get a specific user setting\r\n   */\r\n  public getUserSetting<K extends keyof UserSettings>(key: K): UserSettings[K] {\r\n    const settings = this.loadUserSettings();\r\n    return settings[key];\r\n  }\r\n\r\n  /**\r\n   * Load project settings from .grok/settings.json\r\n   */\r\n  public loadProjectSettings(): ProjectSettings {\r\n    try {\r\n      if (!fs.existsSync(this.projectSettingsPath)) {\r\n        // Create default project settings if file doesn't exist\r\n        this.saveProjectSettings(DEFAULT_PROJECT_SETTINGS);\r\n        return { ...DEFAULT_PROJECT_SETTINGS };\r\n      }\r\n\r\n      const content = fs.readFileSync(this.projectSettingsPath, \"utf-8\");\r\n      const settings = JSON.parse(content);\r\n\r\n      // Merge with defaults\r\n      return { ...DEFAULT_PROJECT_SETTINGS, ...settings };\r\n    } catch (error) {\r\n      console.warn(\r\n        \"Failed to load project settings:\",\r\n        error instanceof Error ? error.message : \"Unknown error\"\r\n      );\r\n      return { ...DEFAULT_PROJECT_SETTINGS };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save project settings to .grok/settings.json\r\n   */\r\n  public saveProjectSettings(settings: Partial<ProjectSettings>): void {\r\n    try {\r\n      this.ensureDirectoryExists(this.projectSettingsPath);\r\n\r\n      // Read existing settings directly to avoid recursion\r\n      let existingSettings: ProjectSettings = { ...DEFAULT_PROJECT_SETTINGS };\r\n      if (fs.existsSync(this.projectSettingsPath)) {\r\n        try {\r\n          const content = fs.readFileSync(this.projectSettingsPath, \"utf-8\");\r\n          const parsed = JSON.parse(content);\r\n          existingSettings = { ...DEFAULT_PROJECT_SETTINGS, ...parsed };\r\n        } catch (error) {\r\n          // If file is corrupted, use defaults\r\n          console.warn(\"Corrupted project settings file, using defaults\");\r\n        }\r\n      }\r\n\r\n      const mergedSettings = { ...existingSettings, ...settings };\r\n\r\n      fs.writeFileSync(\r\n        this.projectSettingsPath,\r\n        JSON.stringify(mergedSettings, null, 2)\r\n      );\r\n    } catch (error) {\r\n      console.error(\r\n        \"Failed to save project settings:\",\r\n        error instanceof Error ? error.message : \"Unknown error\"\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update a specific project setting\r\n   */\r\n  public updateProjectSetting<K extends keyof ProjectSettings>(\r\n    key: K,\r\n    value: ProjectSettings[K]\r\n  ): void {\r\n    const settings = { [key]: value } as Partial<ProjectSettings>;\r\n    this.saveProjectSettings(settings);\r\n  }\r\n\r\n  /**\r\n   * Get a specific project setting\r\n   */\r\n  public getProjectSetting<K extends keyof ProjectSettings>(\r\n    key: K\r\n  ): ProjectSettings[K] {\r\n    const settings = this.loadProjectSettings();\r\n    return settings[key];\r\n  }\r\n\r\n  /**\r\n   * Get the current model with proper fallback logic:\r\n   * 1. Project-specific model setting\r\n   * 2. User's default model\r\n   * 3. System default\r\n   */\r\n  public getCurrentModel(): string {\r\n    const projectModel = this.getProjectSetting(\"model\");\r\n    if (projectModel) {\r\n      return projectModel;\r\n    }\r\n\r\n    const userDefaultModel = this.getUserSetting(\"defaultModel\");\r\n    if (userDefaultModel) {\r\n      return userDefaultModel;\r\n    }\r\n\r\n    return DEFAULT_PROJECT_SETTINGS.model || \"grok-code-fast-1\";\r\n  }\r\n\r\n  /**\r\n   * Set the current model for the project\r\n   */\r\n  public setCurrentModel(model: string): void {\r\n    this.updateProjectSetting(\"model\", model);\r\n  }\r\n\r\n  /**\r\n   * Get available models list from user settings\r\n   */\r\n  public getAvailableModels(): string[] {\r\n    const models = this.getUserSetting(\"models\");\r\n    return models || DEFAULT_USER_SETTINGS.models || [];\r\n  }\r\n\r\n  /**\r\n   * Get API key from user settings or environment\r\n   */\r\n  public getApiKey(): string | undefined {\r\n    // First check environment variable\r\n    const envApiKey = process.env.GROK_API_KEY;\r\n    if (envApiKey) {\r\n      return envApiKey;\r\n    }\r\n\r\n    // Then check user settings\r\n    return this.getUserSetting(\"apiKey\");\r\n  }\r\n\r\n  /**\r\n   * Get base URL from user settings or environment\r\n   */\r\n  public getBaseURL(): string {\r\n    // First check environment variable\r\n    const envBaseURL = process.env.GROK_BASE_URL;\r\n    if (envBaseURL) {\r\n      return envBaseURL;\r\n    }\r\n\r\n    // Then check user settings\r\n    const userBaseURL = this.getUserSetting(\"baseURL\");\r\n    return (\r\n      userBaseURL || DEFAULT_USER_SETTINGS.baseURL || \"https://api.x.ai/v1\"\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Convenience function to get the singleton instance\r\n */\r\nexport function getSettingsManager(): SettingsManager {\r\n  return SettingsManager.getInstance();\r\n}\r\n","import { getSettingsManager } from \"../utils/settings-manager.js\";\r\nimport { MCPServerConfig } from \"./client.js\";\r\n\r\nexport interface MCPConfig {\r\n  servers: MCPServerConfig[];\r\n}\r\n\r\n/**\r\n * Load MCP configuration from project settings\r\n */\r\nexport function loadMCPConfig(): MCPConfig {\r\n  const manager = getSettingsManager();\r\n  const projectSettings = manager.loadProjectSettings();\r\n  const servers = projectSettings.mcpServers ? Object.values(projectSettings.mcpServers) : [];\r\n  return { servers };\r\n}\r\n\r\nexport function saveMCPConfig(config: MCPConfig): void {\r\n  const manager = getSettingsManager();\r\n  const mcpServers: Record<string, MCPServerConfig> = {};\r\n\r\n  // Convert servers array to object keyed by name\r\n  for (const server of config.servers) {\r\n    mcpServers[server.name] = server;\r\n  }\r\n\r\n  manager.updateProjectSetting('mcpServers', mcpServers);\r\n}\r\n\r\nexport function addMCPServer(config: MCPServerConfig): void {\r\n  const manager = getSettingsManager();\r\n  const projectSettings = manager.loadProjectSettings();\r\n  const mcpServers = projectSettings.mcpServers || {};\r\n\r\n  mcpServers[config.name] = config;\r\n  manager.updateProjectSetting('mcpServers', mcpServers);\r\n}\r\n\r\nexport function removeMCPServer(serverName: string): void {\r\n  const manager = getSettingsManager();\r\n  const projectSettings = manager.loadProjectSettings();\r\n  const mcpServers = projectSettings.mcpServers;\r\n\r\n  if (mcpServers) {\r\n    delete mcpServers[serverName];\r\n    manager.updateProjectSetting('mcpServers', mcpServers);\r\n  }\r\n}\r\n\r\nexport function getMCPServer(serverName: string): MCPServerConfig | undefined {\r\n  const manager = getSettingsManager();\r\n  const projectSettings = manager.loadProjectSettings();\r\n  return projectSettings.mcpServers?.[serverName];\r\n}\r\n\r\n// Predefined server configurations\r\nexport const PREDEFINED_SERVERS: Record<string, MCPServerConfig> = {};\r\n","import OpenAI from \"openai\";\r\nimport type { ChatCompletionMessageParam } from \"openai/resources/chat\";\r\n\r\nexport type GrokMessage = ChatCompletionMessageParam;\r\n\r\nexport interface GrokTool {\r\n  type: \"function\";\r\n  function: {\r\n    name: string;\r\n    description: string;\r\n    parameters: {\r\n      type: \"object\";\r\n      properties: Record<string, any>;\r\n      required: string[];\r\n    };\r\n  };\r\n}\r\n\r\nexport interface GrokToolCall {\r\n  id: string;\r\n  type: \"function\";\r\n  function: {\r\n    name: string;\r\n    arguments: string;\r\n  };\r\n}\r\n\r\nexport interface SearchParameters {\r\n  mode?: \"auto\" | \"on\" | \"off\";\r\n  // sources removed - let API use default sources to avoid format issues\r\n}\r\n\r\nexport interface SearchOptions {\r\n  search_parameters?: SearchParameters;\r\n}\r\n\r\nexport interface GrokResponse {\r\n  choices: Array<{\r\n    message: {\r\n      role: string;\r\n      content: string | null;\r\n      tool_calls?: GrokToolCall[];\r\n    };\r\n    finish_reason: string;\r\n  }>;\r\n}\r\n\r\nexport class GrokClient {\r\n  private client: OpenAI;\r\n  private currentModel: string = \"grok-code-fast-1\";\r\n  private defaultMaxTokens: number;\r\n\r\n  constructor(apiKey: string, model?: string, baseURL?: string) {\r\n    this.client = new OpenAI({\r\n      apiKey,\r\n      baseURL: baseURL || process.env.GROK_BASE_URL || \"https://api.x.ai/v1\",\r\n      timeout: 360000,\r\n    });\r\n    const envMax = Number(process.env.GROK_MAX_TOKENS);\r\n    this.defaultMaxTokens = Number.isFinite(envMax) && envMax > 0 ? envMax : 1536;\r\n    if (model) {\r\n      this.currentModel = model;\r\n    }\r\n  }\r\n\r\n  setModel(model: string): void {\r\n    this.currentModel = model;\r\n  }\r\n\r\n  getCurrentModel(): string {\r\n    return this.currentModel;\r\n  }\r\n\r\n  async chat(\r\n    messages: GrokMessage[],\r\n    tools?: GrokTool[],\r\n    model?: string,\r\n    searchOptions?: SearchOptions\r\n  ): Promise<GrokResponse> {\r\n    try {\r\n      const requestPayload: any = {\r\n        model: model || this.currentModel,\r\n        messages,\r\n        tools: tools || [],\r\n        tool_choice: tools && tools.length > 0 ? \"auto\" : undefined,\r\n        temperature: 0.7,\r\n        max_tokens: this.defaultMaxTokens,\r\n      };\r\n\r\n      // Add search parameters if specified\r\n      if (searchOptions?.search_parameters) {\r\n        requestPayload.search_parameters = searchOptions.search_parameters;\r\n      }\r\n\r\n      const response =\r\n        await this.client.chat.completions.create(requestPayload);\r\n\r\n      return response as GrokResponse;\r\n    } catch (error: any) {\r\n      throw new Error(`Grok API error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async *chatStream(\r\n    messages: GrokMessage[],\r\n    tools?: GrokTool[],\r\n    model?: string,\r\n    searchOptions?: SearchOptions\r\n  ): AsyncGenerator<any, void, unknown> {\r\n    try {\r\n      const requestPayload: any = {\r\n        model: model || this.currentModel,\r\n        messages,\r\n        tools: tools || [],\r\n        tool_choice: tools && tools.length > 0 ? \"auto\" : undefined,\r\n        temperature: 0.7,\r\n        max_tokens: this.defaultMaxTokens,\r\n        stream: true,\r\n      };\r\n\r\n      // Add search parameters if specified\r\n      if (searchOptions?.search_parameters) {\r\n        requestPayload.search_parameters = searchOptions.search_parameters;\r\n      }\r\n\r\n      const stream = (await this.client.chat.completions.create(\r\n        requestPayload\r\n      )) as any;\r\n\r\n      for await (const chunk of stream) {\r\n        yield chunk;\r\n      }\r\n    } catch (error: any) {\r\n      throw new Error(`Grok API error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async search(\r\n    query: string,\r\n    searchParameters?: SearchParameters\r\n  ): Promise<GrokResponse> {\r\n    const searchMessage: GrokMessage = {\r\n      role: \"user\",\r\n      content: query,\r\n    };\r\n\r\n    const searchOptions: SearchOptions = {\r\n      search_parameters: searchParameters || { mode: \"on\" },\r\n    };\r\n\r\n    return this.chat([searchMessage], [], undefined, searchOptions);\r\n  }\r\n}\r\n","import { Transport } from \"@modelcontextprotocol/sdk/shared/transport.js\";\r\nimport { StdioClientTransport } from \"@modelcontextprotocol/sdk/client/stdio.js\";\r\nimport { ChildProcess, spawn } from \"child_process\";\r\nimport { EventEmitter } from \"events\";\r\nimport axios, { AxiosInstance } from \"axios\";\r\n\r\nexport type TransportType = 'stdio' | 'http' | 'sse' | 'streamable_http';\r\n\r\nexport interface TransportConfig {\r\n  type: TransportType;\r\n  command?: string;\r\n  args?: string[];\r\n  env?: Record<string, string>;\r\n  url?: string;\r\n  headers?: Record<string, string>;\r\n}\r\n\r\nexport interface MCPTransport {\r\n  connect(): Promise<Transport>;\r\n  disconnect(): Promise<void>;\r\n  getType(): TransportType;\r\n}\r\n\r\nexport class StdioTransport implements MCPTransport {\r\n  private transport?: StdioClientTransport;\r\n  private process?: ChildProcess;\r\n\r\n  constructor(private config: TransportConfig) {\r\n    if (!config.command) {\r\n      throw new Error('Command is required for stdio transport');\r\n    }\r\n  }\r\n\r\n  async connect(): Promise<Transport> {\r\n    // Create transport with environment variables to suppress verbose output\r\n    const env = { \r\n      ...process.env, \r\n      ...this.config.env,\r\n      // Try to suppress verbose output from mcp-remote\r\n      MCP_REMOTE_QUIET: '1',\r\n      MCP_REMOTE_SILENT: '1',\r\n      DEBUG: '',\r\n      NODE_ENV: 'production'\r\n    };\r\n\r\n    this.transport = new StdioClientTransport({\r\n      command: this.config.command!,\r\n      args: this.config.args || [],\r\n      env\r\n    });\r\n\r\n    return this.transport;\r\n  }\r\n\r\n  async disconnect(): Promise<void> {\r\n    if (this.transport) {\r\n      await this.transport.close();\r\n      this.transport = undefined;\r\n    }\r\n\r\n    if (this.process) {\r\n      this.process.kill();\r\n      this.process = undefined;\r\n    }\r\n  }\r\n\r\n  getType(): TransportType {\r\n    return 'stdio';\r\n  }\r\n}\r\n\r\nexport class HttpTransport extends EventEmitter implements MCPTransport {\r\n  private client?: AxiosInstance;\r\n  private connected = false;\r\n\r\n  constructor(private config: TransportConfig) {\r\n    super();\r\n    if (!config.url) {\r\n      throw new Error('URL is required for HTTP transport');\r\n    }\r\n  }\r\n\r\n  async connect(): Promise<Transport> {\r\n    this.client = axios.create({\r\n      baseURL: this.config.url,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...this.config.headers\r\n      }\r\n    });\r\n\r\n    // Test connection\r\n    try {\r\n      await this.client.get('/health');\r\n      this.connected = true;\r\n    } catch (error) {\r\n      // If health endpoint doesn't exist, try a basic request\r\n      this.connected = true;\r\n    }\r\n\r\n    return new HttpClientTransport(this.client);\r\n  }\r\n\r\n  async disconnect(): Promise<void> {\r\n    this.connected = false;\r\n    this.client = undefined;\r\n  }\r\n\r\n  getType(): TransportType {\r\n    return 'http';\r\n  }\r\n}\r\n\r\nexport class SSETransport extends EventEmitter implements MCPTransport {\r\n  private connected = false;\r\n\r\n  constructor(private config: TransportConfig) {\r\n    super();\r\n    if (!config.url) {\r\n      throw new Error('URL is required for SSE transport');\r\n    }\r\n  }\r\n\r\n  async connect(): Promise<Transport> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        // For Node.js environment, we'll use a simple HTTP-based approach\r\n        // In a real implementation, you'd use a proper SSE library like 'eventsource'\r\n        this.connected = true;\r\n        resolve(new SSEClientTransport(this.config.url!));\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async disconnect(): Promise<void> {\r\n    this.connected = false;\r\n  }\r\n\r\n  getType(): TransportType {\r\n    return 'sse';\r\n  }\r\n}\r\n\r\n// Custom HTTP Transport implementation\r\nclass HttpClientTransport extends EventEmitter implements Transport {\r\n  constructor(private client: AxiosInstance) {\r\n    super();\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    // HTTP transport is connection-less, so we're always \"started\"\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    // Nothing to close for HTTP transport\r\n  }\r\n\r\n  async send(message: any): Promise<any> {\r\n    try {\r\n      const response = await this.client.post('/rpc', message);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`HTTP transport error: ${error}`);\r\n    }\r\n  }\r\n}\r\n\r\n// Custom SSE Transport implementation\r\nclass SSEClientTransport extends EventEmitter implements Transport {\r\n  constructor(private url: string) {\r\n    super();\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    // SSE transport is event-driven, so we're always \"started\"\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    // Nothing to close for basic SSE transport\r\n  }\r\n\r\n  async send(message: any): Promise<any> {\r\n    // For bidirectional communication over SSE, we typically use HTTP POST\r\n    // for sending messages and SSE for receiving\r\n    try {\r\n      const response = await axios.post(this.url.replace('/sse', '/rpc'), message, {\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`SSE transport error: ${error}`);\r\n    }\r\n  }\r\n}\r\n\r\nexport class StreamableHttpTransport extends EventEmitter implements MCPTransport {\r\n  private connected = false;\r\n\r\n  constructor(private config: TransportConfig) {\r\n    super();\r\n    if (!config.url) {\r\n      throw new Error('URL is required for streamable_http transport');\r\n    }\r\n  }\r\n\r\n  async connect(): Promise<Transport> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        this.connected = true;\r\n        resolve(new StreamableHttpClientTransport(this.config.url!, this.config.headers));\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  async disconnect(): Promise<void> {\r\n    this.connected = false;\r\n  }\r\n\r\n  getType(): TransportType {\r\n    return 'streamable_http';\r\n  }\r\n}\r\n\r\n// Custom Streamable HTTP Transport implementation for GitHub Copilot MCP\r\nclass StreamableHttpClientTransport extends EventEmitter implements Transport {\r\n  constructor(private url: string, private headers?: Record<string, string>) {\r\n    super();\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    // Streamable HTTP transport is connection-less, so we're always \"started\"\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    // Nothing to close for streamable HTTP transport\r\n  }\r\n\r\n  async send(message: any): Promise<any> {\r\n    console.log('StreamableHttpTransport: SSE endpoints require persistent connections, not suitable for MCP request-response pattern');\r\n    console.log('StreamableHttpTransport: Message that would be sent:', JSON.stringify(message));\r\n    \r\n    // For now, return a mock response to indicate the transport type is not compatible\r\n    // with the MCP protocol's request-response pattern\r\n    throw new Error('StreamableHttpTransport: SSE endpoints are not compatible with MCP request-response pattern. GitHub Copilot MCP may require a different integration approach.');\r\n  }\r\n}\r\n\r\nexport function createTransport(config: TransportConfig): MCPTransport {\r\n  switch (config.type) {\r\n    case 'stdio':\r\n      return new StdioTransport(config);\r\n    case 'http':\r\n      return new HttpTransport(config);\r\n    case 'sse':\r\n      return new SSETransport(config);\r\n    case 'streamable_http':\r\n      return new StreamableHttpTransport(config);\r\n    default:\r\n      throw new Error(`Unsupported transport type: ${config.type}`);\r\n  }\r\n}","import { Client } from \"@modelcontextprotocol/sdk/client/index.js\";\r\nimport { CallToolResult } from \"@modelcontextprotocol/sdk/types.js\";\r\nimport { EventEmitter } from \"events\";\r\nimport { createTransport, MCPTransport, TransportType, TransportConfig } from \"./transports.js\";\r\n\r\nexport interface MCPServerConfig {\r\n  name: string;\r\n  transport: TransportConfig;\r\n  // Legacy support for stdio-only configs\r\n  command?: string;\r\n  args?: string[];\r\n  env?: Record<string, string>;\r\n}\r\n\r\nexport interface MCPTool {\r\n  name: string;\r\n  description: string;\r\n  inputSchema: any;\r\n  serverName: string;\r\n}\r\n\r\nexport class MCPManager extends EventEmitter {\r\n  private clients: Map<string, Client> = new Map();\r\n  private transports: Map<string, MCPTransport> = new Map();\r\n  private tools: Map<string, MCPTool> = new Map();\r\n\r\n  async addServer(config: MCPServerConfig): Promise<void> {\r\n    try {\r\n      // Handle legacy stdio-only configuration\r\n      let transportConfig = config.transport;\r\n      if (!transportConfig && config.command) {\r\n        transportConfig = {\r\n          type: 'stdio',\r\n          command: config.command,\r\n          args: config.args,\r\n          env: config.env\r\n        };\r\n      }\r\n\r\n      if (!transportConfig) {\r\n        throw new Error('Transport configuration is required');\r\n      }\r\n\r\n      // Create transport\r\n      const transport = createTransport(transportConfig);\r\n      this.transports.set(config.name, transport);\r\n\r\n      // Create client\r\n      const client = new Client(\r\n        {\r\n          name: \"grok-cli\",\r\n          version: \"1.0.0\"\r\n        },\r\n        {\r\n          capabilities: {\r\n            tools: {}\r\n          }\r\n        }\r\n      );\r\n\r\n      this.clients.set(config.name, client);\r\n\r\n      // Connect\r\n      const sdkTransport = await transport.connect();\r\n      await client.connect(sdkTransport);\r\n\r\n      // List available tools\r\n      const toolsResult = await client.listTools();\r\n      \r\n      // Register tools\r\n      for (const tool of toolsResult.tools) {\r\n        const mcpTool: MCPTool = {\r\n          name: `mcp__${config.name}__${tool.name}`,\r\n          description: tool.description || `Tool from ${config.name} server`,\r\n          inputSchema: tool.inputSchema,\r\n          serverName: config.name\r\n        };\r\n        this.tools.set(mcpTool.name, mcpTool);\r\n      }\r\n\r\n      this.emit('serverAdded', config.name, toolsResult.tools.length);\r\n    } catch (error) {\r\n      this.emit('serverError', config.name, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async removeServer(serverName: string): Promise<void> {\r\n    // Remove tools\r\n    for (const [toolName, tool] of this.tools.entries()) {\r\n      if (tool.serverName === serverName) {\r\n        this.tools.delete(toolName);\r\n      }\r\n    }\r\n\r\n    // Disconnect client\r\n    const client = this.clients.get(serverName);\r\n    if (client) {\r\n      await client.close();\r\n      this.clients.delete(serverName);\r\n    }\r\n\r\n    // Close transport\r\n    const transport = this.transports.get(serverName);\r\n    if (transport) {\r\n      await transport.disconnect();\r\n      this.transports.delete(serverName);\r\n    }\r\n\r\n    this.emit('serverRemoved', serverName);\r\n  }\r\n\r\n  async callTool(toolName: string, arguments_: any): Promise<CallToolResult> {\r\n    const tool = this.tools.get(toolName);\r\n    if (!tool) {\r\n      throw new Error(`Tool ${toolName} not found`);\r\n    }\r\n\r\n    const client = this.clients.get(tool.serverName);\r\n    if (!client) {\r\n      throw new Error(`Server ${tool.serverName} not connected`);\r\n    }\r\n\r\n    // Extract the original tool name (remove mcp__servername__ prefix)\r\n    const originalToolName = toolName.replace(`mcp__${tool.serverName}__`, '');\r\n\r\n    const result = await client.callTool({\r\n      name: originalToolName,\r\n      arguments: arguments_\r\n    });\r\n    \r\n    // Ensure the result has the expected content structure\r\n    return {\r\n      ...result,\r\n      content: result.content || []\r\n    } as CallToolResult;\r\n  }\r\n\r\n  getTools(): MCPTool[] {\r\n    return Array.from(this.tools.values());\r\n  }\r\n\r\n  getServers(): string[] {\r\n    return Array.from(this.clients.keys());\r\n  }\r\n\r\n  async shutdown(): Promise<void> {\r\n    const serverNames = Array.from(this.clients.keys());\r\n    await Promise.all(serverNames.map(name => this.removeServer(name)));\r\n  }\r\n\r\n  getTransportType(serverName: string): TransportType | undefined {\r\n    const transport = this.transports.get(serverName);\r\n    return transport?.getType();\r\n  }\r\n\r\n  async ensureServersInitialized(): Promise<void> {\r\n    if (this.clients.size > 0) {\r\n      return; // Already initialized\r\n    }\r\n\r\n    const { loadMCPConfig } = await import('../mcp/config.js');\r\n    const config = loadMCPConfig();\r\n    \r\n    // Initialize servers in parallel to avoid blocking\r\n    const initPromises = config.servers.map(async (serverConfig) => {\r\n      try {\r\n        await this.addServer(serverConfig);\r\n      } catch (error) {\r\n        console.warn(`Failed to initialize MCP server ${serverConfig.name}:`, error);\r\n      }\r\n    });\r\n    \r\n    await Promise.all(initPromises);\r\n  }\r\n}","import { GrokTool } from \"./client.js\";\r\nimport { MCPManager, MCPTool } from \"../mcp/client.js\";\r\nimport { loadMCPConfig } from \"../mcp/config.js\";\r\n\r\nconst BASE_GROK_TOOLS: GrokTool[] = [\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"view_file\",\r\n      description: \"View contents of a file or list directory contents\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          path: {\r\n            type: \"string\",\r\n            description: \"Path to file or directory to view\",\r\n          },\r\n          start_line: {\r\n            type: \"number\",\r\n            description:\r\n              \"Starting line number for partial file view (optional)\",\r\n          },\r\n          end_line: {\r\n            type: \"number\",\r\n            description: \"Ending line number for partial file view (optional)\",\r\n          },\r\n        },\r\n        required: [\"path\"],\r\n      },\r\n    },\r\n  },\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"create_file\",\r\n      description: \"Create a new file with specified content\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          path: {\r\n            type: \"string\",\r\n            description: \"Path where the file should be created\",\r\n          },\r\n          content: {\r\n            type: \"string\",\r\n            description: \"Content to write to the file\",\r\n          },\r\n        },\r\n        required: [\"path\", \"content\"],\r\n      },\r\n    },\r\n  },\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"str_replace_editor\",\r\n      description: \"Replace specific text in a file. Use this for single line edits only\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          path: {\r\n            type: \"string\",\r\n            description: \"Path to the file to edit\",\r\n          },\r\n          old_str: {\r\n            type: \"string\",\r\n            description:\r\n              \"Text to replace (must match exactly, or will use fuzzy matching for multi-line strings)\",\r\n          },\r\n          new_str: {\r\n            type: \"string\",\r\n            description: \"Text to replace with\",\r\n          },\r\n          replace_all: {\r\n            type: \"boolean\",\r\n            description:\r\n              \"Replace all occurrences (default: false, only replaces first occurrence)\",\r\n          },\r\n        },\r\n        required: [\"path\", \"old_str\", \"new_str\"],\r\n      },\r\n    },\r\n  },\r\n\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"bash\",\r\n      description: \"Execute a bash command\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          command: {\r\n            type: \"string\",\r\n            description: \"The bash command to execute\",\r\n          },\r\n        },\r\n        required: [\"command\"],\r\n      },\r\n    },\r\n  },\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"search\",\r\n      description:\r\n        \"Unified search tool for finding text content or files (similar to Cursor's search)\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          query: {\r\n            type: \"string\",\r\n            description: \"Text to search for or file name/path pattern\",\r\n          },\r\n          search_type: {\r\n            type: \"string\",\r\n            enum: [\"text\", \"files\", \"both\"],\r\n            description:\r\n              \"Type of search: 'text' for content search, 'files' for file names, 'both' for both (default: 'both')\",\r\n          },\r\n          include_pattern: {\r\n            type: \"string\",\r\n            description:\r\n              \"Glob pattern for files to include (e.g. '*.ts', '*.js')\",\r\n          },\r\n          exclude_pattern: {\r\n            type: \"string\",\r\n            description:\r\n              \"Glob pattern for files to exclude (e.g. '*.log', 'node_modules')\",\r\n          },\r\n          case_sensitive: {\r\n            type: \"boolean\",\r\n            description:\r\n              \"Whether search should be case sensitive (default: false)\",\r\n          },\r\n          whole_word: {\r\n            type: \"boolean\",\r\n            description: \"Whether to match whole words only (default: false)\",\r\n          },\r\n          regex: {\r\n            type: \"boolean\",\r\n            description: \"Whether query is a regex pattern (default: false)\",\r\n          },\r\n          max_results: {\r\n            type: \"number\",\r\n            description: \"Maximum number of results to return (default: 50)\",\r\n          },\r\n          file_types: {\r\n            type: \"array\",\r\n            items: { type: \"string\" },\r\n            description: \"File types to search (e.g. ['js', 'ts', 'py'])\",\r\n          },\r\n          include_hidden: {\r\n            type: \"boolean\",\r\n            description: \"Whether to include hidden files (default: false)\",\r\n          },\r\n        },\r\n        required: [\"query\"],\r\n      },\r\n    },\r\n  },\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"create_todo_list\",\r\n      description: \"Create a new todo list for planning and tracking tasks\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          todos: {\r\n            type: \"array\",\r\n            description: \"Array of todo items\",\r\n            items: {\r\n              type: \"object\",\r\n              properties: {\r\n                id: {\r\n                  type: \"string\",\r\n                  description: \"Unique identifier for the todo item\",\r\n                },\r\n                content: {\r\n                  type: \"string\",\r\n                  description: \"Description of the todo item\",\r\n                },\r\n                status: {\r\n                  type: \"string\",\r\n                  enum: [\"pending\", \"in_progress\", \"completed\"],\r\n                  description: \"Current status of the todo item\",\r\n                },\r\n                priority: {\r\n                  type: \"string\",\r\n                  enum: [\"high\", \"medium\", \"low\"],\r\n                  description: \"Priority level of the todo item\",\r\n                },\r\n              },\r\n              required: [\"id\", \"content\", \"status\", \"priority\"],\r\n            },\r\n          },\r\n        },\r\n        required: [\"todos\"],\r\n      },\r\n    },\r\n  },\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"update_todo_list\",\r\n      description: \"Update existing todos in the todo list\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          updates: {\r\n            type: \"array\",\r\n            description: \"Array of todo updates\",\r\n            items: {\r\n              type: \"object\",\r\n              properties: {\r\n                id: {\r\n                  type: \"string\",\r\n                  description: \"ID of the todo item to update\",\r\n                },\r\n                status: {\r\n                  type: \"string\",\r\n                  enum: [\"pending\", \"in_progress\", \"completed\"],\r\n                  description: \"New status for the todo item\",\r\n                },\r\n                content: {\r\n                  type: \"string\",\r\n                  description: \"New content for the todo item\",\r\n                },\r\n                priority: {\r\n                  type: \"string\",\r\n                  enum: [\"high\", \"medium\", \"low\"],\r\n                  description: \"New priority for the todo item\",\r\n                },\r\n              },\r\n              required: [\"id\"],\r\n            },\r\n          },\r\n        },\r\n        required: [\"updates\"],\r\n      },\r\n    },\r\n  },\r\n  // Intelligence tools\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"ast_parser\",\r\n      description: \"Parse source code files to extract AST, symbols, imports, exports, and structural information\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          filePath: {\r\n            type: \"string\",\r\n            description: \"Path to the source code file to parse\"\r\n          },\r\n          includeSymbols: {\r\n            type: \"boolean\",\r\n            description: \"Whether to extract symbols (functions, classes, variables, etc.)\",\r\n            default: true\r\n          },\r\n          includeImports: {\r\n            type: \"boolean\",\r\n            description: \"Whether to extract import/export information\",\r\n            default: true\r\n          },\r\n          includeTree: {\r\n            type: \"boolean\",\r\n            description: \"Whether to include the full AST tree in response\",\r\n            default: false\r\n          },\r\n          symbolTypes: {\r\n            type: \"array\",\r\n            items: {\r\n              type: \"string\",\r\n              enum: [\"function\", \"class\", \"variable\", \"interface\", \"enum\", \"type\", \"method\", \"property\"]\r\n            },\r\n            description: \"Types of symbols to extract\",\r\n            default: [\"function\", \"class\", \"variable\", \"interface\", \"enum\", \"type\"]\r\n          },\r\n          scope: {\r\n            type: \"string\",\r\n            enum: [\"all\", \"global\", \"local\"],\r\n            description: \"Scope of symbols to extract\",\r\n            default: \"all\"\r\n          }\r\n        },\r\n        required: [\"filePath\"]\r\n      }\r\n    }\r\n  },\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"symbol_search\",\r\n      description: \"Search for symbols (functions, classes, variables) across the codebase with fuzzy matching and cross-references\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          query: {\r\n            type: \"string\",\r\n            description: \"Search query for symbol names\"\r\n          },\r\n          searchPath: {\r\n            type: \"string\",\r\n            description: \"Root path to search in\",\r\n            default: \"current working directory\"\r\n          },\r\n          symbolTypes: {\r\n            type: \"array\",\r\n            items: {\r\n              type: \"string\",\r\n              enum: [\"function\", \"class\", \"variable\", \"interface\", \"enum\", \"type\", \"method\", \"property\"]\r\n            },\r\n            description: \"Types of symbols to search for\",\r\n            default: [\"function\", \"class\", \"variable\", \"interface\", \"enum\", \"type\"]\r\n          },\r\n          includeUsages: {\r\n            type: \"boolean\",\r\n            description: \"Whether to find usages of matched symbols\",\r\n            default: false\r\n          },\r\n          fuzzyMatch: {\r\n            type: \"boolean\",\r\n            description: \"Use fuzzy matching for symbol names\",\r\n            default: true\r\n          },\r\n          caseSensitive: {\r\n            type: \"boolean\",\r\n            description: \"Case sensitive search\",\r\n            default: false\r\n          },\r\n          maxResults: {\r\n            type: \"integer\",\r\n            description: \"Maximum number of results to return\",\r\n            default: 50,\r\n            minimum: 1,\r\n            maximum: 1000\r\n          }\r\n        },\r\n        required: [\"query\"]\r\n      }\r\n    }\r\n  },\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"dependency_analyzer\",\r\n      description: \"Analyze import/export dependencies, detect circular dependencies, and generate dependency graphs\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          rootPath: {\r\n            type: \"string\",\r\n            description: \"Root path to analyze dependencies from\",\r\n            default: \"current working directory\"\r\n          },\r\n          filePatterns: {\r\n            type: \"array\",\r\n            items: { type: \"string\" },\r\n            description: \"Glob patterns for files to include\",\r\n            default: [\"**/*.{ts,tsx,js,jsx}\"]\r\n          },\r\n          excludePatterns: {\r\n            type: \"array\",\r\n            items: { type: \"string\" },\r\n            description: \"Glob patterns for files to exclude\",\r\n            default: [\"**/node_modules/**\", \"**/dist/**\", \"**/.git/**\"]\r\n          },\r\n          includeExternals: {\r\n            type: \"boolean\",\r\n            description: \"Include external module dependencies\",\r\n            default: false\r\n          },\r\n          detectCircular: {\r\n            type: \"boolean\",\r\n            description: \"Detect circular dependencies\",\r\n            default: true\r\n          },\r\n          findUnreachable: {\r\n            type: \"boolean\",\r\n            description: \"Find unreachable files from entry points\",\r\n            default: true\r\n          },\r\n          generateGraph: {\r\n            type: \"boolean\",\r\n            description: \"Generate serialized dependency graph\",\r\n            default: false\r\n          }\r\n        },\r\n        required: []\r\n      }\r\n    }\r\n  },\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"code_context\",\r\n      description: \"Build intelligent code context, analyze relationships, navigate to definitions, and find symbol usages. Supports three operations: analyze_context (default), go_to_definition, and find_usages\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          operation: {\r\n            type: \"string\",\r\n            enum: [\"analyze_context\", \"go_to_definition\", \"find_usages\"],\r\n            description: \"Operation to perform: analyze_context (default), go_to_definition (jump to symbol definition), or find_usages (find all symbol usages)\"\r\n          },\r\n          filePath: {\r\n            type: \"string\",\r\n            description: \"Path to the file to analyze for context (required for analyze_context operation)\"\r\n          },\r\n          symbolName: {\r\n            type: \"string\",\r\n            description: \"Name of the symbol to find (required for go_to_definition and find_usages operations)\"\r\n          },\r\n          rootPath: {\r\n            type: \"string\",\r\n            description: \"Root path of the project for relative path resolution\"\r\n          },\r\n          includeDefinition: {\r\n            type: \"boolean\",\r\n            description: \"Include definition in find_usages results\",\r\n            default: true\r\n          },\r\n          includeRelationships: {\r\n            type: \"boolean\",\r\n            description: \"Include code relationships analysis (for analyze_context)\",\r\n            default: true\r\n          },\r\n          includeMetrics: {\r\n            type: \"boolean\",\r\n            description: \"Include code quality metrics (for analyze_context)\",\r\n            default: true\r\n          },\r\n          includeSemantics: {\r\n            type: \"boolean\",\r\n            description: \"Include semantic analysis and patterns (for analyze_context)\",\r\n            default: true\r\n          },\r\n          maxRelatedFiles: {\r\n            type: \"integer\",\r\n            description: \"Maximum number of related files to analyze (for analyze_context)\",\r\n            default: 10,\r\n            minimum: 1,\r\n            maximum: 50\r\n          }\r\n        },\r\n        required: []\r\n      }\r\n    }\r\n  },\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"refactoring_assistant\",\r\n      description: \"Perform safe code refactoring operations including rename, extract, inline, and move operations\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          operation: {\r\n            type: \"string\",\r\n            enum: [\"rename\", \"extract_function\", \"extract_variable\", \"inline_function\", \"inline_variable\", \"move_function\", \"move_class\"],\r\n            description: \"Type of refactoring operation to perform\"\r\n          },\r\n          symbolName: {\r\n            type: \"string\",\r\n            description: \"Name of symbol to refactor (for rename, inline, move operations)\"\r\n          },\r\n          newName: {\r\n            type: \"string\",\r\n            description: \"New name for symbol (for rename operation)\"\r\n          },\r\n          filePath: {\r\n            type: \"string\",\r\n            description: \"Path to file containing the symbol\"\r\n          },\r\n          scope: {\r\n            type: \"string\",\r\n            enum: [\"file\", \"project\", \"global\"],\r\n            description: \"Scope of refactoring operation\",\r\n            default: \"project\"\r\n          },\r\n          includeComments: {\r\n            type: \"boolean\",\r\n            description: \"Include comments in rename operation\",\r\n            default: false\r\n          },\r\n          includeStrings: {\r\n            type: \"boolean\",\r\n            description: \"Include string literals in rename operation\",\r\n            default: false\r\n          },\r\n          startLine: {\r\n            type: \"integer\",\r\n            description: \"Start line for extract operations\"\r\n          },\r\n          endLine: {\r\n            type: \"integer\",\r\n            description: \"End line for extract operations\"\r\n          },\r\n          functionName: {\r\n            type: \"string\",\r\n            description: \"Name for extracted function\"\r\n          },\r\n          variableName: {\r\n            type: \"string\",\r\n            description: \"Name for extracted variable\"\r\n          }\r\n        },\r\n        required: [\"operation\"]\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\n// Morph Fast Apply tool (conditional)\r\nconst MORPH_EDIT_TOOL: GrokTool = {\r\n  type: \"function\",\r\n  function: {\r\n    name: \"edit_file\",\r\n    description: \"Use this tool to make an edit to an existing file.\\n\\nThis will be read by a less intelligent model, which will quickly apply the edit. You should make it clear what the edit is, while also minimizing the unchanged code you write.\\nWhen writing the edit, you should specify each edit in sequence, with the special comment // ... existing code ... to represent unchanged code in between edited lines.\\n\\nFor example:\\n\\n// ... existing code ...\\nFIRST_EDIT\\n// ... existing code ...\\nSECOND_EDIT\\n// ... existing code ...\\nTHIRD_EDIT\\n// ... existing code ...\\n\\nYou should still bias towards repeating as few lines of the original file as possible to convey the change.\\nBut, each edit should contain sufficient context of unchanged lines around the code you're editing to resolve ambiguity.\\nDO NOT omit spans of pre-existing code (or comments) without using the // ... existing code ... comment to indicate its absence. If you omit the existing code comment, the model may inadvertently delete these lines.\\nIf you plan on deleting a section, you must provide context before and after to delete it. If the initial code is ```code \\\\n Block 1 \\\\n Block 2 \\\\n Block 3 \\\\n code```, and you want to remove Block 2, you would output ```// ... existing code ... \\\\n Block 1 \\\\n  Block 3 \\\\n // ... existing code ...```.\\nMake sure it is clear what the edit should be, and where it should be applied.\\nMake edits to a file in a single edit_file call instead of multiple edit_file calls to the same file. The apply model can handle many distinct edits at once.\",\r\n    parameters: {\r\n      type: \"object\",\r\n      properties: {\r\n        target_file: {\r\n          type: \"string\",\r\n          description: \"The target file to modify.\"\r\n        },\r\n        instructions: {\r\n          type: \"string\",\r\n          description: \"A single sentence instruction describing what you are going to do for the sketched edit. This is used to assist the less intelligent model in applying the edit. Use the first person to describe what you are going to do. Use it to disambiguate uncertainty in the edit.\"\r\n        },\r\n        code_edit: {\r\n          type: \"string\",\r\n          description: \"Specify ONLY the precise lines of code that you wish to edit. NEVER specify or write out unchanged code. Instead, represent all unchanged code using the comment of the language you're editing in - example: // ... existing code ...\"\r\n        }\r\n      },\r\n      required: [\"target_file\", \"instructions\", \"code_edit\"]\r\n    }\r\n  }\r\n};\r\n\r\n// Function to build tools array conditionally\r\nfunction buildGrokTools(): GrokTool[] {\r\n  const tools = [...BASE_GROK_TOOLS];\r\n\r\n  // Add Morph Fast Apply tool if API key is available\r\n  if (process.env.MORPH_API_KEY) {\r\n    tools.splice(3, 0, MORPH_EDIT_TOOL); // Insert after str_replace_editor\r\n  }\r\n\r\n  return tools;\r\n}\r\n\r\n// Export dynamic tools array\r\nexport const GROK_TOOLS: GrokTool[] = buildGrokTools();\r\n\r\n// Global MCP manager instance\r\nlet mcpManager: MCPManager | null = null;\r\n\r\nexport function getMCPManager(): MCPManager {\r\n  if (!mcpManager) {\r\n    mcpManager = new MCPManager();\r\n  }\r\n  return mcpManager;\r\n}\r\n\r\nexport async function initializeMCPServers(): Promise<void> {\r\n  const manager = getMCPManager();\r\n  const config = loadMCPConfig();\r\n\r\n  // Store original stderr.write\r\n  const originalStderrWrite = process.stderr.write;\r\n\r\n  // Temporarily suppress stderr to hide verbose MCP connection logs\r\n  process.stderr.write = function (chunk: any, encoding?: any, callback?: any): boolean {\r\n    // Filter out mcp-remote verbose logs\r\n    const chunkStr = chunk.toString();\r\n    if (chunkStr.includes('[') && (\r\n      chunkStr.includes('Using existing client port') ||\r\n      chunkStr.includes('Connecting to remote server') ||\r\n      chunkStr.includes('Using transport strategy') ||\r\n      chunkStr.includes('Connected to remote server') ||\r\n      chunkStr.includes('Local STDIO server running') ||\r\n      chunkStr.includes('Proxy established successfully') ||\r\n      chunkStr.includes('Local→Remote') ||\r\n      chunkStr.includes('Remote→Local')\r\n    )) {\r\n      // Suppress these verbose logs\r\n      if (callback) callback();\r\n      return true;\r\n    }\r\n\r\n    // Allow other stderr output\r\n    return originalStderrWrite.call(this, chunk, encoding, callback);\r\n  };\r\n\r\n  try {\r\n    for (const serverConfig of config.servers) {\r\n      try {\r\n        await manager.addServer(serverConfig);\r\n      } catch (error) {\r\n        console.warn(`Failed to initialize MCP server ${serverConfig.name}:`, error);\r\n      }\r\n    }\r\n  } finally {\r\n    // Restore original stderr.write\r\n    process.stderr.write = originalStderrWrite;\r\n  }\r\n}\r\n\r\nexport function convertMCPToolToGrokTool(mcpTool: MCPTool): GrokTool {\r\n  return {\r\n    type: \"function\",\r\n    function: {\r\n      name: mcpTool.name,\r\n      description: mcpTool.description,\r\n      parameters: mcpTool.inputSchema || {\r\n        type: \"object\",\r\n        properties: {},\r\n        required: []\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport function addMCPToolsToGrokTools(baseTools: GrokTool[]): GrokTool[] {\r\n  if (!mcpManager) {\r\n    return baseTools;\r\n  }\r\n\r\n  const mcpTools = mcpManager.getTools();\r\n  const grokMCPTools = mcpTools.map(convertMCPToolToGrokTool);\r\n\r\n  return [...baseTools, ...grokMCPTools];\r\n}\r\n\r\nexport async function getAllGrokTools(): Promise<GrokTool[]> {\r\n  const manager = getMCPManager();\r\n  // Try to initialize servers if not already done, but don't block\r\n  manager.ensureServersInitialized().catch(() => {\r\n    // Ignore initialization errors to avoid blocking\r\n  });\r\n  return addMCPToolsToGrokTools(GROK_TOOLS);\r\n}\r\n","import { GrokClient, GrokMessage, GrokToolCall } from \"../grok/client.js\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport {\r\n  getAllGrokTools,\r\n  getMCPManager,\r\n  initializeMCPServers,\r\n} from \"../grok/tools.js\";\r\nimport { loadMCPConfig } from \"../mcp/config.js\";\r\nimport {\r\n  TextEditorTool,\r\n  MorphEditorTool,\r\n  BashTool,\r\n  TodoTool,\r\n  ConfirmationTool,\r\n  SearchTool,\r\n  MultiFileEditorTool,\r\n  AdvancedSearchTool,\r\n  FileTreeOperationsTool,\r\n  CodeAwareEditorTool,\r\n  OperationHistoryTool,\r\n  SymbolSearchTool,\r\n  DependencyAnalyzerTool,\r\n  CodeContextTool,\r\n  RefactoringAssistantTool,\r\n} from \"../tools/index.js\";\r\nimport { CodeIntelligenceEngine } from \"../tools/intelligence/engine.js\";\r\nimport { ToolResult } from \"../types/index.js\";\r\nimport { EventEmitter } from \"events\";\r\nimport { createTokenCounter, TokenCounter } from \"../utils/token-counter.js\";\r\nimport { loadCustomInstructions } from \"../utils/custom-instructions.js\";\r\nimport { getSettingsManager } from \"../utils/settings-manager.js\";\r\n\r\nexport interface ChatEntry {\r\n  type: \"user\" | \"assistant\" | \"tool_result\" | \"tool_call\";\r\n  content: string;\r\n  timestamp: Date;\r\n  toolCalls?: GrokToolCall[];\r\n  toolCall?: GrokToolCall;\r\n  toolResult?: { success: boolean; output?: string; error?: string };\r\n  isStreaming?: boolean;\r\n}\r\n\r\nexport interface StreamingChunk {\r\n  type: \"content\" | \"tool_calls\" | \"tool_result\" | \"done\" | \"token_count\";\r\n  content?: string;\r\n  toolCalls?: GrokToolCall[];\r\n  toolCall?: GrokToolCall;\r\n  toolResult?: ToolResult;\r\n  tokenCount?: number;\r\n}\r\n\r\nexport class GrokAgent extends EventEmitter {\r\n  private grokClient: GrokClient;\r\n  private textEditor: TextEditorTool;\r\n  private morphEditor: MorphEditorTool | null;\r\n  private bash: BashTool;\r\n  private todoTool: TodoTool;\r\n  private confirmationTool: ConfirmationTool;\r\n  private search: SearchTool;\r\n  // Advanced tools\r\n  private multiFileEditor: MultiFileEditorTool;\r\n  private advancedSearch: AdvancedSearchTool;\r\n  private fileTreeOps: FileTreeOperationsTool;\r\n  private codeAwareEditor: CodeAwareEditorTool;\r\n  private operationHistory: OperationHistoryTool;\r\n  // Intelligence tools\r\n  private intelligenceEngine: CodeIntelligenceEngine;\r\n  private symbolSearch: SymbolSearchTool;\r\n  private dependencyAnalyzer: DependencyAnalyzerTool;\r\n  private codeContext: CodeContextTool;\r\n  private refactoringAssistant: RefactoringAssistantTool;\r\n  private chatHistory: ChatEntry[] = [];\r\n  private messages: GrokMessage[] = [];\r\n  private tokenCounter: TokenCounter;\r\n  private abortController: AbortController | null = null;\r\n  private mcpInitialized: boolean = false;\r\n  private maxToolRounds: number;\r\n  private lastRequestTime: number = 0;\r\n  private activeToolCalls: number = 0;\r\n  private readonly maxConcurrentToolCalls: number = 2;\r\n  private readonly minRequestInterval: number = 500; // ms\r\n  private sessionLogPath: string;\r\n\r\n  constructor(\r\n    apiKey: string,\r\n    baseURL?: string,\r\n    model?: string,\r\n    maxToolRounds?: number\r\n  ) {\r\n    super();\r\n    const manager = getSettingsManager();\r\n    const savedModel = manager.getCurrentModel();\r\n    const modelToUse = model || savedModel || \"grok-code-fast-1\";\r\n    this.maxToolRounds = maxToolRounds || 400;\r\n    this.sessionLogPath = process.env.GROK_SESSION_LOG || `${process.env.HOME}/.grok/session.log`;\r\n    this.grokClient = new GrokClient(apiKey, modelToUse, baseURL);\r\n    this.textEditor = new TextEditorTool();\r\n    this.morphEditor = process.env.MORPH_API_KEY ? new MorphEditorTool() : null;\r\n    this.bash = new BashTool();\r\n    this.todoTool = new TodoTool();\r\n    this.confirmationTool = new ConfirmationTool();\r\n    this.search = new SearchTool();\r\n    // Initialize advanced tools\r\n    this.multiFileEditor = new MultiFileEditorTool();\r\n    this.advancedSearch = new AdvancedSearchTool();\r\n    this.fileTreeOps = new FileTreeOperationsTool();\r\n    this.codeAwareEditor = new CodeAwareEditorTool();\r\n    this.operationHistory = new OperationHistoryTool();\r\n    // Initialize intelligence engine\r\n    this.intelligenceEngine = new CodeIntelligenceEngine(process.cwd());\r\n    // Initialize intelligence tools\r\n    this.symbolSearch = new SymbolSearchTool(this.intelligenceEngine);\r\n    this.dependencyAnalyzer = new DependencyAnalyzerTool(this.intelligenceEngine);\r\n    this.codeContext = new CodeContextTool(this.intelligenceEngine);\r\n    this.refactoringAssistant = new RefactoringAssistantTool(this.intelligenceEngine);\r\n    this.tokenCounter = createTokenCounter(modelToUse);\r\n\r\n    // Initialize MCP servers if configured\r\n    this.initializeMCP();\r\n\r\n    // Load custom instructions\r\n    const customInstructions = loadCustomInstructions();\r\n    const customInstructionsSection = customInstructions\r\n      ? `\\n\\nCUSTOM INSTRUCTIONS:\\n${customInstructions}\\n\\nThe above custom instructions should be followed alongside the standard instructions below.`\r\n      : \"\";\r\n\r\n    // Initialize with system message\r\n    this.messages.push({\r\n      role: \"system\",\r\n      content: `You are Grok CLI, an AI assistant that helps with file editing, coding tasks, and system operations.${customInstructionsSection}\r\n\r\nYou have access to these tools:\r\n\r\nCORE TOOLS:\r\n- view_file: View file contents or directory listings\r\n- create_file: Create new files with content (ONLY use this for files that don't exist yet)\r\n- str_replace_editor: Replace text in existing files (ALWAYS use this to edit or update existing files)${this.morphEditor\r\n          ? \"\\n- edit_file: High-speed file editing with Morph Fast Apply (4,500+ tokens/sec with 98% accuracy)\"\r\n          : \"\"\r\n        }\r\n- bash: Execute bash commands (use for searching, file discovery, navigation, and system operations)\r\n- search: Unified search tool for finding text content or files (similar to Cursor's search functionality)\r\n- create_todo_list: Create a visual todo list for planning and tracking tasks\r\n- update_todo_list: Update existing todos in your todo list\r\n\r\nADVANCED TOOLS:\r\n- multi_file_edit: Perform atomic operations across multiple files with transaction support\r\n- advanced_search: Enhanced search with regex patterns, context, and bulk replace capabilities\r\n- file_tree_ops: Generate directory trees, bulk operations, and file organization\r\n- code_analysis: Analyze code structure, perform refactoring, and smart code operations\r\n- operation_history: Track, undo, and redo operations with comprehensive history management\r\n\r\nREAL-TIME INFORMATION:\r\nYou have access to real-time web search and X (Twitter) data. When users ask for current information, latest news, or recent events, you automatically have access to up-to-date information from the web and social media.\r\n\r\nIMPORTANT TOOL USAGE RULES:\r\n- NEVER use create_file on files that already exist - this will overwrite them completely\r\n- ALWAYS use str_replace_editor to modify existing files, even for small changes\r\n- Before editing a file, use view_file to see its current contents\r\n- Use create_file ONLY when creating entirely new files that don't exist\r\n\r\nSEARCHING AND EXPLORATION:\r\n- Use search for fast, powerful text search across files or finding files by name (unified search tool)\r\n- Examples: search for text content like \"import.*react\", search for files like \"component.tsx\"\r\n- Use bash with commands like 'find', 'grep', 'rg', 'ls' for complex file operations and navigation\r\n- view_file is best for reading specific files you already know exist\r\n\r\nWhen a user asks you to edit, update, modify, or change an existing file:\r\n1. First use view_file to see the current contents\r\n2. Then use str_replace_editor to make the specific changes\r\n3. Never use create_file for existing files\r\n\r\nWhen a user asks you to create a new file that doesn't exist:\r\n1. Use create_file with the full content\r\n\r\nTASK PLANNING WITH TODO LISTS:\r\n- For complex requests with multiple steps, ALWAYS create a todo list first to plan your approach\r\n- Use create_todo_list to break down tasks into manageable items with priorities\r\n- Mark tasks as 'in_progress' when you start working on them (only one at a time)\r\n- Mark tasks as 'completed' immediately when finished\r\n- Use update_todo_list to track your progress throughout the task\r\n- Todo lists provide visual feedback with colors: ✅ Green (completed), 🔄 Cyan (in progress), ⏳ Yellow (pending)\r\n- Always create todos with priorities: 'high' (🔴), 'medium' (🟡), 'low' (🟢)\r\n\r\nUSER CONFIRMATION SYSTEM:\r\nFile operations (create_file, str_replace_editor) and bash commands will automatically request user confirmation before execution. The confirmation system will show users the actual content or command before they decide. Users can choose to approve individual operations or approve all operations of that type for the session.\r\n\r\nIf a user rejects an operation, the tool will return an error and you should not proceed with that specific operation.\r\n\r\nBe helpful, direct, and efficient. Always explain what you're doing and show the results.\r\n\r\nIMPORTANT RESPONSE GUIDELINES:\r\n- After using tools, do NOT respond with pleasantries like \"Thanks for...\" or \"Great!\"\r\n- Only provide necessary explanations or next steps if relevant to the task\r\n- Keep responses concise and focused on the actual work being done\r\n- If a tool execution completes the user's request, you can remain silent or give a brief confirmation\r\n\r\nCurrent working directory: ${process.cwd()}`,\r\n    });\r\n  }\r\n\r\n  private async initializeMCP(): Promise<void> {\r\n    // Initialize MCP in the background without blocking\r\n    Promise.resolve().then(async () => {\r\n      try {\r\n        const config = loadMCPConfig();\r\n        if (config.servers.length > 0) {\r\n          await initializeMCPServers();\r\n        }\r\n      } catch (error) {\r\n        console.warn(\"MCP initialization failed:\", error);\r\n      } finally {\r\n        this.mcpInitialized = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  private isGrokModel(): boolean {\r\n    const currentModel = this.grokClient.getCurrentModel();\r\n    return currentModel.toLowerCase().includes(\"grok\");\r\n  }\r\n\r\n  // Heuristic: enable web search only when likely needed\r\n  private shouldUseSearchFor(message: string): boolean {\r\n    const q = message.toLowerCase();\r\n    const keywords = [\r\n      \"today\",\r\n      \"latest\",\r\n      \"news\",\r\n      \"trending\",\r\n      \"breaking\",\r\n      \"current\",\r\n      \"now\",\r\n      \"recent\",\r\n      \"x.com\",\r\n      \"twitter\",\r\n      \"tweet\",\r\n      \"what happened\",\r\n      \"as of\",\r\n      \"update on\",\r\n      \"release notes\",\r\n      \"changelog\",\r\n      \"price\",\r\n    ];\r\n    if (keywords.some((k) => q.includes(k))) return true;\r\n    // crude date pattern (e.g., 2024/2025) may imply recency\r\n    if (/(20\\d{2})/.test(q)) return true;\r\n    return false;\r\n  }\r\n\r\n  async processUserMessage(message: string): Promise<ChatEntry[]> {\r\n    // Add user message to conversation\r\n    const userEntry: ChatEntry = {\r\n      type: \"user\",\r\n      content: message,\r\n      timestamp: new Date(),\r\n    };\r\n    this.chatHistory.push(userEntry);\r\n    this.logEntry(userEntry);\r\n    this.messages.push({ role: \"user\", content: message });\r\n\r\n    const newEntries: ChatEntry[] = [userEntry];\r\n    const maxToolRounds = this.maxToolRounds; // Prevent infinite loops\r\n    let toolRounds = 0;\r\n\r\n    try {\r\n      const tools = await getAllGrokTools();\r\n      let currentResponse = await this.grokClient.chat(\r\n        this.messages,\r\n        tools,\r\n        undefined,\r\n        this.isGrokModel() && this.shouldUseSearchFor(message)\r\n          ? { search_parameters: { mode: \"auto\" } }\r\n          : { search_parameters: { mode: \"off\" } }\r\n      );\r\n\r\n      // Agent loop - continue until no more tool calls or max rounds reached\r\n      while (toolRounds < maxToolRounds) {\r\n        const assistantMessage = currentResponse.choices[0]?.message;\r\n\r\n        if (!assistantMessage) {\r\n          throw new Error(\"No response from Grok\");\r\n        }\r\n\r\n        // Handle tool calls\r\n        if (\r\n          assistantMessage.tool_calls &&\r\n          assistantMessage.tool_calls.length > 0\r\n        ) {\r\n          toolRounds++;\r\n\r\n          // Add assistant message with tool calls\r\n          const assistantEntry: ChatEntry = {\r\n            type: \"assistant\",\r\n            content: assistantMessage.content || \"Using tools to help you...\",\r\n            timestamp: new Date(),\r\n            toolCalls: assistantMessage.tool_calls,\r\n          };\r\n          this.chatHistory.push(assistantEntry);\r\n          this.logEntry(assistantEntry);\r\n          newEntries.push(assistantEntry);\r\n\r\n          // Add assistant message to conversation\r\n          this.messages.push({\r\n            role: \"assistant\",\r\n            content: assistantMessage.content || \"\",\r\n            tool_calls: assistantMessage.tool_calls,\r\n          } as any);\r\n\r\n          // Create initial tool call entries to show tools are being executed\r\n          assistantMessage.tool_calls.forEach((toolCall) => {\r\n            const toolCallEntry: ChatEntry = {\r\n              type: \"tool_call\",\r\n              content: \"Executing...\",\r\n              timestamp: new Date(),\r\n              toolCall: toolCall,\r\n            };\r\n            this.chatHistory.push(toolCallEntry);\r\n            newEntries.push(toolCallEntry);\r\n          });\r\n\r\n          // Execute tool calls and update the entries\r\n          for (const toolCall of assistantMessage.tool_calls) {\r\n            const result = await this.executeTool(toolCall);\r\n\r\n            // Update the existing tool_call entry with the result\r\n            const entryIndex = this.chatHistory.findIndex(\r\n              (entry) =>\r\n                entry.type === \"tool_call\" && entry.toolCall?.id === toolCall.id\r\n            );\r\n\r\n            if (entryIndex !== -1) {\r\n              const updatedEntry: ChatEntry = {\r\n                ...this.chatHistory[entryIndex],\r\n                type: \"tool_result\",\r\n                content: result.success\r\n                  ? result.output || \"Success\"\r\n                  : result.error || \"Error occurred\",\r\n                toolResult: result,\r\n              };\r\n              this.chatHistory[entryIndex] = updatedEntry;\r\n\r\n              // Also update in newEntries for return value\r\n              const newEntryIndex = newEntries.findIndex(\r\n                (entry) =>\r\n                  entry.type === \"tool_call\" &&\r\n                  entry.toolCall?.id === toolCall.id\r\n              );\r\n              if (newEntryIndex !== -1) {\r\n                newEntries[newEntryIndex] = updatedEntry;\r\n              }\r\n            }\r\n\r\n            // Add tool result to messages with proper format (needed for AI context)\r\n            this.messages.push({\r\n              role: \"tool\",\r\n              content: result.success\r\n                ? result.output || \"Success\"\r\n                : result.error || \"Error\",\r\n              tool_call_id: toolCall.id,\r\n            });\r\n          }\r\n\r\n          // Get next response - this might contain more tool calls\r\n          currentResponse = await this.grokClient.chat(\r\n            this.messages,\r\n            tools,\r\n            undefined,\r\n            this.isGrokModel() && this.shouldUseSearchFor(message)\r\n              ? { search_parameters: { mode: \"auto\" } }\r\n              : { search_parameters: { mode: \"off\" } }\r\n          );\r\n        } else {\r\n          // No more tool calls, add final response\r\n          const finalEntry: ChatEntry = {\r\n            type: \"assistant\",\r\n            content:\r\n              assistantMessage.content ||\r\n              \"I understand, but I don't have a specific response.\",\r\n            timestamp: new Date(),\r\n          };\r\n          this.chatHistory.push(finalEntry);\r\n          this.messages.push({\r\n            role: \"assistant\",\r\n            content: assistantMessage.content || \"\",\r\n          });\r\n          newEntries.push(finalEntry);\r\n          break; // Exit the loop\r\n        }\r\n      }\r\n\r\n      if (toolRounds >= maxToolRounds) {\r\n        const warningEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content:\r\n            \"Maximum tool execution rounds reached. Stopping to prevent infinite loops.\",\r\n          timestamp: new Date(),\r\n        };\r\n        this.chatHistory.push(warningEntry);\r\n        newEntries.push(warningEntry);\r\n      }\r\n\r\n      return newEntries;\r\n    } catch (error: any) {\r\n      const errorEntry: ChatEntry = {\r\n        type: \"assistant\",\r\n        content: `Sorry, I encountered an error: ${error.message}`,\r\n        timestamp: new Date(),\r\n      };\r\n      this.chatHistory.push(errorEntry);\r\n      return [userEntry, errorEntry];\r\n    }\r\n  }\r\n\r\n  private messageReducer(previous: any, item: any): any {\r\n    const reduce = (acc: any, delta: any) => {\r\n      acc = { ...acc };\r\n      for (const [key, value] of Object.entries(delta)) {\r\n        if (acc[key] === undefined || acc[key] === null) {\r\n          acc[key] = value;\r\n          // Clean up index properties from tool calls\r\n          if (Array.isArray(acc[key])) {\r\n            for (const arr of acc[key]) {\r\n              delete arr.index;\r\n            }\r\n          }\r\n        } else if (typeof acc[key] === \"string\" && typeof value === \"string\") {\r\n          (acc[key] as string) += value;\r\n        } else if (Array.isArray(acc[key]) && Array.isArray(value)) {\r\n          const accArray = acc[key] as any[];\r\n          for (let i = 0; i < value.length; i++) {\r\n            if (!accArray[i]) accArray[i] = {};\r\n            accArray[i] = reduce(accArray[i], value[i]);\r\n          }\r\n        } else if (typeof acc[key] === \"object\" && typeof value === \"object\") {\r\n          acc[key] = reduce(acc[key], value);\r\n        }\r\n      }\r\n      return acc;\r\n    };\r\n\r\n    return reduce(previous, item.choices[0]?.delta || {});\r\n  }\r\n\r\n  async *processUserMessageStream(\r\n    message: string\r\n  ): AsyncGenerator<StreamingChunk, void, unknown> {\r\n    // Create new abort controller for this request\r\n    this.abortController = new AbortController();\r\n\r\n    // Add user message to conversation\r\n    const userEntry: ChatEntry = {\r\n      type: \"user\",\r\n      content: message,\r\n      timestamp: new Date(),\r\n    };\r\n    this.chatHistory.push(userEntry);\r\n    this.messages.push({ role: \"user\", content: message });\r\n\r\n    // Calculate input tokens\r\n    let inputTokens = this.tokenCounter.countMessageTokens(\r\n      this.messages as any\r\n    );\r\n    yield {\r\n      type: \"token_count\",\r\n      tokenCount: inputTokens,\r\n    };\r\n\r\n    const maxToolRounds = this.maxToolRounds; // Prevent infinite loops\r\n    let toolRounds = 0;\r\n    let totalOutputTokens = 0;\r\n    let lastTokenUpdate = 0;\r\n\r\n    try {\r\n      // Agent loop - continue until no more tool calls or max rounds reached\r\n      while (toolRounds < maxToolRounds) {\r\n        // Check if operation was cancelled\r\n        if (this.abortController?.signal.aborted) {\r\n          yield {\r\n            type: \"content\",\r\n            content: \"\\n\\n[Operation cancelled by user]\",\r\n          };\r\n          yield { type: \"done\" };\r\n          return;\r\n        }\r\n\r\n        // Enforce global rate limit\r\n        const now = Date.now();\r\n        const timeSinceLastRequest = now - this.lastRequestTime;\r\n        if (timeSinceLastRequest < this.minRequestInterval) {\r\n          const delay = this.minRequestInterval - timeSinceLastRequest;\r\n          await new Promise(resolve => setTimeout(resolve, delay));\r\n        }\r\n        this.lastRequestTime = Date.now();\r\n\r\n        // Stream response and accumulate\r\n        const tools = await getAllGrokTools();\r\n        const stream = this.grokClient.chatStream(\r\n          this.messages,\r\n          tools,\r\n          undefined,\r\n          this.isGrokModel() && this.shouldUseSearchFor(message)\r\n            ? { search_parameters: { mode: \"auto\" } }\r\n            : { search_parameters: { mode: \"off\" } }\r\n        );\r\n        let accumulatedMessage: any = {};\r\n        let accumulatedContent = \"\";\r\n        let toolCallsYielded = false;\r\n\r\n        for await (const chunk of stream) {\r\n          // Check for cancellation in the streaming loop\r\n          if (this.abortController?.signal.aborted) {\r\n            yield {\r\n              type: \"content\",\r\n              content: \"\\n\\n[Operation cancelled by user]\",\r\n            };\r\n            yield { type: \"done\" };\r\n            return;\r\n          }\r\n\r\n          if (!chunk.choices?.[0]) continue;\r\n\r\n          // Accumulate the message using reducer\r\n          accumulatedMessage = this.messageReducer(accumulatedMessage, chunk);\r\n\r\n          // Check for tool calls - yield when we have complete tool calls with function names\r\n          if (!toolCallsYielded && accumulatedMessage.tool_calls?.length > 0) {\r\n            // Check if we have at least one complete tool call with a function name\r\n            const hasCompleteTool = accumulatedMessage.tool_calls.some(\r\n              (tc: any) => tc.function?.name\r\n            );\r\n            if (hasCompleteTool) {\r\n              yield {\r\n                type: \"tool_calls\",\r\n                toolCalls: accumulatedMessage.tool_calls,\r\n              };\r\n              toolCallsYielded = true;\r\n            }\r\n          }\r\n\r\n          // Stream content as it comes\r\n          if (chunk.choices[0].delta?.content) {\r\n            accumulatedContent += chunk.choices[0].delta.content;\r\n\r\n            // Update token count in real-time including accumulated content and any tool calls\r\n            const currentOutputTokens =\r\n              this.tokenCounter.estimateStreamingTokens(accumulatedContent) +\r\n              (accumulatedMessage.tool_calls\r\n                ? this.tokenCounter.countTokens(\r\n                  JSON.stringify(accumulatedMessage.tool_calls)\r\n                )\r\n                : 0);\r\n            totalOutputTokens = currentOutputTokens;\r\n\r\n            yield {\r\n              type: \"content\",\r\n              content: chunk.choices[0].delta.content,\r\n            };\r\n\r\n            // Emit token count update\r\n            const now = Date.now();\r\n            if (now - lastTokenUpdate > 250) {\r\n              lastTokenUpdate = now;\r\n              yield {\r\n                type: \"token_count\",\r\n                tokenCount: inputTokens + totalOutputTokens,\r\n              };\r\n            }\r\n          }\r\n        }\r\n\r\n        // Add assistant entry to history\r\n        const assistantEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: accumulatedMessage.content || \"Using tools to help you...\",\r\n          timestamp: new Date(),\r\n          toolCalls: accumulatedMessage.tool_calls || undefined,\r\n        };\r\n        this.chatHistory.push(assistantEntry);\r\n\r\n        // Add accumulated message to conversation\r\n        this.messages.push({\r\n          role: \"assistant\",\r\n          content: accumulatedMessage.content || \"\",\r\n          tool_calls: accumulatedMessage.tool_calls,\r\n        } as any);\r\n\r\n        // Handle tool calls if present\r\n        if (accumulatedMessage.tool_calls?.length > 0) {\r\n          toolRounds++;\r\n\r\n          // Only yield tool_calls if we haven't already yielded them during streaming\r\n          if (!toolCallsYielded) {\r\n            yield {\r\n              type: \"tool_calls\",\r\n              toolCalls: accumulatedMessage.tool_calls,\r\n            };\r\n          }\r\n\r\n          // Execute tools with concurrency limit\r\n          const toolCalls = accumulatedMessage.tool_calls;\r\n          for (let i = 0; i < toolCalls.length; i += this.maxConcurrentToolCalls) {\r\n            const batch = toolCalls.slice(i, i + this.maxConcurrentToolCalls);\r\n            const batchPromises = batch.map(async (toolCall: GrokToolCall) => {\r\n              // Check for cancellation before executing each tool\r\n              if (this.abortController?.signal.aborted) {\r\n                return null;\r\n              }\r\n\r\n              const result = await this.executeTool(toolCall);\r\n\r\n              const toolResultEntry: ChatEntry = {\r\n                type: \"tool_result\",\r\n                content: result.success\r\n                  ? result.output || \"Success\"\r\n                  : result.error || \"Error occurred\",\r\n                timestamp: new Date(),\r\n                toolCall: toolCall,\r\n                toolResult: result,\r\n              };\r\n              this.chatHistory.push(toolResultEntry);\r\n\r\n              // Add tool result with proper format (needed for AI context)\r\n              this.messages.push({\r\n                role: \"tool\",\r\n                content: result.success\r\n                  ? result.output || \"Success\"\r\n                  : result.error || \"Error\",\r\n                tool_call_id: toolCall.id,\r\n              });\r\n\r\n              return { toolCall, result, entry: toolResultEntry };\r\n            });\r\n\r\n            const batchResults = await Promise.all(batchPromises);\r\n            if (batchResults.includes(null)) {\r\n              // Cancelled\r\n              yield {\r\n                type: \"content\",\r\n                content: \"\\n\\n[Operation cancelled by user]\",\r\n              };\r\n              yield { type: \"done\" };\r\n              return;\r\n            }\r\n\r\n            // Yield results after batch completes\r\n            for (const { toolCall, result } of batchResults) {\r\n              yield {\r\n                type: \"tool_result\",\r\n                toolCall,\r\n                toolResult: result,\r\n              };\r\n            }\r\n          }\r\n\r\n          // Update token count after processing all tool calls to include tool results\r\n          inputTokens = this.tokenCounter.countMessageTokens(\r\n            this.messages as any\r\n          );\r\n          // Final token update after tools processed\r\n          yield {\r\n            type: \"token_count\",\r\n            tokenCount: inputTokens + totalOutputTokens,\r\n          };\r\n\r\n          // Continue the loop to get the next response (which might have more tool calls)\r\n        } else {\r\n          // No tool calls, we're done\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (toolRounds >= maxToolRounds) {\r\n        yield {\r\n          type: \"content\",\r\n          content:\r\n            \"\\n\\nMaximum tool execution rounds reached. Stopping to prevent infinite loops.\",\r\n        };\r\n      }\r\n\r\n      yield { type: \"done\" };\r\n    } catch (error: any) {\r\n      // Check if this was a cancellation\r\n      if (this.abortController?.signal.aborted) {\r\n        yield {\r\n          type: \"content\",\r\n          content: \"\\n\\n[Operation cancelled by user]\",\r\n        };\r\n        yield { type: \"done\" };\r\n        return;\r\n      }\r\n\r\n      const errorEntry: ChatEntry = {\r\n        type: \"assistant\",\r\n        content: `Sorry, I encountered an error: ${error.message}`,\r\n        timestamp: new Date(),\r\n      };\r\n      this.chatHistory.push(errorEntry);\r\n      yield {\r\n        type: \"content\",\r\n        content: errorEntry.content,\r\n      };\r\n      yield { type: \"done\" };\r\n    } finally {\r\n      // Clean up abort controller\r\n      this.abortController = null;\r\n    }\r\n  }\r\n\r\n  private async executeTool(toolCall: GrokToolCall): Promise<ToolResult> {\r\n    try {\r\n      const args = JSON.parse(toolCall.function.arguments);\r\n\r\n      switch (toolCall.function.name) {\r\n        case \"view_file\":\r\n          try {\r\n            const range: [number, number] | undefined =\r\n              args.start_line && args.end_line\r\n                ? [args.start_line, args.end_line]\r\n                : undefined;\r\n            return await this.textEditor.view(args.path, range);\r\n          } catch (error: any) {\r\n            console.warn(`view_file tool failed, falling back to bash: ${error.message}`);\r\n            // Fallback to bash cat/head/tail\r\n            const path = args.path;\r\n            let command = `cat \"${path}\"`;\r\n            if (args.start_line && args.end_line) {\r\n              command = `sed -n '${args.start_line},${args.end_line}p' \"${path}\"`;\r\n            }\r\n            return await this.bash.execute(command);\r\n          }\r\n\r\n        case \"create_file\":\r\n          try {\r\n            return await this.textEditor.create(args.path, args.content);\r\n          } catch (error: any) {\r\n            console.warn(`create_file tool failed, falling back to bash: ${error.message}`);\r\n            // Fallback to bash echo/redirect\r\n            const command = `cat > \"${args.path}\" << 'EOF'\\n${args.content}\\nEOF`;\r\n            return await this.bash.execute(command);\r\n          }\r\n\r\n        case \"str_replace_editor\":\r\n          try {\r\n            return await this.textEditor.strReplace(\r\n              args.path,\r\n              args.old_str,\r\n              args.new_str,\r\n              args.replace_all\r\n            );\r\n          } catch (error: any) {\r\n            console.warn(`str_replace_editor tool failed, falling back to bash: ${error.message}`);\r\n            // Fallback to bash sed for replacement\r\n            const escapedOld = args.old_str.replace(/[\\/&]/g, '\\\\$&');\r\n            const escapedNew = args.new_str.replace(/[\\/&]/g, '\\\\$&');\r\n            const sedCommand = args.replace_all\r\n              ? `sed -i 's/${escapedOld}/${escapedNew}/g' \"${args.path}\"`\r\n              : `sed -i '0,/${escapedOld}/s/${escapedOld}/${escapedNew}/' \"${args.path}\"`;\r\n            return await this.bash.execute(sedCommand);\r\n          }\r\n\r\n        case \"edit_file\":\r\n          if (!this.morphEditor) {\r\n            return {\r\n              success: false,\r\n              error:\r\n                \"Morph Fast Apply not available. Please set MORPH_API_KEY environment variable to use this feature.\",\r\n            };\r\n          }\r\n          return await this.morphEditor.editFile(\r\n            args.target_file,\r\n            args.instructions,\r\n            args.code_edit\r\n          );\r\n\r\n        case \"bash\":\r\n          return await this.bash.execute(args.command);\r\n\r\n        case \"create_todo_list\":\r\n          return await this.todoTool.createTodoList(args.todos);\r\n\r\n        case \"update_todo_list\":\r\n          return await this.todoTool.updateTodoList(args.updates);\r\n\r\n        case \"search\":\r\n          try {\r\n            return await this.search.search(args.query, {\r\n              searchType: args.search_type,\r\n              includePattern: args.include_pattern,\r\n              excludePattern: args.exclude_pattern,\r\n              caseSensitive: args.case_sensitive,\r\n              wholeWord: args.whole_word,\r\n              regex: args.regex,\r\n              maxResults: args.max_results,\r\n              fileTypes: args.file_types,\r\n              includeHidden: args.include_hidden,\r\n            });\r\n          } catch (error: any) {\r\n            console.warn(`search tool failed, falling back to bash: ${error.message}`);\r\n            // Fallback to bash grep/find\r\n            let command = `grep -r \"${args.query}\" .`;\r\n            if (args.include_pattern) {\r\n              command += ` --include=\"${args.include_pattern}\"`;\r\n            }\r\n            if (args.exclude_pattern) {\r\n              command += ` --exclude=\"${args.exclude_pattern}\"`;\r\n            }\r\n            return await this.bash.execute(command);\r\n          }\r\n\r\n        // Advanced Tools\r\n        case \"multi_file_edit\":\r\n          switch (args.operation) {\r\n            case \"begin_transaction\":\r\n              return await this.multiFileEditor.beginTransaction(args.description);\r\n            case \"add_operations\":\r\n              return await this.multiFileEditor.addOperations(args.operations);\r\n            case \"preview_transaction\":\r\n              return await this.multiFileEditor.previewTransaction();\r\n            case \"commit_transaction\":\r\n              return await this.multiFileEditor.commitTransaction();\r\n            case \"rollback_transaction\":\r\n              return await this.multiFileEditor.rollbackTransaction(args.transaction_id);\r\n            case \"execute_multi_file\":\r\n              return await this.multiFileEditor.executeMultiFileOperation(args.operations, args.description);\r\n            default:\r\n              return { success: false, error: `Unknown multi_file_edit operation: ${args.operation}` };\r\n          }\r\n\r\n        case \"advanced_search\":\r\n          switch (args.operation) {\r\n            case \"search\":\r\n              return await this.advancedSearch.search(args.path, args.options);\r\n            case \"search_replace\":\r\n              return await this.advancedSearch.searchAndReplace(args.path, args.options);\r\n            case \"find_files\":\r\n              return await this.advancedSearch.findFiles(args.path, args.pattern, args.options);\r\n            default:\r\n              return { success: false, error: `Unknown advanced_search operation: ${args.operation}` };\r\n          }\r\n\r\n        case \"file_tree_ops\":\r\n          switch (args.operation) {\r\n            case \"generate_tree\":\r\n              return await this.fileTreeOps.generateTree(args.path, args.options);\r\n            case \"bulk_operations\":\r\n              return await this.fileTreeOps.bulkOperations(args.operations);\r\n            case \"copy_structure\":\r\n              return await this.fileTreeOps.copyStructure(args.source, args.destination, args.options);\r\n            case \"organize_files\":\r\n              return await this.fileTreeOps.organizeFiles(args.source, args.organization_type, args.destination);\r\n            case \"cleanup_empty_dirs\":\r\n              return await this.fileTreeOps.cleanupEmptyDirectories(args.path);\r\n            default:\r\n              return { success: false, error: `Unknown file_tree_ops operation: ${args.operation}` };\r\n          }\r\n\r\n        case \"code_analysis\":\r\n          switch (args.operation) {\r\n            case \"analyze\":\r\n              return await this.codeAwareEditor.analyzeCode(args.file_path);\r\n            case \"refactor\":\r\n              return await this.codeAwareEditor.refactor(args.file_path, args.refactor_operation);\r\n            case \"smart_insert\":\r\n              return await this.codeAwareEditor.smartInsert(args.file_path, args.code, args.location, args.target);\r\n            case \"format_code\":\r\n              return await this.codeAwareEditor.formatCode(args.file_path, args.options);\r\n            case \"add_imports\":\r\n              return await this.codeAwareEditor.addMissingImports(args.file_path, args.symbols);\r\n            default:\r\n              return { success: false, error: `Unknown code_analysis operation: ${args.operation}` };\r\n          }\r\n\r\n        case \"operation_history\":\r\n          switch (args.operation) {\r\n            case \"show_history\":\r\n              return await this.operationHistory.showHistory(args.limit);\r\n            case \"undo\":\r\n              return await this.operationHistory.undo();\r\n            case \"redo\":\r\n              return await this.operationHistory.redo();\r\n            case \"goto_point\":\r\n              return await this.operationHistory.goToHistoryPoint(args.entry_id);\r\n            case \"clear_history\":\r\n              return await this.operationHistory.clearHistory();\r\n            default:\r\n              return { success: false, error: `Unknown operation_history operation: ${args.operation}` };\r\n          }\r\n\r\n        case \"symbol_search\":\r\n          return await this.symbolSearch.execute(args);\r\n\r\n        case \"dependency_analyzer\":\r\n          return await this.dependencyAnalyzer.execute(args);\r\n\r\n        case \"code_context\":\r\n          return await this.codeContext.execute(args);\r\n\r\n        case \"refactoring_assistant\":\r\n          return await this.refactoringAssistant.execute(args);\r\n\r\n        default:\r\n          // Check if this is an MCP tool\r\n          if (toolCall.function.name.startsWith(\"mcp__\")) {\r\n            return await this.executeMCPTool(toolCall);\r\n          }\r\n\r\n          return {\r\n            success: false,\r\n            error: `Unknown tool: ${toolCall.function.name}`,\r\n          };\r\n      }\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Tool execution error: ${error.message}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  private async executeMCPTool(toolCall: GrokToolCall): Promise<ToolResult> {\r\n    try {\r\n      const args = JSON.parse(toolCall.function.arguments);\r\n      const mcpManager = getMCPManager();\r\n\r\n      const result = await mcpManager.callTool(toolCall.function.name, args);\r\n\r\n      if (result.isError) {\r\n        return {\r\n          success: false,\r\n          error: (result.content[0] as any)?.text || \"MCP tool error\",\r\n        };\r\n      }\r\n\r\n      // Extract content from result\r\n      const output = result.content\r\n        .map((item) => {\r\n          if (item.type === \"text\") {\r\n            return item.text;\r\n          } else if (item.type === \"resource\") {\r\n            return `Resource: ${item.resource?.uri || \"Unknown\"}`;\r\n          }\r\n          return String(item);\r\n        })\r\n        .join(\"\\n\");\r\n\r\n      return {\r\n        success: true,\r\n        output: output || \"Success\",\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `MCP tool execution error: ${error.message}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  getChatHistory(): ChatEntry[] {\r\n    return [...this.chatHistory];\r\n  }\r\n\r\n  saveSessionLog(): void {\r\n    try {\r\n      const sessionDir = path.join(require('os').homedir(), '.grok');\r\n      if (!fs.existsSync(sessionDir)) {\r\n        fs.mkdirSync(sessionDir, { recursive: true });\r\n      }\r\n      const sessionFile = path.join(sessionDir, 'session.log');\r\n      const logLines = this.chatHistory.map(entry => JSON.stringify(entry)).join('\\n') + '\\n';\r\n      fs.writeFileSync(sessionFile, logLines);\r\n    } catch (error) {\r\n      // Silently ignore logging errors to not disrupt the app\r\n      console.warn('Failed to save session log:', error);\r\n    }\r\n  }\r\n\r\n  getCurrentDirectory(): string {\r\n    return this.bash.getCurrentDirectory();\r\n  }\r\n\r\n  async executeBashCommand(command: string): Promise<ToolResult> {\r\n    return await this.bash.execute(command);\r\n  }\r\n\r\n  getCurrentModel(): string {\r\n    return this.grokClient.getCurrentModel();\r\n  }\r\n\r\n  setModel(model: string): void {\r\n    this.grokClient.setModel(model);\r\n    // Update token counter for new model\r\n    this.tokenCounter.dispose();\r\n    this.tokenCounter = createTokenCounter(model);\r\n  }\r\n\r\n  abortCurrentOperation(): void {\r\n    if (this.abortController) {\r\n      this.abortController.abort();\r\n    }\r\n  }\r\n\r\n  private logEntry(entry: ChatEntry): void {\r\n    try {\r\n      // Ensure directory exists\r\n      const dir = path.dirname(this.sessionLogPath);\r\n      if (!fs.existsSync(dir)) {\r\n        fs.mkdirSync(dir, { recursive: true });\r\n      }\r\n\r\n      // Log as JSON line\r\n      const logLine = JSON.stringify({\r\n        type: entry.type,\r\n        content: entry.content,\r\n        timestamp: entry.timestamp.toISOString(),\r\n        toolCallId: entry.toolCall?.id,\r\n        toolCallsCount: entry.toolCalls?.length,\r\n      }) + '\\n';\r\n\r\n      fs.appendFileSync(this.sessionLogPath, logLine);\r\n    } catch (error) {\r\n      // Silently ignore logging errors to avoid disrupting the app\r\n      console.warn('Failed to log session entry:', error);\r\n    }\r\n  }\r\n}\r\n","import { exec } from \"child_process\";\r\nimport { promisify } from \"util\";\r\nimport { EventEmitter } from \"events\";\r\n\r\nconst execAsync = promisify(exec);\r\n\r\nexport interface ConfirmationOptions {\r\n  operation: string;\r\n  filename: string;\r\n  showVSCodeOpen?: boolean;\r\n  content?: string; // Content to show in confirmation dialog\r\n}\r\n\r\nexport interface ConfirmationResult {\r\n  confirmed: boolean;\r\n  dontAskAgain?: boolean;\r\n  feedback?: string;\r\n}\r\n\r\nexport class ConfirmationService extends EventEmitter {\r\n  private static instance: ConfirmationService;\r\n  private skipConfirmationThisSession = false;\r\n  private pendingConfirmation: Promise<ConfirmationResult> | null = null;\r\n  private resolveConfirmation: ((result: ConfirmationResult) => void) | null =\r\n    null;\r\n\r\n  // Session flags for different operation types\r\n  private sessionFlags = {\r\n    fileOperations: false,\r\n    bashCommands: false,\r\n    allOperations: false,\r\n  };\r\n\r\n  static getInstance(): ConfirmationService {\r\n    if (!ConfirmationService.instance) {\r\n      ConfirmationService.instance = new ConfirmationService();\r\n    }\r\n    return ConfirmationService.instance;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  async requestConfirmation(\r\n    options: ConfirmationOptions,\r\n    operationType: \"file\" | \"bash\" = \"file\"\r\n  ): Promise<ConfirmationResult> {\r\n    // Check session flags\r\n    if (\r\n      this.sessionFlags.allOperations ||\r\n      (operationType === \"file\" && this.sessionFlags.fileOperations) ||\r\n      (operationType === \"bash\" && this.sessionFlags.bashCommands)\r\n    ) {\r\n      return { confirmed: true };\r\n    }\r\n\r\n    // If VS Code should be opened, try to open it\r\n    if (options.showVSCodeOpen) {\r\n      try {\r\n        await this.openInVSCode(options.filename);\r\n      } catch (error) {\r\n        // If VS Code opening fails, continue without it\r\n        options.showVSCodeOpen = false;\r\n      }\r\n    }\r\n\r\n    // Create a promise that will be resolved by the UI component\r\n    this.pendingConfirmation = new Promise<ConfirmationResult>((resolve) => {\r\n      this.resolveConfirmation = resolve;\r\n    });\r\n\r\n    // Emit custom event that the UI can listen to (using setImmediate to ensure the UI updates)\r\n    setImmediate(() => {\r\n      this.emit(\"confirmation-requested\", options);\r\n    });\r\n\r\n    const result = await this.pendingConfirmation;\r\n\r\n    if (result.dontAskAgain) {\r\n      // Set the appropriate session flag based on operation type\r\n      if (operationType === \"file\") {\r\n        this.sessionFlags.fileOperations = true;\r\n      } else if (operationType === \"bash\") {\r\n        this.sessionFlags.bashCommands = true;\r\n      }\r\n      // Could also set allOperations for global skip\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  confirmOperation(confirmed: boolean, dontAskAgain?: boolean): void {\r\n    if (this.resolveConfirmation) {\r\n      this.resolveConfirmation({ confirmed, dontAskAgain });\r\n      this.resolveConfirmation = null;\r\n      this.pendingConfirmation = null;\r\n    }\r\n  }\r\n\r\n  rejectOperation(feedback?: string): void {\r\n    if (this.resolveConfirmation) {\r\n      this.resolveConfirmation({ confirmed: false, feedback });\r\n      this.resolveConfirmation = null;\r\n      this.pendingConfirmation = null;\r\n    }\r\n  }\r\n\r\n  private async openInVSCode(filename: string): Promise<void> {\r\n    // Try different VS Code commands\r\n    const commands = [\"code\", \"code-insiders\", \"codium\"];\r\n\r\n    for (const cmd of commands) {\r\n      try {\r\n        await execAsync(`which ${cmd}`);\r\n        await execAsync(`${cmd} \"${filename}\"`);\r\n        return;\r\n      } catch (error) {\r\n        // Continue to next command\r\n        continue;\r\n      }\r\n    }\r\n\r\n    throw new Error(\"VS Code not found\");\r\n  }\r\n\r\n  isPending(): boolean {\r\n    return this.pendingConfirmation !== null;\r\n  }\r\n\r\n  resetSession(): void {\r\n    this.sessionFlags = {\r\n      fileOperations: false,\r\n      bashCommands: false,\r\n      allOperations: false,\r\n    };\r\n  }\r\n\r\n  getSessionFlags() {\r\n    return { ...this.sessionFlags };\r\n  }\r\n\r\n  setSessionFlag(\r\n    flagType: \"fileOperations\" | \"bashCommands\" | \"allOperations\",\r\n    value: boolean\r\n  ) {\r\n    this.sessionFlags[flagType] = value;\r\n  }\r\n}\r\n","import { exec } from 'child_process';\r\nimport { promisify } from 'util';\r\nimport { ToolResult } from '../types/index.js';\r\nimport { ConfirmationService } from '../utils/confirmation-service.js';\r\n\r\nconst execAsync = promisify(exec);\r\n\r\nexport class BashTool {\r\n  private currentDirectory: string = process.cwd();\r\n  private confirmationService = ConfirmationService.getInstance();\r\n\r\n\r\n  async execute(command: string, timeout: number = 60000): Promise<ToolResult> {\r\n    try {\r\n      // Check if user has already accepted bash commands for this session\r\n      const sessionFlags = this.confirmationService.getSessionFlags();\r\n      if (!sessionFlags.bashCommands && !sessionFlags.allOperations) {\r\n        // Request confirmation showing the command\r\n        const confirmationResult = await this.confirmationService.requestConfirmation({\r\n          operation: 'Run bash command',\r\n          filename: command,\r\n          showVSCodeOpen: false,\r\n          content: `Command: ${command}\\nWorking directory: ${this.currentDirectory}`\r\n        }, 'bash');\r\n\r\n        if (!confirmationResult.confirmed) {\r\n          return {\r\n            success: false,\r\n            error: confirmationResult.feedback || 'Command execution cancelled by user'\r\n          };\r\n        }\r\n      }\r\n\r\n      if (command.startsWith('cd ')) {\r\n        const newDir = command.substring(3).trim();\r\n        try {\r\n          process.chdir(newDir);\r\n          this.currentDirectory = process.cwd();\r\n          return {\r\n            success: true,\r\n            output: `Changed directory to: ${this.currentDirectory}`\r\n          };\r\n        } catch (error: any) {\r\n          return {\r\n            success: false,\r\n            error: `Cannot change directory: ${error.message}`\r\n          };\r\n        }\r\n      }\r\n\r\n      const { stdout, stderr } = await execAsync(command, {\r\n        cwd: this.currentDirectory,\r\n        timeout,\r\n        maxBuffer: 1024 * 1024 * 10\r\n      });\r\n\r\n      const output = stdout + (stderr ? `\\nSTDERR: ${stderr}` : '');\r\n      \r\n      return {\r\n        success: true,\r\n        output: output.trim() || 'Command executed successfully (no output)'\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Command failed: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  getCurrentDirectory(): string {\r\n    return this.currentDirectory;\r\n  }\r\n\r\n  async listFiles(directory: string = '.'): Promise<ToolResult> {\r\n    return this.execute(`ls -la ${directory}`);\r\n  }\r\n\r\n  async findFiles(pattern: string, directory: string = '.'): Promise<ToolResult> {\r\n    return this.execute(`find ${directory} -name \"${pattern}\" -type f`);\r\n  }\r\n\r\n  async grep(pattern: string, files: string = '.'): Promise<ToolResult> {\r\n    return this.execute(`grep -r \"${pattern}\" ${files}`);\r\n  }\r\n}","import * as ops from \"fs\";\r\n\r\nconst pathExists = async (filePath: string): Promise<boolean> => {\r\n  try {\r\n    await ops.promises.access(filePath, ops.constants.F_OK);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n\r\n\r\nimport * as path from \"path\";\r\nimport { writeFile as writeFilePromise } from \"fs/promises\";\r\n\r\n\r\nimport { ToolResult, EditorCommand } from \"../types/index.js\";\r\nimport { ConfirmationService } from \"../utils/confirmation-service.js\";\r\n\r\nexport class TextEditorTool {\r\n  private editHistory: EditorCommand[] = [];\r\n  private confirmationService = ConfirmationService.getInstance();\r\n\r\n  async view(\r\n    filePath: string,\r\n    viewRange?: [number, number]\r\n  ): Promise<ToolResult> {\r\n    try {\r\n      const resolvedPath = path.resolve(filePath);\r\n\r\n      if (await pathExists(resolvedPath)) {\r\n        const stats = await ops.promises.stat(resolvedPath);\r\n\r\n        if (stats.isDirectory()) {\r\n          const files = await ops.promises.readdir(resolvedPath);\r\n          return {\r\n            success: true,\r\n            output: `Directory contents of ${filePath}:\\n${files.join(\"\\n\")}`,\r\n          };\r\n        }\r\n\r\n        const content = await ops.promises.readFile(resolvedPath, \"utf-8\");\r\n        const lines = content.split(\"\\n\");\r\n\r\n        if (viewRange) {\r\n          const [start, end] = viewRange;\r\n          const selectedLines = lines.slice(start - 1, end);\r\n          const numberedLines = selectedLines\r\n            .map((line, idx) => `${start + idx}: ${line}`)\r\n            .join(\"\\n\");\r\n\r\n          return {\r\n            success: true,\r\n            output: `Lines ${start}-${end} of ${filePath}:\\n${numberedLines}`,\r\n          };\r\n        }\r\n\r\n        const totalLines = lines.length;\r\n        const displayLines = totalLines > 10 ? lines.slice(0, 10) : lines;\r\n        const numberedLines = displayLines\r\n          .map((line, idx) => `${idx + 1}: ${line}`)\r\n          .join(\"\\n\");\r\n        const additionalLinesMessage =\r\n          totalLines > 10 ? `\\n... +${totalLines - 10} lines` : \"\";\r\n\r\n        return {\r\n          success: true,\r\n          output: `Contents of ${filePath}:\\n${numberedLines}${additionalLinesMessage}`,\r\n        };\r\n      } else {\r\n        return {\r\n          success: false,\r\n          error: `File or directory not found: ${filePath}`,\r\n        };\r\n      }\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error viewing ${filePath}: ${error.message}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async strReplace(\r\n    filePath: string,\r\n    oldStr: string,\r\n    newStr: string,\r\n    replaceAll: boolean = false\r\n  ): Promise<ToolResult> {\r\n    try {\r\n      if (oldStr === \"\") {\r\n        return {\r\n          success: false,\r\n          error: \"oldStr cannot be an empty string\",\r\n        };\r\n      }\r\n\r\n      const resolvedPath = path.resolve(filePath);\r\n\r\n      if (!(await pathExists(resolvedPath))) {\r\n        return {\r\n          success: false,\r\n          error: `File not found: ${filePath}`,\r\n        };\r\n      }\r\n\r\n      const content = await ops.promises.readFile(resolvedPath, \"utf-8\");\r\n\r\n      if (!content.includes(oldStr)) {\r\n        if (oldStr.includes('\\n')) {\r\n          const fuzzyResult = this.findFuzzyMatch(content, oldStr);\r\n          if (fuzzyResult) {\r\n            oldStr = fuzzyResult;\r\n          } else {\r\n            return {\r\n              success: false,\r\n              error: `String not found in file. For multi-line replacements, consider using line-based editing.`,\r\n            };\r\n          }\r\n        } else {\r\n          return {\r\n            success: false,\r\n            error: `String not found in file: \"${oldStr}\"`,\r\n          };\r\n        }\r\n      }\r\n\r\n      const occurrences = (content.match(new RegExp(oldStr.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'g')) || []).length;\r\n      \r\n      const sessionFlags = this.confirmationService.getSessionFlags();\r\n      if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n        const previewContent = replaceAll \r\n          ? content.split(oldStr).join(newStr)\r\n          : content.replace(oldStr, newStr);\r\n        const oldLines = content.split(\"\\n\");\r\n        const newLines = previewContent.split(\"\\n\");\r\n        const diffContent = this.generateDiff(oldLines, newLines, filePath);\r\n\r\n        const confirmationResult =\r\n          await this.confirmationService.requestConfirmation(\r\n            {\r\n              operation: `Edit file${replaceAll && occurrences > 1 ? ` (${occurrences} occurrences)` : ''}`,\r\n              filename: filePath,\r\n              showVSCodeOpen: false,\r\n              content: diffContent,\r\n            },\r\n            \"file\"\r\n          );\r\n\r\n        if (!confirmationResult.confirmed) {\r\n          return {\r\n            success: false,\r\n            error: confirmationResult.feedback || \"File edit cancelled by user\",\r\n          };\r\n        }\r\n      }\r\n\r\n      const newContent = replaceAll\r\n        ? content.split(oldStr).join(newStr)\r\n        : content.replace(oldStr, newStr);\r\n      await writeFilePromise(resolvedPath, newContent, \"utf-8\");\r\n\r\n      this.editHistory.push({\r\n        command: \"str_replace\",\r\n        path: filePath,\r\n        old_str: oldStr,\r\n        new_str: newStr,\r\n      });\r\n\r\n      const oldLines = content.split(\"\\n\");\r\n      const newLines = newContent.split(\"\\n\");\r\n      const diff = this.generateDiff(oldLines, newLines, filePath);\r\n\r\n      return {\r\n        success: true,\r\n        output: diff,\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error replacing text in ${filePath}: ${error.message}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async create(filePath: string, content: string): Promise<ToolResult> {\r\n    try {\r\n      const resolvedPath = path.resolve(filePath);\r\n\r\n      if (await pathExists(resolvedPath)) {\r\n        return {\r\n          success: false,\r\n          error: `File already exists: ${filePath}`,\r\n        };\r\n      }\r\n\r\n      // Check if user has already accepted file operations for this session\r\n      const sessionFlags = this.confirmationService.getSessionFlags();\r\n      if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n        // Create a diff-style preview for file creation\r\n        const contentLines = content.split(\"\\n\");\r\n        const diffContent = [\r\n          `Created ${filePath}`,\r\n          `--- /dev/null`,\r\n          `+++ b/${filePath}`,\r\n          `@@ -0,0 +1,${contentLines.length} @@`,\r\n          ...contentLines.map((line) => `+${line}`),\r\n        ].join(\"\\n\");\r\n\r\n        const confirmationResult =\r\n          await this.confirmationService.requestConfirmation(\r\n            {\r\n              operation: \"Write\",\r\n              filename: filePath,\r\n              showVSCodeOpen: false,\r\n              content: diffContent,\r\n            },\r\n            \"file\"\r\n          );\r\n\r\n        if (!confirmationResult.confirmed) {\r\n          return {\r\n            success: false,\r\n            error:\r\n              confirmationResult.feedback || \"File creation cancelled by user\",\r\n          };\r\n        }\r\n      }\r\n\r\n      const dir = path.dirname(resolvedPath);\r\n      await ops.promises.mkdir(dir, { recursive: true });\r\n      await writeFilePromise(resolvedPath, content, \"utf-8\");\r\n\r\n      this.editHistory.push({\r\n        command: \"create\",\r\n        path: filePath,\r\n        content,\r\n      });\r\n\r\n      // Generate diff output using the same method as str_replace\r\n      const oldLines: string[] = []; // Empty for new files\r\n      const newLines = content.split(\"\\n\");\r\n      const diff = this.generateDiff(oldLines, newLines, filePath);\r\n\r\n      return {\r\n        success: true,\r\n        output: diff,\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error creating ${filePath}: ${error.message}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async replaceLines(\r\n    filePath: string,\r\n    startLine: number,\r\n    endLine: number,\r\n    newContent: string\r\n  ): Promise<ToolResult> {\r\n    try {\r\n      const resolvedPath = path.resolve(filePath);\r\n\r\n      if (!(await pathExists(resolvedPath))) {\r\n        return {\r\n          success: false,\r\n          error: `File not found: ${filePath}`,\r\n        };\r\n      }\r\n\r\n      const fileContent = await ops.promises.readFile(resolvedPath, \"utf-8\");\r\n      const lines = fileContent.split(\"\\n\");\r\n      \r\n      if (startLine < 1 || startLine > lines.length) {\r\n        return {\r\n          success: false,\r\n          error: `Invalid start line: ${startLine}. File has ${lines.length} lines.`,\r\n        };\r\n      }\r\n      \r\n      if (endLine < startLine || endLine > lines.length) {\r\n        return {\r\n          success: false,\r\n          error: `Invalid end line: ${endLine}. Must be between ${startLine} and ${lines.length}.`,\r\n        };\r\n      }\r\n\r\n      const sessionFlags = this.confirmationService.getSessionFlags();\r\n      if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n        const newLines = [...lines];\r\n        const replacementLines = newContent.split(\"\\n\");\r\n        newLines.splice(startLine - 1, endLine - startLine + 1, ...replacementLines);\r\n        \r\n        const diffContent = this.generateDiff(lines, newLines, filePath);\r\n\r\n        const confirmationResult =\r\n          await this.confirmationService.requestConfirmation(\r\n            {\r\n              operation: `Replace lines ${startLine}-${endLine}`,\r\n              filename: filePath,\r\n              showVSCodeOpen: false,\r\n              content: diffContent,\r\n            },\r\n            \"file\"\r\n          );\r\n\r\n        if (!confirmationResult.confirmed) {\r\n          return {\r\n            success: false,\r\n            error: confirmationResult.feedback || \"Line replacement cancelled by user\",\r\n          };\r\n        }\r\n      }\r\n\r\n      const replacementLines = newContent.split(\"\\n\");\r\n      lines.splice(startLine - 1, endLine - startLine + 1, ...replacementLines);\r\n      const newFileContent = lines.join(\"\\n\");\r\n\r\n      await writeFilePromise(resolvedPath, newFileContent, \"utf-8\");\r\n\r\n      this.editHistory.push({\r\n        command: \"str_replace\",\r\n        path: filePath,\r\n        old_str: `lines ${startLine}-${endLine}`,\r\n        new_str: newContent,\r\n      });\r\n\r\n      const oldLines = fileContent.split(\"\\n\");\r\n      const diff = this.generateDiff(oldLines, lines, filePath);\r\n\r\n      return {\r\n        success: true,\r\n        output: diff,\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error replacing lines in ${filePath}: ${error.message}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async insert(\r\n    filePath: string,\r\n    insertLine: number,\r\n    content: string\r\n  ): Promise<ToolResult> {\r\n    try {\r\n      const resolvedPath = path.resolve(filePath);\r\n\r\n      if (!(await pathExists(resolvedPath))) {\r\n        return {\r\n          success: false,\r\n          error: `File not found: ${filePath}`,\r\n        };\r\n      }\r\n\r\n      const fileContent = await ops.promises.readFile(resolvedPath, \"utf-8\");\r\n      const lines = fileContent.split(\"\\n\");\r\n\r\n      lines.splice(insertLine - 1, 0, content);\r\n      const newContent = lines.join(\"\\n\");\r\n\r\n      await writeFilePromise(resolvedPath, newContent, \"utf-8\");\r\n\r\n      this.editHistory.push({\r\n        command: \"insert\",\r\n        path: filePath,\r\n        insert_line: insertLine,\r\n        content,\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        output: `Successfully inserted content at line ${insertLine} in ${filePath}`,\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error inserting content in ${filePath}: ${error.message}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async undoEdit(): Promise<ToolResult> {\r\n    if (this.editHistory.length === 0) {\r\n      return {\r\n        success: false,\r\n        error: \"No edits to undo\",\r\n      };\r\n    }\r\n\r\n    const lastEdit = this.editHistory.pop()!;\r\n\r\n    try {\r\n      switch (lastEdit.command) {\r\n        case \"str_replace\":\r\n          if (lastEdit.path && lastEdit.old_str && lastEdit.new_str) {\r\n            const content = await ops.promises.readFile(lastEdit.path, \"utf-8\");\r\n            const revertedContent = content.replace(\r\n              lastEdit.new_str,\r\n              lastEdit.old_str\r\n            );\r\n            await writeFilePromise(lastEdit.path, revertedContent, \"utf-8\");\r\n          }\r\n          break;\r\n\r\n        case \"create\":\r\n          if (lastEdit.path) {\r\n            await ops.promises.rm(lastEdit.path);\r\n          }\r\n          break;\r\n\r\n        case \"insert\":\r\n          if (lastEdit.path && lastEdit.insert_line) {\r\n            const content = await ops.promises.readFile(lastEdit.path, \"utf-8\");\r\n            const lines = content.split(\"\\n\");\r\n            lines.splice(lastEdit.insert_line - 1, 1);\r\n            await writeFilePromise(lastEdit.path, lines.join(\"\\n\"), \"utf-8\");\r\n          }\r\n          break;\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        output: `Successfully undid ${lastEdit.command} operation`,\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error undoing edit: ${error.message}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  private findFuzzyMatch(content: string, searchStr: string): string | null {\r\n    const functionMatch = searchStr.match(/function\\s+(\\w+)/);\r\n    if (!functionMatch) return null;\r\n    \r\n    const functionName = functionMatch[1];\r\n    const contentLines = content.split('\\n');\r\n    \r\n    let functionStart = -1;\r\n    for (let i = 0; i < contentLines.length; i++) {\r\n      if (contentLines[i].includes(`function ${functionName}`) && contentLines[i].includes('{')) {\r\n        functionStart = i;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (functionStart === -1) return null;\r\n    \r\n    let braceCount = 0;\r\n    let functionEnd = functionStart;\r\n    \r\n    for (let i = functionStart; i < contentLines.length; i++) {\r\n      const line = contentLines[i];\r\n      for (const char of line) {\r\n        if (char === '{') braceCount++;\r\n        if (char === '}') braceCount--;\r\n      }\r\n      \r\n      if (braceCount === 0 && i > functionStart) {\r\n        functionEnd = i;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    const actualFunction = contentLines.slice(functionStart, functionEnd + 1).join('\\n');\r\n    \r\n    const searchNormalized = this.normalizeForComparison(searchStr);\r\n    const actualNormalized = this.normalizeForComparison(actualFunction);\r\n    \r\n    if (this.isSimilarStructure(searchNormalized, actualNormalized)) {\r\n      return actualFunction;\r\n    }\r\n    \r\n    return null;\r\n  }\r\n  \r\n  private normalizeForComparison(str: string): string {\r\n    return str\r\n      .replace(/[\"'`]/g, '\"')\r\n      .replace(/\\s+/g, ' ')\r\n      .replace(/{\\s+/g, '{ ')\r\n      .replace(/\\s+}/g, ' }')\r\n      .replace(/;\\s*/g, ';')\r\n      .trim();\r\n  }\r\n  \r\n  private isSimilarStructure(search: string, actual: string): boolean {\r\n    const extractTokens = (str: string) => {\r\n      const tokens = str.match(/\\b(function|console\\.log|return|if|else|for|while)\\b/g) || [];\r\n      return tokens;\r\n    };\r\n    \r\n    const searchTokens = extractTokens(search);\r\n    const actualTokens = extractTokens(actual);\r\n    \r\n    if (searchTokens.length !== actualTokens.length) return false;\r\n    \r\n    for (let i = 0; i < searchTokens.length; i++) {\r\n      if (searchTokens[i] !== actualTokens[i]) return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  private generateDiff(\r\n    oldLines: string[],\r\n    newLines: string[],\r\n    filePath: string\r\n  ): string {\r\n    const CONTEXT_LINES = 3;\r\n    \r\n    const changes: Array<{\r\n      oldStart: number;\r\n      oldEnd: number;\r\n      newStart: number;\r\n      newEnd: number;\r\n    }> = [];\r\n    \r\n    let i = 0, j = 0;\r\n    \r\n    while (i < oldLines.length || j < newLines.length) {\r\n      while (i < oldLines.length && j < newLines.length && oldLines[i] === newLines[j]) {\r\n        i++;\r\n        j++;\r\n      }\r\n      \r\n      if (i < oldLines.length || j < newLines.length) {\r\n        const changeStart = { old: i, new: j };\r\n        \r\n        let oldEnd = i;\r\n        let newEnd = j;\r\n        \r\n        while (oldEnd < oldLines.length || newEnd < newLines.length) {\r\n          let matchFound = false;\r\n          let matchLength = 0;\r\n          \r\n          for (let k = 0; k < Math.min(2, oldLines.length - oldEnd, newLines.length - newEnd); k++) {\r\n            if (oldEnd + k < oldLines.length && \r\n                newEnd + k < newLines.length && \r\n                oldLines[oldEnd + k] === newLines[newEnd + k]) {\r\n              matchLength++;\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n          \r\n          if (matchLength >= 2 || (oldEnd >= oldLines.length && newEnd >= newLines.length)) {\r\n            matchFound = true;\r\n          }\r\n          \r\n          if (matchFound) {\r\n            break;\r\n          }\r\n          \r\n          if (oldEnd < oldLines.length) oldEnd++;\r\n          if (newEnd < newLines.length) newEnd++;\r\n        }\r\n        \r\n        changes.push({\r\n          oldStart: changeStart.old,\r\n          oldEnd: oldEnd,\r\n          newStart: changeStart.new,\r\n          newEnd: newEnd\r\n        });\r\n        \r\n        i = oldEnd;\r\n        j = newEnd;\r\n      }\r\n    }\r\n    \r\n    const hunks: Array<{\r\n      oldStart: number;\r\n      oldCount: number;\r\n      newStart: number;\r\n      newCount: number;\r\n      lines: Array<{ type: '+' | '-' | ' '; content: string }>;\r\n    }> = [];\r\n    \r\n    let accumulatedOffset = 0;\r\n    \r\n    for (let changeIdx = 0; changeIdx < changes.length; changeIdx++) {\r\n      const change = changes[changeIdx];\r\n      \r\n      let contextStart = Math.max(0, change.oldStart - CONTEXT_LINES);\r\n      let contextEnd = Math.min(oldLines.length, change.oldEnd + CONTEXT_LINES);\r\n      \r\n      if (hunks.length > 0) {\r\n        const lastHunk = hunks[hunks.length - 1];\r\n        const lastHunkEnd = lastHunk.oldStart + lastHunk.oldCount;\r\n        \r\n        if (lastHunkEnd >= contextStart) {\r\n          const oldHunkEnd = lastHunk.oldStart + lastHunk.oldCount;\r\n          const newContextEnd = Math.min(oldLines.length, change.oldEnd + CONTEXT_LINES);\r\n          \r\n          for (let idx = oldHunkEnd; idx < change.oldStart; idx++) {\r\n            lastHunk.lines.push({ type: ' ', content: oldLines[idx] });\r\n          }\r\n          \r\n          for (let idx = change.oldStart; idx < change.oldEnd; idx++) {\r\n            lastHunk.lines.push({ type: '-', content: oldLines[idx] });\r\n          }\r\n          for (let idx = change.newStart; idx < change.newEnd; idx++) {\r\n            lastHunk.lines.push({ type: '+', content: newLines[idx] });\r\n          }\r\n          \r\n          for (let idx = change.oldEnd; idx < newContextEnd && idx < oldLines.length; idx++) {\r\n            lastHunk.lines.push({ type: ' ', content: oldLines[idx] });\r\n          }\r\n          \r\n          lastHunk.oldCount = newContextEnd - lastHunk.oldStart;\r\n          lastHunk.newCount = lastHunk.oldCount + (change.newEnd - change.newStart) - (change.oldEnd - change.oldStart);\r\n          \r\n          continue;\r\n        }\r\n      }\r\n      \r\n      const hunk: typeof hunks[0] = {\r\n        oldStart: contextStart + 1,\r\n        oldCount: contextEnd - contextStart,\r\n        newStart: contextStart + 1 + accumulatedOffset,\r\n        newCount: contextEnd - contextStart + (change.newEnd - change.newStart) - (change.oldEnd - change.oldStart),\r\n        lines: []\r\n      };\r\n      \r\n      for (let idx = contextStart; idx < change.oldStart; idx++) {\r\n        hunk.lines.push({ type: ' ', content: oldLines[idx] });\r\n      }\r\n      \r\n      for (let idx = change.oldStart; idx < change.oldEnd; idx++) {\r\n        hunk.lines.push({ type: '-', content: oldLines[idx] });\r\n      }\r\n      \r\n      for (let idx = change.newStart; idx < change.newEnd; idx++) {\r\n        hunk.lines.push({ type: '+', content: newLines[idx] });\r\n      }\r\n      \r\n      for (let idx = change.oldEnd; idx < contextEnd && idx < oldLines.length; idx++) {\r\n        hunk.lines.push({ type: ' ', content: oldLines[idx] });\r\n      }\r\n      \r\n      hunks.push(hunk);\r\n      \r\n      accumulatedOffset += (change.newEnd - change.newStart) - (change.oldEnd - change.oldStart);\r\n    }\r\n    \r\n    let addedLines = 0;\r\n    let removedLines = 0;\r\n    \r\n    for (const hunk of hunks) {\r\n      for (const line of hunk.lines) {\r\n        if (line.type === '+') addedLines++;\r\n        if (line.type === '-') removedLines++;\r\n      }\r\n    }\r\n    \r\n    let summary = `Updated ${filePath}`;\r\n    if (addedLines > 0 && removedLines > 0) {\r\n      summary += ` with ${addedLines} addition${\r\n        addedLines !== 1 ? \"s\" : \"\"\r\n      } and ${removedLines} removal${removedLines !== 1 ? \"s\" : \"\"}`;\r\n    } else if (addedLines > 0) {\r\n      summary += ` with ${addedLines} addition${addedLines !== 1 ? \"s\" : \"\"}`;\r\n    } else if (removedLines > 0) {\r\n      summary += ` with ${removedLines} removal${\r\n        removedLines !== 1 ? \"s\" : \"\"\r\n      }`;\r\n    } else if (changes.length === 0) {\r\n      return `No changes in ${filePath}`;\r\n    }\r\n    \r\n    let diff = summary + \"\\n\";\r\n    diff += `--- a/${filePath}\\n`;\r\n    diff += `+++ b/${filePath}\\n`;\r\n    \r\n    for (const hunk of hunks) {\r\n      diff += `@@ -${hunk.oldStart},${hunk.oldCount} +${hunk.newStart},${hunk.newCount} @@\\n`;\r\n      \r\n      for (const line of hunk.lines) {\r\n        diff += `${line.type}${line.content}\\n`;\r\n      }\r\n    }\r\n    \r\n    return diff.trim();\r\n  }\r\n\r\n  getEditHistory(): EditorCommand[] {\r\n    return [...this.editHistory];\r\n  }\r\n}\r\n","import * as ops from \"fs\";\r\n\r\nconst pathExists = async (filePath: string): Promise<boolean> => {\r\n  try {\r\n    await ops.promises.access(filePath, ops.constants.F_OK);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n\r\n\r\nimport * as path from \"path\";\r\nimport axios from \"axios\";\r\nimport { ToolResult } from \"../types/index.js\";\r\nimport { ConfirmationService } from \"../utils/confirmation-service.js\";\r\n\r\nexport class MorphEditorTool {\r\n  private confirmationService = ConfirmationService.getInstance();\r\n  private morphApiKey: string;\r\n  private morphBaseUrl: string = \"https://api.morphllm.com/v1\";\r\n\r\n  constructor(apiKey?: string) {\r\n    this.morphApiKey = apiKey || process.env.MORPH_API_KEY || \"\";\r\n    if (!this.morphApiKey) {\r\n      console.warn(\"MORPH_API_KEY not found. Morph editor functionality will be limited.\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use this tool to make an edit to an existing file.\r\n   * \r\n   * This will be read by a less intelligent model, which will quickly apply the edit. You should make it clear what the edit is, while also minimizing the unchanged code you write.\r\n   * When writing the edit, you should specify each edit in sequence, with the special comment // ... existing code ... to represent unchanged code in between edited lines.\r\n   * \r\n   * For example:\r\n   * \r\n   * // ... existing code ...\r\n   * FIRST_EDIT\r\n   * // ... existing code ...\r\n   * SECOND_EDIT\r\n   * // ... existing code ...\r\n   * THIRD_EDIT\r\n   * // ... existing code ...\r\n   * \r\n   * You should still bias towards repeating as few lines of the original file as possible to convey the change.\r\n   * But, each edit should contain sufficient context of unchanged lines around the code you're editing to resolve ambiguity.\r\n   * DO NOT omit spans of pre-existing code (or comments) without using the // ... existing code ... comment to indicate its absence. If you omit the existing code comment, the model may inadvertently delete these lines.\r\n   * If you plan on deleting a section, you must provide context before and after to delete it. If the initial code is ```code \\n Block 1 \\n Block 2 \\n Block 3 \\n code```, and you want to remove Block 2, you would output ```// ... existing code ... \\n Block 1 \\n  Block 3 \\n // ... existing code ...```.\r\n   * Make sure it is clear what the edit should be, and where it should be applied.\r\n   * Make edits to a file in a single edit_file call instead of multiple edit_file calls to the same file. The apply model can handle many distinct edits at once.\r\n   */\r\n  async editFile(\r\n    targetFile: string,\r\n    instructions: string,\r\n    codeEdit: string\r\n  ): Promise<ToolResult> {\r\n    try {\r\n      const resolvedPath = path.resolve(targetFile);\r\n\r\n      if (!(await pathExists(resolvedPath))) {\r\n        return {\r\n          success: false,\r\n          error: `File not found: ${targetFile}`,\r\n        };\r\n      }\r\n\r\n      if (!this.morphApiKey) {\r\n        return {\r\n          success: false,\r\n          error: \"MORPH_API_KEY not configured. Please set your Morph API key.\",\r\n        };\r\n      }\r\n\r\n      // Read the initial code\r\n      const initialCode = await ops.promises.readFile(resolvedPath, \"utf-8\");\r\n\r\n      // Check user confirmation before proceeding\r\n      const sessionFlags = this.confirmationService.getSessionFlags();\r\n      if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n        const confirmationResult = await this.confirmationService.requestConfirmation(\r\n          {\r\n            operation: \"Edit file with Morph Fast Apply\",\r\n            filename: targetFile,\r\n            showVSCodeOpen: false,\r\n            content: `Instructions: ${instructions}\\n\\nEdit:\\n${codeEdit}`,\r\n          },\r\n          \"file\"\r\n        );\r\n\r\n        if (!confirmationResult.confirmed) {\r\n          return {\r\n            success: false,\r\n            error: confirmationResult.feedback || \"File edit cancelled by user\",\r\n          };\r\n        }\r\n      }\r\n\r\n      // Call Morph Fast Apply API\r\n      const mergedCode = await this.callMorphApply(instructions, initialCode, codeEdit);\r\n\r\n      // Write the merged code back to file\r\n      await ops.promises.writeFile(resolvedPath, mergedCode, \"utf-8\");\r\n\r\n      // Generate diff for display\r\n      const oldLines = initialCode.split(\"\\n\");\r\n      const newLines = mergedCode.split(\"\\n\");\r\n      const diff = this.generateDiff(oldLines, newLines, targetFile);\r\n\r\n      return {\r\n        success: true,\r\n        output: diff,\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error editing ${targetFile} with Morph: ${error.message}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  private async callMorphApply(\r\n    instructions: string,\r\n    initialCode: string,\r\n    editSnippet: string\r\n  ): Promise<string> {\r\n    try {\r\n      const response = await axios.post(`${this.morphBaseUrl}/chat/completions`, {\r\n        model: \"morph-v3-large\",\r\n        messages: [\r\n          {\r\n            role: \"user\",\r\n            content: `<instruction>${instructions}</instruction>\\n<code>${initialCode}</code>\\n<update>${editSnippet}</update>`,\r\n          },\r\n        ],\r\n      }, {\r\n        headers: {\r\n          \"Authorization\": `Bearer ${this.morphApiKey}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      if (!response.data.choices || !response.data.choices[0] || !response.data.choices[0].message) {\r\n        throw new Error(\"Invalid response format from Morph API\");\r\n      }\r\n\r\n      return response.data.choices[0].message.content;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(`Morph API error (${error.response.status}): ${error.response.data}`);\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private generateDiff(\r\n    oldLines: string[],\r\n    newLines: string[],\r\n    filePath: string\r\n  ): string {\r\n    const CONTEXT_LINES = 3;\r\n    \r\n    const changes: Array<{\r\n      oldStart: number;\r\n      oldEnd: number;\r\n      newStart: number;\r\n      newEnd: number;\r\n    }> = [];\r\n    \r\n    let i = 0, j = 0;\r\n    \r\n    while (i < oldLines.length || j < newLines.length) {\r\n      while (i < oldLines.length && j < newLines.length && oldLines[i] === newLines[j]) {\r\n        i++;\r\n        j++;\r\n      }\r\n      \r\n      if (i < oldLines.length || j < newLines.length) {\r\n        const changeStart = { old: i, new: j };\r\n        \r\n        let oldEnd = i;\r\n        let newEnd = j;\r\n        \r\n        while (oldEnd < oldLines.length || newEnd < newLines.length) {\r\n          let matchFound = false;\r\n          let matchLength = 0;\r\n          \r\n          for (let k = 0; k < Math.min(2, oldLines.length - oldEnd, newLines.length - newEnd); k++) {\r\n            if (oldEnd + k < oldLines.length && \r\n                newEnd + k < newLines.length && \r\n                oldLines[oldEnd + k] === newLines[newEnd + k]) {\r\n              matchLength++;\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n          \r\n          if (matchLength >= 2 || (oldEnd >= oldLines.length && newEnd >= newLines.length)) {\r\n            matchFound = true;\r\n          }\r\n          \r\n          if (matchFound) {\r\n            break;\r\n          }\r\n          \r\n          if (oldEnd < oldLines.length) oldEnd++;\r\n          if (newEnd < newLines.length) newEnd++;\r\n        }\r\n        \r\n        changes.push({\r\n          oldStart: changeStart.old,\r\n          oldEnd: oldEnd,\r\n          newStart: changeStart.new,\r\n          newEnd: newEnd\r\n        });\r\n        \r\n        i = oldEnd;\r\n        j = newEnd;\r\n      }\r\n    }\r\n    \r\n    const hunks: Array<{\r\n      oldStart: number;\r\n      oldCount: number;\r\n      newStart: number;\r\n      newCount: number;\r\n      lines: Array<{ type: '+' | '-' | ' '; content: string }>;\r\n    }> = [];\r\n    \r\n    let accumulatedOffset = 0;\r\n    \r\n    for (let changeIdx = 0; changeIdx < changes.length; changeIdx++) {\r\n      const change = changes[changeIdx];\r\n      \r\n      let contextStart = Math.max(0, change.oldStart - CONTEXT_LINES);\r\n      let contextEnd = Math.min(oldLines.length, change.oldEnd + CONTEXT_LINES);\r\n      \r\n      if (hunks.length > 0) {\r\n        const lastHunk = hunks[hunks.length - 1];\r\n        const lastHunkEnd = lastHunk.oldStart + lastHunk.oldCount;\r\n        \r\n        if (lastHunkEnd >= contextStart) {\r\n          const oldHunkEnd = lastHunk.oldStart + lastHunk.oldCount;\r\n          const newContextEnd = Math.min(oldLines.length, change.oldEnd + CONTEXT_LINES);\r\n          \r\n          for (let idx = oldHunkEnd; idx < change.oldStart; idx++) {\r\n            lastHunk.lines.push({ type: ' ', content: oldLines[idx] });\r\n          }\r\n          \r\n          for (let idx = change.oldStart; idx < change.oldEnd; idx++) {\r\n            lastHunk.lines.push({ type: '-', content: oldLines[idx] });\r\n          }\r\n          for (let idx = change.newStart; idx < change.newEnd; idx++) {\r\n            lastHunk.lines.push({ type: '+', content: newLines[idx] });\r\n          }\r\n          \r\n          for (let idx = change.oldEnd; idx < newContextEnd && idx < oldLines.length; idx++) {\r\n            lastHunk.lines.push({ type: ' ', content: oldLines[idx] });\r\n          }\r\n          \r\n          lastHunk.oldCount = newContextEnd - lastHunk.oldStart;\r\n          lastHunk.newCount = lastHunk.oldCount + (change.newEnd - change.newStart) - (change.oldEnd - change.oldStart);\r\n          \r\n          continue;\r\n        }\r\n      }\r\n      \r\n      const hunk: typeof hunks[0] = {\r\n        oldStart: contextStart + 1,\r\n        oldCount: contextEnd - contextStart,\r\n        newStart: contextStart + 1 + accumulatedOffset,\r\n        newCount: contextEnd - contextStart + (change.newEnd - change.newStart) - (change.oldEnd - change.oldStart),\r\n        lines: []\r\n      };\r\n      \r\n      for (let idx = contextStart; idx < change.oldStart; idx++) {\r\n        hunk.lines.push({ type: ' ', content: oldLines[idx] });\r\n      }\r\n      \r\n      for (let idx = change.oldStart; idx < change.oldEnd; idx++) {\r\n        hunk.lines.push({ type: '-', content: oldLines[idx] });\r\n      }\r\n      \r\n      for (let idx = change.newStart; idx < change.newEnd; idx++) {\r\n        hunk.lines.push({ type: '+', content: newLines[idx] });\r\n      }\r\n      \r\n      for (let idx = change.oldEnd; idx < contextEnd && idx < oldLines.length; idx++) {\r\n        hunk.lines.push({ type: ' ', content: oldLines[idx] });\r\n      }\r\n      \r\n      hunks.push(hunk);\r\n      \r\n      accumulatedOffset += (change.newEnd - change.newStart) - (change.oldEnd - change.oldStart);\r\n    }\r\n    \r\n    let addedLines = 0;\r\n    let removedLines = 0;\r\n    \r\n    for (const hunk of hunks) {\r\n      for (const line of hunk.lines) {\r\n        if (line.type === '+') addedLines++;\r\n        if (line.type === '-') removedLines++;\r\n      }\r\n    }\r\n    \r\n    let summary = `Updated ${filePath} with Morph Fast Apply`;\r\n    if (addedLines > 0 && removedLines > 0) {\r\n      summary += ` - ${addedLines} addition${\r\n        addedLines !== 1 ? \"s\" : \"\"\r\n      } and ${removedLines} removal${removedLines !== 1 ? \"s\" : \"\"}`;\r\n    } else if (addedLines > 0) {\r\n      summary += ` - ${addedLines} addition${addedLines !== 1 ? \"s\" : \"\"}`;\r\n    } else if (removedLines > 0) {\r\n      summary += ` - ${removedLines} removal${\r\n        removedLines !== 1 ? \"s\" : \"\"\r\n      }`;\r\n    } else if (changes.length === 0) {\r\n      return `No changes applied to ${filePath}`;\r\n    }\r\n    \r\n    let diff = summary + \"\\n\";\r\n    diff += `--- a/${filePath}\\n`;\r\n    diff += `+++ b/${filePath}\\n`;\r\n    \r\n    for (const hunk of hunks) {\r\n      diff += `@@ -${hunk.oldStart},${hunk.oldCount} +${hunk.newStart},${hunk.newCount} @@\\n`;\r\n      \r\n      for (const line of hunk.lines) {\r\n        diff += `${line.type}${line.content}\\n`;\r\n      }\r\n    }\r\n    \r\n    return diff.trim();\r\n  }\r\n\r\n  async view(\r\n    filePath: string,\r\n    viewRange?: [number, number]\r\n  ): Promise<ToolResult> {\r\n    try {\r\n      const resolvedPath = path.resolve(filePath);\r\n\r\n      if (await pathExists(resolvedPath)) {\r\n        const stats = await ops.promises.stat(resolvedPath);\r\n\r\n        if (stats.isDirectory()) {\r\n          const files = await ops.promises.readdir(resolvedPath);\r\n          return {\r\n            success: true,\r\n            output: `Directory contents of ${filePath}:\\n${files.join(\"\\n\")}`,\r\n          };\r\n        }\r\n\r\n        const content = await ops.promises.readFile(resolvedPath, \"utf-8\");\r\n        const lines = content.split(\"\\n\");\r\n\r\n        if (viewRange) {\r\n          const [start, end] = viewRange;\r\n          const selectedLines = lines.slice(start - 1, end);\r\n          const numberedLines = selectedLines\r\n            .map((line, idx) => `${start + idx}: ${line}`)\r\n            .join(\"\\n\");\r\n\r\n          return {\r\n            success: true,\r\n            output: `Lines ${start}-${end} of ${filePath}:\\n${numberedLines}`,\r\n          };\r\n        }\r\n\r\n        const totalLines = lines.length;\r\n        const displayLines = totalLines > 10 ? lines.slice(0, 10) : lines;\r\n        const numberedLines = displayLines\r\n          .map((line, idx) => `${idx + 1}: ${line}`)\r\n          .join(\"\\n\");\r\n        const additionalLinesMessage =\r\n          totalLines > 10 ? `\\n... +${totalLines - 10} lines` : \"\";\r\n\r\n        return {\r\n          success: true,\r\n          output: `Contents of ${filePath}:\\n${numberedLines}${additionalLinesMessage}`,\r\n        };\r\n      } else {\r\n        return {\r\n          success: false,\r\n          error: `File or directory not found: ${filePath}`,\r\n        };\r\n      }\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error viewing ${filePath}: ${error.message}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  setApiKey(apiKey: string): void {\r\n    this.morphApiKey = apiKey;\r\n  }\r\n\r\n  getApiKey(): string {\r\n    return this.morphApiKey;\r\n  }\r\n}","import { ToolResult } from '../types/index.js';\r\n\r\ninterface TodoItem {\r\n  id: string;\r\n  content: string;\r\n  status: 'pending' | 'in_progress' | 'completed';\r\n  priority: 'high' | 'medium' | 'low';\r\n}\r\n\r\nexport class TodoTool {\r\n  private todos: TodoItem[] = [];\r\n\r\n  formatTodoList(): string {\r\n    if (this.todos.length === 0) {\r\n      return 'No todos created yet';\r\n    }\r\n\r\n    const getCheckbox = (status: string): string => {\r\n      switch (status) {\r\n        case 'completed':\r\n          return '●';\r\n        case 'in_progress':\r\n          return '◐';\r\n        case 'pending':\r\n          return '○';\r\n        default:\r\n          return '○';\r\n      }\r\n    };\r\n\r\n    const getStatusColor = (status: string): string => {\r\n      switch (status) {\r\n        case 'completed':\r\n          return '\\x1b[32m'; // Green\r\n        case 'in_progress':\r\n          return '\\x1b[36m'; // Cyan\r\n        case 'pending':\r\n          return '\\x1b[37m'; // White/default\r\n        default:\r\n          return '\\x1b[0m'; // Reset\r\n      }\r\n    };\r\n\r\n    const reset = '\\x1b[0m';\r\n    let output = '';\r\n\r\n    this.todos.forEach((todo, index) => {\r\n      const checkbox = getCheckbox(todo.status);\r\n      const statusColor = getStatusColor(todo.status);\r\n      const strikethrough = todo.status === 'completed' ? '\\x1b[9m' : '';\r\n      const indent = index === 0 ? '' : '  ';\r\n      \r\n      output += `${indent}${statusColor}${strikethrough}${checkbox} ${todo.content}${reset}\\n`;\r\n    });\r\n\r\n    return output;\r\n  }\r\n\r\n  async createTodoList(todos: TodoItem[]): Promise<ToolResult> {\r\n    try {\r\n      // Validate todos\r\n      for (const todo of todos) {\r\n        if (!todo.id || !todo.content || !todo.status || !todo.priority) {\r\n          return {\r\n            success: false,\r\n            error: 'Each todo must have id, content, status, and priority fields'\r\n          };\r\n        }\r\n\r\n        if (!['pending', 'in_progress', 'completed'].includes(todo.status)) {\r\n          return {\r\n            success: false,\r\n            error: `Invalid status: ${todo.status}. Must be pending, in_progress, or completed`\r\n          };\r\n        }\r\n\r\n        if (!['high', 'medium', 'low'].includes(todo.priority)) {\r\n          return {\r\n            success: false,\r\n            error: `Invalid priority: ${todo.priority}. Must be high, medium, or low`\r\n          };\r\n        }\r\n      }\r\n\r\n      this.todos = todos;\r\n      \r\n      return {\r\n        success: true,\r\n        output: this.formatTodoList()\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: `Error creating todo list: ${error instanceof Error ? error.message : String(error)}`\r\n      };\r\n    }\r\n  }\r\n\r\n  async updateTodoList(updates: { id: string; status?: string; content?: string; priority?: string }[]): Promise<ToolResult> {\r\n    try {\r\n      const updatedIds: string[] = [];\r\n\r\n      for (const update of updates) {\r\n        const todoIndex = this.todos.findIndex(t => t.id === update.id);\r\n        \r\n        if (todoIndex === -1) {\r\n          return {\r\n            success: false,\r\n            error: `Todo with id ${update.id} not found`\r\n          };\r\n        }\r\n\r\n        const todo = this.todos[todoIndex];\r\n\r\n        if (update.status && !['pending', 'in_progress', 'completed'].includes(update.status)) {\r\n          return {\r\n            success: false,\r\n            error: `Invalid status: ${update.status}. Must be pending, in_progress, or completed`\r\n          };\r\n        }\r\n\r\n        if (update.priority && !['high', 'medium', 'low'].includes(update.priority)) {\r\n          return {\r\n            success: false,\r\n            error: `Invalid priority: ${update.priority}. Must be high, medium, or low`\r\n          };\r\n        }\r\n\r\n        if (update.status) todo.status = update.status as any;\r\n        if (update.content) todo.content = update.content;\r\n        if (update.priority) todo.priority = update.priority as any;\r\n\r\n        updatedIds.push(update.id);\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        output: this.formatTodoList()\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: `Error updating todo list: ${error instanceof Error ? error.message : String(error)}`\r\n      };\r\n    }\r\n  }\r\n\r\n  async viewTodoList(): Promise<ToolResult> {\r\n    return {\r\n      success: true,\r\n      output: this.formatTodoList()\r\n    };\r\n  }\r\n}","import { ToolResult } from '../types/index.js';\r\nimport { ConfirmationService, ConfirmationOptions } from '../utils/confirmation-service.js';\r\n\r\nexport interface ConfirmationRequest {\r\n  operation: string;\r\n  filename: string;\r\n  description?: string;\r\n  showVSCodeOpen?: boolean;\r\n  autoAccept?: boolean;\r\n}\r\n\r\nexport class ConfirmationTool {\r\n  private confirmationService: ConfirmationService;\r\n\r\n  constructor() {\r\n    this.confirmationService = ConfirmationService.getInstance();\r\n  }\r\n\r\n  async requestConfirmation(request: ConfirmationRequest): Promise<ToolResult> {\r\n    try {\r\n      // If autoAccept is true, skip the confirmation dialog\r\n      if (request.autoAccept) {\r\n        return {\r\n          success: true,\r\n          output: `Auto-accepted: ${request.operation}(${request.filename})${request.description ? ` - ${request.description}` : ''}`\r\n        };\r\n      }\r\n\r\n      const options: ConfirmationOptions = {\r\n        operation: request.operation,\r\n        filename: request.filename,\r\n        showVSCodeOpen: request.showVSCodeOpen || false\r\n      };\r\n\r\n      // Determine operation type based on operation name\r\n      const operationType = request.operation.toLowerCase().includes('bash') ? 'bash' : 'file';\r\n      const result = await this.confirmationService.requestConfirmation(options, operationType);\r\n\r\n      if (result.confirmed) {\r\n        return {\r\n          success: true,\r\n          output: `User confirmed: ${request.operation}(${request.filename})${request.description ? ` - ${request.description}` : ''}${result.dontAskAgain ? ' (Don\\'t ask again enabled)' : ''}`\r\n        };\r\n      } else {\r\n        return {\r\n          success: false,\r\n          error: result.feedback || `User rejected: ${request.operation}(${request.filename})`\r\n        };\r\n      }\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Confirmation error: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  async checkSessionAcceptance(): Promise<ToolResult> {\r\n    try {\r\n      const sessionFlags = this.confirmationService.getSessionFlags();\r\n      // Return structured data without JSON output to avoid displaying raw JSON\r\n      return {\r\n        success: true,\r\n        data: {\r\n          fileOperationsAccepted: sessionFlags.fileOperations,\r\n          bashCommandsAccepted: sessionFlags.bashCommands,\r\n          allOperationsAccepted: sessionFlags.allOperations,\r\n          hasAnyAcceptance: sessionFlags.fileOperations || sessionFlags.bashCommands || sessionFlags.allOperations\r\n        }\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error checking session acceptance: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  resetSession(): void {\r\n    this.confirmationService.resetSession();\r\n  }\r\n\r\n  isPending(): boolean {\r\n    return this.confirmationService.isPending();\r\n  }\r\n}","import { spawn, execSync } from \"child_process\";\r\nimport { ToolResult } from \"../types/index.js\";\r\nimport { ConfirmationService } from \"../utils/confirmation-service.js\";\r\nimport * as ops from \"fs\";\r\n\r\nconst pathExists = async (filePath: string): Promise<boolean> => {\r\n  try {\r\n    await ops.promises.access(filePath, ops.constants.F_OK);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n\r\n\r\nimport * as path from \"path\";\r\n\r\nexport interface SearchResult {\r\n  file: string;\r\n  line: number;\r\n  column: number;\r\n  text: string;\r\n  match: string;\r\n}\r\n\r\nexport interface FileSearchResult {\r\n  path: string;\r\n  name: string;\r\n  score: number;\r\n}\r\n\r\nexport interface UnifiedSearchResult {\r\n  type: \"text\" | \"file\";\r\n  file: string;\r\n  line?: number;\r\n  column?: number;\r\n  text?: string;\r\n  match?: string;\r\n  score?: number;\r\n}\r\n\r\nexport class SearchTool {\r\n  private confirmationService = ConfirmationService.getInstance();\r\n  private currentDirectory: string = process.cwd();\r\n\r\n  /**\r\n   * Unified search method that can search for text content or find files\r\n   */\r\n  async search(\r\n    query: string,\r\n    options: {\r\n      searchType?: \"text\" | \"files\" | \"both\";\r\n      includePattern?: string;\r\n      excludePattern?: string;\r\n      caseSensitive?: boolean;\r\n      wholeWord?: boolean;\r\n      regex?: boolean;\r\n      maxResults?: number;\r\n      fileTypes?: string[];\r\n      excludeFiles?: string[];\r\n      includeHidden?: boolean;\r\n    } = {}\r\n  ): Promise<ToolResult> {\r\n    try {\r\n      const searchType = options.searchType || \"both\";\r\n      const results: UnifiedSearchResult[] = [];\r\n\r\n      // Search for text content if requested\r\n      if (searchType === \"text\" || searchType === \"both\") {\r\n        const textResults = await this.executeRipgrep(query, options);\r\n        results.push(\r\n          ...textResults.map((r) => ({\r\n            type: \"text\" as const,\r\n            file: r.file,\r\n            line: r.line,\r\n            column: r.column,\r\n            text: r.text,\r\n            match: r.match,\r\n          }))\r\n        );\r\n      }\r\n\r\n      // Search for files if requested\r\n      if (searchType === \"files\" || searchType === \"both\") {\r\n        const fileResults = await this.findFilesByPattern(query, options);\r\n        results.push(\r\n          ...fileResults.map((r) => ({\r\n            type: \"file\" as const,\r\n            file: r.path,\r\n            score: r.score,\r\n          }))\r\n        );\r\n      }\r\n\r\n      if (results.length === 0) {\r\n        return {\r\n          success: true,\r\n          output: `No results found for \"${query}\"`,\r\n        };\r\n      }\r\n\r\n      const formattedOutput = this.formatUnifiedResults(\r\n        results,\r\n        query,\r\n        searchType\r\n      );\r\n\r\n      return {\r\n        success: true,\r\n        output: formattedOutput,\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Search error: ${error.message}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute ripgrep command with specified options\r\n   */\r\n  private async executeRipgrep(\r\n    query: string,\r\n    options: {\r\n      includePattern?: string;\r\n      excludePattern?: string;\r\n      caseSensitive?: boolean;\r\n      wholeWord?: boolean;\r\n      regex?: boolean;\r\n      maxResults?: number;\r\n      fileTypes?: string[];\r\n      excludeFiles?: string[];\r\n    }\r\n  ): Promise<SearchResult[]> {\r\n    return new Promise((resolve, reject) => {\r\n      // Check if ripgrep is installed\r\n      try {\r\n        execSync('which rg', { stdio: 'ignore' });\r\n      } catch {\r\n        reject(new Error('ripgrep is not installed. Please install it to use text search. Visit https://github.com/BurntSushi/ripgrep#installation'));\r\n        return;\r\n      }\r\n\r\n      // If ripgrep is available, proceed with search\r\n        const args = [\r\n        \"--json\",\r\n        \"--with-filename\",\r\n        \"--line-number\",\r\n        \"--column\",\r\n        \"--no-heading\",\r\n        \"--color=never\",\r\n      ];\r\n\r\n      // Add case sensitivity\r\n      if (!options.caseSensitive) {\r\n        args.push(\"--ignore-case\");\r\n      }\r\n\r\n      // Add whole word matching\r\n      if (options.wholeWord) {\r\n        args.push(\"--word-regexp\");\r\n      }\r\n\r\n      // Add regex mode\r\n      if (!options.regex) {\r\n        args.push(\"--fixed-strings\");\r\n      }\r\n\r\n      // Add max results limit\r\n      if (options.maxResults) {\r\n        args.push(\"--max-count\", options.maxResults.toString());\r\n      }\r\n\r\n      // Add file type filters\r\n      if (options.fileTypes) {\r\n        options.fileTypes.forEach((type) => {\r\n          args.push(\"--type\", type);\r\n        });\r\n      }\r\n\r\n      // Add include pattern\r\n      if (options.includePattern) {\r\n        args.push(\"--glob\", options.includePattern);\r\n      }\r\n\r\n      // Add exclude pattern\r\n      if (options.excludePattern) {\r\n        args.push(\"--glob\", `!${options.excludePattern}`);\r\n      }\r\n\r\n      // Add exclude files\r\n      if (options.excludeFiles) {\r\n        options.excludeFiles.forEach((file) => {\r\n          args.push(\"--glob\", `!${file}`);\r\n        });\r\n      }\r\n\r\n      // Respect gitignore and common ignore patterns\r\n      args.push(\r\n        \"--no-require-git\",\r\n        \"--follow\",\r\n        \"--glob\",\r\n        \"!.git/**\",\r\n        \"--glob\",\r\n        \"!node_modules/**\",\r\n        \"--glob\",\r\n        \"!.DS_Store\",\r\n        \"--glob\",\r\n        \"!*.log\"\r\n      );\r\n\r\n      // Add query and search directory\r\n      args.push(query, this.currentDirectory);\r\n\r\n      const rg = spawn(\"rg\", args);\r\n      let output = \"\";\r\n      let errorOutput = \"\";\r\n\r\n      rg.stdout.on(\"data\", (data) => {\r\n        output += data.toString();\r\n      });\r\n\r\n      rg.stderr.on(\"data\", (data) => {\r\n        errorOutput += data.toString();\r\n      });\r\n\r\n      rg.on(\"close\", (code) => {\r\n        if (code === 0 || code === 1) {\r\n          // 0 = found, 1 = not found\r\n          const results = this.parseRipgrepOutput(output);\r\n          resolve(results);\r\n        } else {\r\n          reject(new Error(`Ripgrep failed with code ${code}: ${errorOutput}`));\r\n        }\r\n      });\r\n\r\n      rg.on(\"error\", (error) => {\r\n        reject(error);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Parse ripgrep JSON output into SearchResult objects\r\n   */\r\n  private parseRipgrepOutput(output: string): SearchResult[] {\r\n    const results: SearchResult[] = [];\r\n    const lines = output\r\n      .trim()\r\n      .split(\"\\n\")\r\n      .filter((line) => line.length > 0);\r\n\r\n    for (const line of lines) {\r\n      try {\r\n        const parsed = JSON.parse(line);\r\n        if (parsed.type === \"match\") {\r\n          const data = parsed.data;\r\n          results.push({\r\n            file: data.path.text,\r\n            line: data.line_number,\r\n            column: data.submatches[0]?.start || 0,\r\n            text: data.lines.text.trim(),\r\n            match: data.submatches[0]?.match?.text || \"\",\r\n          });\r\n        }\r\n      } catch (e) {\r\n        // Skip invalid JSON lines\r\n        continue;\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Find files by pattern using a simple file walking approach\r\n   */\r\n  private async findFilesByPattern(\r\n    pattern: string,\r\n    options: {\r\n      maxResults?: number;\r\n      includeHidden?: boolean;\r\n      excludePattern?: string;\r\n    }\r\n  ): Promise<FileSearchResult[]> {\r\n    const files: FileSearchResult[] = [];\r\n    const maxResults = options.maxResults || 50;\r\n    const searchPattern = pattern.toLowerCase();\r\n\r\n    const walkDir = async (dir: string, depth: number = 0): Promise<void> => {\r\n      if (depth > 10 || files.length >= maxResults) return; // Prevent infinite recursion and limit results\r\n\r\n      try {\r\n        const entries = await ops.promises.readdir(dir, { withFileTypes: true });\r\n\r\n        for (const entry of entries) {\r\n          if (files.length >= maxResults) break;\r\n\r\n          const fullPath = path.join(dir, entry.name);\r\n          const relativePath = path.relative(this.currentDirectory, fullPath);\r\n\r\n          // Skip hidden files unless explicitly included\r\n          if (!options.includeHidden && entry.name.startsWith(\".\")) {\r\n            continue;\r\n          }\r\n\r\n          // Skip common directories\r\n          if (\r\n            entry.isDirectory() &&\r\n            [\r\n              \"node_modules\",\r\n              \".git\",\r\n              \".svn\",\r\n              \".hg\",\r\n              \"dist\",\r\n              \"build\",\r\n              \".next\",\r\n              \".cache\",\r\n            ].includes(entry.name)\r\n          ) {\r\n            continue;\r\n          }\r\n\r\n          // Apply exclude pattern\r\n          if (\r\n            options.excludePattern &&\r\n            relativePath.includes(options.excludePattern)\r\n          ) {\r\n            continue;\r\n          }\r\n\r\n          if (entry.isFile()) {\r\n            const score = this.calculateFileScore(\r\n              entry.name,\r\n              relativePath,\r\n              searchPattern\r\n            );\r\n            if (score > 0) {\r\n              files.push({\r\n                path: relativePath,\r\n                name: entry.name,\r\n                score,\r\n              });\r\n            }\r\n          } else if (entry.isDirectory()) {\r\n            await walkDir(fullPath, depth + 1);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // Skip directories we can't read\r\n      }\r\n    };\r\n\r\n    await walkDir(this.currentDirectory);\r\n\r\n    // Sort by score (descending) and return top results\r\n    return files.sort((a, b) => b.score - a.score).slice(0, maxResults);\r\n  }\r\n\r\n  /**\r\n   * Calculate fuzzy match score for file names\r\n   */\r\n  private calculateFileScore(\r\n    fileName: string,\r\n    filePath: string,\r\n    pattern: string\r\n  ): number {\r\n    const lowerFileName = fileName.toLowerCase();\r\n    const lowerFilePath = filePath.toLowerCase();\r\n\r\n    // Exact matches get highest score\r\n    if (lowerFileName === pattern) return 100;\r\n    if (lowerFileName.includes(pattern)) return 80;\r\n\r\n    // Path matches get medium score\r\n    if (lowerFilePath.includes(pattern)) return 60;\r\n\r\n    // Fuzzy matching - check if all characters of pattern exist in order\r\n    let patternIndex = 0;\r\n    for (\r\n      let i = 0;\r\n      i < lowerFileName.length && patternIndex < pattern.length;\r\n      i++\r\n    ) {\r\n      if (lowerFileName[i] === pattern[patternIndex]) {\r\n        patternIndex++;\r\n      }\r\n    }\r\n\r\n    if (patternIndex === pattern.length) {\r\n      // All characters found in order - score based on how close they are\r\n      return Math.max(10, 40 - (fileName.length - pattern.length));\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Format unified search results for display\r\n   */\r\n  private formatUnifiedResults(\r\n    results: UnifiedSearchResult[],\r\n    query: string,\r\n    searchType: string\r\n  ): string {\r\n    if (results.length === 0) {\r\n      return `No results found for \"${query}\"`;\r\n    }\r\n\r\n    let output = `Search results for \"${query}\":\\n`;\r\n\r\n    // Separate text and file results\r\n    const textResults = results.filter((r) => r.type === \"text\");\r\n    const fileResults = results.filter((r) => r.type === \"file\");\r\n\r\n    // Show all unique files (from both text matches and file matches)\r\n    const allFiles = new Set<string>();\r\n\r\n    // Add files from text results\r\n    textResults.forEach((result) => {\r\n      allFiles.add(result.file);\r\n    });\r\n\r\n    // Add files from file search results\r\n    fileResults.forEach((result) => {\r\n      allFiles.add(result.file);\r\n    });\r\n\r\n    const fileList = Array.from(allFiles);\r\n    const displayLimit = 8;\r\n\r\n    // Show files in compact format\r\n    fileList.slice(0, displayLimit).forEach((file) => {\r\n      // Count matches in this file for text results\r\n      const matchCount = textResults.filter((r) => r.file === file).length;\r\n      const matchIndicator = matchCount > 0 ? ` (${matchCount} matches)` : \"\";\r\n      output += `  ${file}${matchIndicator}\\n`;\r\n    });\r\n\r\n    // Show \"+X more\" if there are additional results\r\n    if (fileList.length > displayLimit) {\r\n      const remaining = fileList.length - displayLimit;\r\n      output += `  ... +${remaining} more\\n`;\r\n    }\r\n\r\n    return output.trim();\r\n  }\r\n\r\n  /**\r\n   * Update current working directory\r\n   */\r\n  setCurrentDirectory(directory: string): void {\r\n    this.currentDirectory = directory;\r\n  }\r\n\r\n  /**\r\n   * Get current working directory\r\n   */\r\n  getCurrentDirectory(): string {\r\n    return this.currentDirectory;\r\n  }\r\n}\r\n","import * as ops from \"fs-extra\";\r\n\r\nconst pathExists = async (filePath: string): Promise<boolean> => {\r\n  try {\r\n    await ops.promises.access(filePath, ops.constants.F_OK);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n\r\n\r\nimport * as path from \"path\";\r\nimport { writeFile as writeFilePromise } from \"fs/promises\";\r\nimport { ToolResult } from \"../../types/index.js\";\r\nimport { ConfirmationService } from \"../../utils/confirmation-service.js\";\r\n\r\nexport interface FileOperation {\r\n  type: 'create' | 'edit' | 'delete' | 'rename' | 'move';\r\n  filePath: string;\r\n  content?: string;\r\n  oldContent?: string;\r\n  newFilePath?: string; // For rename/move operations\r\n  operations?: EditOperation[]; // For complex edits\r\n}\r\n\r\nexport interface EditOperation {\r\n  type: 'replace' | 'insert' | 'delete_lines';\r\n  oldStr?: string;\r\n  newStr?: string;\r\n  startLine?: number;\r\n  endLine?: number;\r\n  content?: string;\r\n}\r\n\r\nexport interface MultiFileTransaction {\r\n  id: string;\r\n  timestamp: Date;\r\n  operations: FileOperation[];\r\n  committed: boolean;\r\n  rollbackData?: any[];\r\n}\r\n\r\nexport class MultiFileEditorTool {\r\n  private confirmationService = ConfirmationService.getInstance();\r\n  private transactions: Map<string, MultiFileTransaction> = new Map();\r\n  private currentTransactionId: string | null = null;\r\n\r\n  /**\r\n   * Begin a multi-file transaction\r\n   */\r\n  async beginTransaction(description?: string): Promise<ToolResult> {\r\n    try {\r\n      const transactionId = `tx_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n      \r\n      const transaction: MultiFileTransaction = {\r\n        id: transactionId,\r\n        timestamp: new Date(),\r\n        operations: [],\r\n        committed: false,\r\n        rollbackData: []\r\n      };\r\n\r\n      this.transactions.set(transactionId, transaction);\r\n      this.currentTransactionId = transactionId;\r\n\r\n      return {\r\n        success: true,\r\n        output: `Transaction ${transactionId} started${description ? `: ${description}` : ''}`\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error starting transaction: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add file operations to current transaction\r\n   */\r\n  async addOperations(operations: FileOperation[]): Promise<ToolResult> {\r\n    try {\r\n      if (!this.currentTransactionId) {\r\n        return {\r\n          success: false,\r\n          error: \"No active transaction. Use beginTransaction() first.\"\r\n        };\r\n      }\r\n\r\n      const transaction = this.transactions.get(this.currentTransactionId);\r\n      if (!transaction) {\r\n        return {\r\n          success: false,\r\n          error: \"Transaction not found\"\r\n        };\r\n      }\r\n\r\n      // Validate operations\r\n      for (const op of operations) {\r\n        const validation = await this.validateOperation(op);\r\n        if (!validation.valid) {\r\n          return {\r\n            success: false,\r\n            error: `Invalid operation on ${op.filePath}: ${validation.error}`\r\n          };\r\n        }\r\n      }\r\n\r\n      transaction.operations.push(...operations);\r\n\r\n      return {\r\n        success: true,\r\n        output: `Added ${operations.length} operations to transaction ${this.currentTransactionId}`\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error adding operations: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preview changes without committing\r\n   */\r\n  async previewTransaction(): Promise<ToolResult> {\r\n    try {\r\n      if (!this.currentTransactionId) {\r\n        return {\r\n          success: false,\r\n          error: \"No active transaction\"\r\n        };\r\n      }\r\n\r\n      const transaction = this.transactions.get(this.currentTransactionId);\r\n      if (!transaction) {\r\n        return {\r\n          success: false,\r\n          error: \"Transaction not found\"\r\n        };\r\n      }\r\n\r\n      let preview = `Transaction ${this.currentTransactionId} Preview:\\n`;\r\n      preview += `Operations: ${transaction.operations.length}\\n\\n`;\r\n\r\n      for (const [index, op] of transaction.operations.entries()) {\r\n        preview += `${index + 1}. ${op.type.toUpperCase()}: ${op.filePath}\\n`;\r\n        \r\n        switch (op.type) {\r\n          case 'create':\r\n            preview += `   → Create new file with ${op.content?.split('\\n').length || 0} lines\\n`;\r\n            break;\r\n          case 'edit':\r\n            if (op.operations) {\r\n              preview += `   → ${op.operations.length} edit operation(s)\\n`;\r\n              for (const editOp of op.operations) {\r\n                preview += `     - ${editOp.type}\\n`;\r\n              }\r\n            }\r\n            break;\r\n          case 'delete':\r\n            preview += `   → Delete file\\n`;\r\n            break;\r\n          case 'rename':\r\n            preview += `   → Rename to ${op.newFilePath}\\n`;\r\n            break;\r\n          case 'move':\r\n            preview += `   → Move to ${op.newFilePath}\\n`;\r\n            break;\r\n        }\r\n        preview += '\\n';\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        output: preview\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error previewing transaction: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Commit the current transaction\r\n   */\r\n  async commitTransaction(): Promise<ToolResult> {\r\n    try {\r\n      if (!this.currentTransactionId) {\r\n        return {\r\n          success: false,\r\n          error: \"No active transaction\"\r\n        };\r\n      }\r\n\r\n      const transaction = this.transactions.get(this.currentTransactionId);\r\n      if (!transaction) {\r\n        return {\r\n          success: false,\r\n          error: \"Transaction not found\"\r\n        };\r\n      }\r\n\r\n      if (transaction.committed) {\r\n        return {\r\n          success: false,\r\n          error: \"Transaction already committed\"\r\n        };\r\n      }\r\n\r\n      // Request confirmation for the entire transaction\r\n      const sessionFlags = this.confirmationService.getSessionFlags();\r\n      if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n        const preview = await this.previewTransaction();\r\n        const confirmationResult = await this.confirmationService.requestConfirmation(\r\n          {\r\n            operation: `Multi-file transaction (${transaction.operations.length} operations)`,\r\n            filename: transaction.operations.map(op => op.filePath).join(', '),\r\n            showVSCodeOpen: false,\r\n            content: preview.output || 'Multi-file transaction'\r\n          },\r\n          \"file\"\r\n        );\r\n\r\n        if (!confirmationResult.confirmed) {\r\n          return {\r\n            success: false,\r\n            error: confirmationResult.feedback || \"Transaction cancelled by user\"\r\n          };\r\n        }\r\n      }\r\n\r\n      // Store rollback data before making changes\r\n      const rollbackData: any[] = [];\r\n\r\n      // Execute operations\r\n      const results: string[] = [];\r\n      \r\n      for (const [index, op] of transaction.operations.entries()) {\r\n        try {\r\n          const rollbackInfo = await this.createRollbackInfo(op);\r\n          rollbackData.push(rollbackInfo);\r\n\r\n          const result = await this.executeOperation(op);\r\n          if (!result.success) {\r\n            // Rollback already executed operations\r\n            await this.rollbackOperations(rollbackData.slice(0, index));\r\n            return {\r\n              success: false,\r\n              error: `Operation ${index + 1} failed: ${result.error}`\r\n            };\r\n          }\r\n          results.push(`✓ ${op.type}: ${op.filePath}`);\r\n        } catch (error: any) {\r\n          // Rollback already executed operations\r\n          await this.rollbackOperations(rollbackData.slice(0, index));\r\n          return {\r\n            success: false,\r\n            error: `Operation ${index + 1} failed: ${error.message}`\r\n          };\r\n        }\r\n      }\r\n\r\n      transaction.committed = true;\r\n      transaction.rollbackData = rollbackData;\r\n      this.currentTransactionId = null;\r\n\r\n      return {\r\n        success: true,\r\n        output: `Transaction ${transaction.id} committed successfully:\\n${results.join('\\n')}`\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error committing transaction: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rollback the current or specified transaction\r\n   */\r\n  async rollbackTransaction(transactionId?: string): Promise<ToolResult> {\r\n    try {\r\n      const txId = transactionId || this.currentTransactionId;\r\n      if (!txId) {\r\n        return {\r\n          success: false,\r\n          error: \"No transaction specified\"\r\n        };\r\n      }\r\n\r\n      const transaction = this.transactions.get(txId);\r\n      if (!transaction) {\r\n        return {\r\n          success: false,\r\n          error: \"Transaction not found\"\r\n        };\r\n      }\r\n\r\n      if (!transaction.committed) {\r\n        // Just cancel the transaction\r\n        this.transactions.delete(txId);\r\n        if (this.currentTransactionId === txId) {\r\n          this.currentTransactionId = null;\r\n        }\r\n        return {\r\n          success: true,\r\n          output: `Transaction ${txId} cancelled`\r\n        };\r\n      }\r\n\r\n      if (!transaction.rollbackData) {\r\n        return {\r\n          success: false,\r\n          error: \"No rollback data available for this transaction\"\r\n        };\r\n      }\r\n\r\n      await this.rollbackOperations(transaction.rollbackData);\r\n\r\n      this.transactions.delete(txId);\r\n\r\n      return {\r\n        success: true,\r\n        output: `Transaction ${txId} rolled back successfully`\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error rolling back transaction: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute multiple file operations atomically\r\n   */\r\n  async executeMultiFileOperation(operations: FileOperation[], description?: string): Promise<ToolResult> {\r\n    try {\r\n      // Start transaction\r\n      const beginResult = await this.beginTransaction(description);\r\n      if (!beginResult.success) {\r\n        return beginResult;\r\n      }\r\n\r\n      // Add operations\r\n      const addResult = await this.addOperations(operations);\r\n      if (!addResult.success) {\r\n        await this.rollbackTransaction();\r\n        return addResult;\r\n      }\r\n\r\n      // Commit transaction\r\n      return await this.commitTransaction();\r\n    } catch (error: any) {\r\n      if (this.currentTransactionId) {\r\n        await this.rollbackTransaction();\r\n      }\r\n      return {\r\n        success: false,\r\n        error: `Error executing multi-file operation: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate an operation before execution\r\n   */\r\n  private async validateOperation(operation: FileOperation): Promise<{ valid: boolean; error?: string }> {\r\n    try {\r\n      const resolvedPath = path.resolve(operation.filePath);\r\n\r\n      switch (operation.type) {\r\n        case 'create':\r\n          if (await pathExists(resolvedPath)) {\r\n            return { valid: false, error: \"File already exists\" };\r\n          }\r\n          if (!operation.content) {\r\n            return { valid: false, error: \"Content required for create operation\" };\r\n          }\r\n          break;\r\n\r\n        case 'edit':\r\n          if (!(await pathExists(resolvedPath))) {\r\n            return { valid: false, error: \"File does not exist\" };\r\n          }\r\n          if (!operation.operations || operation.operations.length === 0) {\r\n            return { valid: false, error: \"Edit operations required\" };\r\n          }\r\n          break;\r\n\r\n        case 'delete':\r\n          if (!(await pathExists(resolvedPath))) {\r\n            return { valid: false, error: \"File does not exist\" };\r\n          }\r\n          break;\r\n\r\n        case 'rename':\r\n        case 'move':\r\n          if (!(await pathExists(resolvedPath))) {\r\n            return { valid: false, error: \"Source file does not exist\" };\r\n          }\r\n          if (!operation.newFilePath) {\r\n            return { valid: false, error: \"Destination path required\" };\r\n          }\r\n          const newResolvedPath = path.resolve(operation.newFilePath);\r\n          if (await pathExists(newResolvedPath)) {\r\n            return { valid: false, error: \"Destination already exists\" };\r\n          }\r\n          break;\r\n      }\r\n\r\n      return { valid: true };\r\n    } catch (error: any) {\r\n      return { valid: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create rollback information for an operation\r\n   */\r\n  private async createRollbackInfo(operation: FileOperation): Promise<any> {\r\n    const resolvedPath = path.resolve(operation.filePath);\r\n\r\n    switch (operation.type) {\r\n      case 'create':\r\n        return {\r\n          type: 'delete_created',\r\n          filePath: operation.filePath\r\n        };\r\n\r\n      case 'edit':\r\n        const originalContent = await ops.promises.readFile(resolvedPath, 'utf-8');\r\n        return {\r\n          type: 'restore_content',\r\n          filePath: operation.filePath,\r\n          originalContent\r\n        };\r\n\r\n      case 'delete':\r\n        const contentToRestore = await ops.promises.readFile(resolvedPath, 'utf-8');\r\n        const stats = await ops.promises.stat(resolvedPath);\r\n        return {\r\n          type: 'restore_deleted',\r\n          filePath: operation.filePath,\r\n          content: contentToRestore,\r\n          stats\r\n        };\r\n\r\n      case 'rename':\r\n      case 'move':\r\n        return {\r\n          type: 'restore_move',\r\n          oldPath: operation.filePath,\r\n          newPath: operation.newFilePath\r\n        };\r\n\r\n      default:\r\n        throw new Error(`Unknown operation type: ${operation.type}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute a single operation\r\n   */\r\n  private async executeOperation(operation: FileOperation): Promise<ToolResult> {\r\n    const resolvedPath = path.resolve(operation.filePath);\r\n\r\n    switch (operation.type) {\r\n      case 'create':\r\n        const dir = path.dirname(resolvedPath);\r\n        await ops.promises.mkdir(dir, { recursive: true });\r\n        await writeFilePromise(resolvedPath, operation.content!, 'utf-8');\r\n        return { success: true, output: `Created ${operation.filePath}` };\r\n\r\n      case 'edit':\r\n        let content = await ops.promises.readFile(resolvedPath, 'utf-8');\r\n        \r\n        for (const editOp of operation.operations!) {\r\n          content = await this.applyEditOperation(content, editOp);\r\n        }\r\n        \r\n        await writeFilePromise(resolvedPath, content, 'utf-8');\r\n        return { success: true, output: `Edited ${operation.filePath}` };\r\n\r\n      case 'delete':\r\n        await ops.promises.rm(resolvedPath);\r\n        return { success: true, output: `Deleted ${operation.filePath}` };\r\n\r\n      case 'rename':\r\n      case 'move':\r\n        const newResolvedPath = path.resolve(operation.newFilePath!);\r\n        const newDir = path.dirname(newResolvedPath);\r\n        await ops.promises.mkdir(newDir, { recursive: true });\r\n        await ops.move(resolvedPath, newResolvedPath);\r\n        return { success: true, output: `${operation.type === 'rename' ? 'Renamed' : 'Moved'} ${operation.filePath} to ${operation.newFilePath}` };\r\n\r\n      default:\r\n        throw new Error(`Unknown operation type: ${operation.type}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply an edit operation to content\r\n   */\r\n  private async applyEditOperation(content: string, operation: EditOperation): Promise<string> {\r\n    switch (operation.type) {\r\n      case 'replace':\r\n        if (!operation.oldStr || operation.newStr === undefined) {\r\n          throw new Error('oldStr and newStr required for replace operation');\r\n        }\r\n        return content.replace(operation.oldStr, operation.newStr);\r\n\r\n      case 'insert':\r\n        if (operation.startLine === undefined || !operation.content) {\r\n          throw new Error('startLine and content required for insert operation');\r\n        }\r\n        const lines = content.split('\\n');\r\n        lines.splice(operation.startLine - 1, 0, operation.content);\r\n        return lines.join('\\n');\r\n\r\n      case 'delete_lines':\r\n        if (operation.startLine === undefined || operation.endLine === undefined) {\r\n          throw new Error('startLine and endLine required for delete_lines operation');\r\n        }\r\n        const contentLines = content.split('\\n');\r\n        contentLines.splice(operation.startLine - 1, operation.endLine - operation.startLine + 1);\r\n        return contentLines.join('\\n');\r\n\r\n      default:\r\n        throw new Error(`Unknown edit operation type: ${operation.type}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rollback operations using rollback data\r\n   */\r\n  private async rollbackOperations(rollbackData: any[]): Promise<void> {\r\n    // Rollback in reverse order\r\n    for (let i = rollbackData.length - 1; i >= 0; i--) {\r\n      const rollback = rollbackData[i];\r\n      \r\n      switch (rollback.type) {\r\n        case 'delete_created':\r\n          const createdPath = path.resolve(rollback.filePath);\r\n          if (await pathExists(createdPath)) {\r\n            await ops.promises.rm(createdPath);\r\n          }\r\n          break;\r\n\r\n        case 'restore_content':\r\n          const editedPath = path.resolve(rollback.filePath);\r\n          await writeFilePromise(editedPath, rollback.originalContent, 'utf-8');\r\n          break;\r\n\r\n        case 'restore_deleted':\r\n          const deletedPath = path.resolve(rollback.filePath);\r\n          const deletedDir = path.dirname(deletedPath);\r\n          await ops.promises.mkdir(deletedDir, { recursive: true });\r\n          await writeFilePromise(deletedPath, rollback.content, 'utf-8');\r\n          break;\r\n\r\n        case 'restore_move':\r\n          const movedNewPath = path.resolve(rollback.newPath);\r\n          const movedOldPath = path.resolve(rollback.oldPath);\r\n          if (await pathExists(movedNewPath)) {\r\n            const oldDir = path.dirname(movedOldPath);\r\n            await ops.promises.mkdir(oldDir, { recursive: true });\r\n            await ops.move(movedNewPath, movedOldPath);\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * List all transactions\r\n   */\r\n  async listTransactions(): Promise<ToolResult> {\r\n    try {\r\n      if (this.transactions.size === 0) {\r\n        return {\r\n          success: true,\r\n          output: \"No transactions found\"\r\n        };\r\n      }\r\n\r\n      let output = \"Transactions:\\n\";\r\n      for (const [id, tx] of this.transactions) {\r\n        output += `${id}: ${tx.committed ? 'COMMITTED' : 'PENDING'} (${tx.operations.length} operations) - ${tx.timestamp.toISOString()}\\n`;\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        output: output.trim()\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error listing transactions: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current transaction status\r\n   */\r\n  getCurrentTransactionId(): string | null {\r\n    return this.currentTransactionId;\r\n  }\r\n}","import * as ops from \"fs\";\r\n\r\nconst pathExists = async (filePath: string): Promise<boolean> => {\r\n  try {\r\n    await ops.promises.access(filePath, ops.constants.F_OK);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n\r\n\r\nimport * as path from \"path\";\r\nimport { ToolResult } from \"../../types/index.js\";\r\nimport { ConfirmationService } from \"../../utils/confirmation-service.js\";\r\n\r\nexport interface SearchOptions {\r\n  pattern: string;\r\n  isRegex?: boolean;\r\n  caseSensitive?: boolean;\r\n  wholeWord?: boolean;\r\n  includeFiles?: string[]; // glob patterns\r\n  excludeFiles?: string[]; // glob patterns\r\n  maxResults?: number;\r\n  showContext?: number; // lines of context\r\n}\r\n\r\nexport interface ReplaceOptions extends SearchOptions {\r\n  replacement: string;\r\n  dryRun?: boolean;\r\n}\r\n\r\nexport interface SearchResult {\r\n  filePath: string;\r\n  matches: SearchMatch[];\r\n  totalMatches: number;\r\n}\r\n\r\nexport interface SearchMatch {\r\n  line: number;\r\n  column: number;\r\n  text: string;\r\n  beforeContext?: string[];\r\n  afterContext?: string[];\r\n  matchedText: string;\r\n}\r\n\r\nexport interface ReplaceResult {\r\n  filePath: string;\r\n  replacements: number;\r\n  preview?: string;\r\n  success: boolean;\r\n  error?: string;\r\n}\r\n\r\nexport class AdvancedSearchTool {\r\n  private confirmationService = ConfirmationService.getInstance();\r\n\r\n  /**\r\n   * Search for patterns across files\r\n   */\r\n  async search(searchPath: string, options: SearchOptions): Promise<ToolResult> {\r\n    try {\r\n      const resolvedPath = path.resolve(searchPath);\r\n      \r\n      if (!(await pathExists(resolvedPath))) {\r\n        return {\r\n          success: false,\r\n          error: `Path not found: ${searchPath}`\r\n        };\r\n      }\r\n\r\n      const stats = await ops.promises.stat(resolvedPath);\r\n      const filesToSearch: string[] = [];\r\n\r\n      if (stats.isFile()) {\r\n        filesToSearch.push(resolvedPath);\r\n      } else if (stats.isDirectory()) {\r\n        const files = await this.getFilesRecursively(resolvedPath, options);\r\n        filesToSearch.push(...files);\r\n      }\r\n\r\n      const results: SearchResult[] = [];\r\n      let totalMatches = 0;\r\n\r\n      for (const filePath of filesToSearch) {\r\n        if (options.maxResults && totalMatches >= options.maxResults) {\r\n          break;\r\n        }\r\n\r\n        const fileResult = await this.searchInFile(filePath, options);\r\n        if (fileResult.matches.length > 0) {\r\n          results.push(fileResult);\r\n          totalMatches += fileResult.totalMatches;\r\n        }\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        output: this.formatSearchResults(results, options)\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Search error: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search and replace patterns across files\r\n   */\r\n  async searchAndReplace(searchPath: string, options: ReplaceOptions): Promise<ToolResult> {\r\n    try {\r\n      const resolvedPath = path.resolve(searchPath);\r\n      \r\n      if (!(await pathExists(resolvedPath))) {\r\n        return {\r\n          success: false,\r\n          error: `Path not found: ${searchPath}`\r\n        };\r\n      }\r\n\r\n      const stats = await ops.promises.stat(resolvedPath);\r\n      const filesToProcess: string[] = [];\r\n\r\n      if (stats.isFile()) {\r\n        filesToProcess.push(resolvedPath);\r\n      } else if (stats.isDirectory()) {\r\n        const files = await this.getFilesRecursively(resolvedPath, options);\r\n        filesToProcess.push(...files);\r\n      }\r\n\r\n      const results: ReplaceResult[] = [];\r\n      let totalReplacements = 0;\r\n\r\n      // First pass: find all matches and prepare replacements\r\n      for (const filePath of filesToProcess) {\r\n        const replaceResult = await this.replaceInFile(filePath, options);\r\n        if (replaceResult.replacements > 0) {\r\n          results.push(replaceResult);\r\n          totalReplacements += replaceResult.replacements;\r\n        }\r\n      }\r\n\r\n      if (totalReplacements === 0) {\r\n        return {\r\n          success: true,\r\n          output: \"No matches found for replacement\"\r\n        };\r\n      }\r\n\r\n      // Show preview and request confirmation if not in dry run mode\r\n      if (!options.dryRun) {\r\n        const sessionFlags = this.confirmationService.getSessionFlags();\r\n        if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n          const preview = this.formatReplaceResults(results, true);\r\n          const confirmationResult = await this.confirmationService.requestConfirmation(\r\n            {\r\n              operation: `Replace in ${results.length} file(s) (${totalReplacements} replacements)`,\r\n              filename: results.map(r => r.filePath).join(', '),\r\n              showVSCodeOpen: false,\r\n              content: preview\r\n            },\r\n            \"file\"\r\n          );\r\n\r\n          if (!confirmationResult.confirmed) {\r\n            return {\r\n              success: false,\r\n              error: confirmationResult.feedback || \"Replace operation cancelled by user\"\r\n            };\r\n          }\r\n        }\r\n\r\n        // Actually perform replacements\r\n        for (const result of results) {\r\n          if (result.success && result.preview) {\r\n            await ops.promises.writeFile(result.filePath, result.preview, 'utf-8');\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        output: this.formatReplaceResults(results, options.dryRun || false)\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Replace error: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find files matching pattern\r\n   */\r\n  async findFiles(searchPath: string, pattern: string, options: { isRegex?: boolean; maxResults?: number } = {}): Promise<ToolResult> {\r\n    try {\r\n      const resolvedPath = path.resolve(searchPath);\r\n      \r\n      if (!(await pathExists(resolvedPath))) {\r\n        return {\r\n          success: false,\r\n          error: `Path not found: ${searchPath}`\r\n        };\r\n      }\r\n\r\n      const allFiles = await this.getFilesRecursively(resolvedPath);\r\n      const matchingFiles: string[] = [];\r\n\r\n      const regex = options.isRegex ? new RegExp(pattern, 'i') : null;\r\n\r\n      for (const filePath of allFiles) {\r\n        if (options.maxResults && matchingFiles.length >= options.maxResults) {\r\n          break;\r\n        }\r\n\r\n        const fileName = path.basename(filePath);\r\n        const relativePath = path.relative(resolvedPath, filePath);\r\n\r\n        let matches = false;\r\n        if (regex) {\r\n          matches = regex.test(fileName) || regex.test(relativePath);\r\n        } else {\r\n          matches = fileName.toLowerCase().includes(pattern.toLowerCase()) ||\r\n                   relativePath.toLowerCase().includes(pattern.toLowerCase());\r\n        }\r\n\r\n        if (matches) {\r\n          matchingFiles.push(relativePath);\r\n        }\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        output: matchingFiles.length > 0 \r\n          ? `Found ${matchingFiles.length} files:\\n${matchingFiles.join('\\n')}`\r\n          : 'No matching files found'\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `File search error: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search in a single file\r\n   */\r\n  private async searchInFile(filePath: string, options: SearchOptions): Promise<SearchResult> {\r\n    const content = await ops.promises.readFile(filePath, 'utf-8');\r\n    const lines = content.split('\\n');\r\n    const matches: SearchMatch[] = [];\r\n\r\n    let pattern: RegExp;\r\n    try {\r\n      if (options.isRegex) {\r\n        const flags = options.caseSensitive ? 'g' : 'gi';\r\n        pattern = new RegExp(options.pattern, flags);\r\n      } else {\r\n        const escapedPattern = options.pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n        const wordBoundary = options.wholeWord ? '\\\\b' : '';\r\n        const flags = options.caseSensitive ? 'g' : 'gi';\r\n        pattern = new RegExp(`${wordBoundary}${escapedPattern}${wordBoundary}`, flags);\r\n      }\r\n    } catch (error) {\r\n      throw new Error(`Invalid regex pattern: ${options.pattern}`);\r\n    }\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i];\r\n      let match;\r\n      pattern.lastIndex = 0; // Reset regex state\r\n\r\n      while ((match = pattern.exec(line)) !== null) {\r\n        const searchMatch: SearchMatch = {\r\n          line: i + 1,\r\n          column: match.index + 1,\r\n          text: line,\r\n          matchedText: match[0]\r\n        };\r\n\r\n        // Add context if requested\r\n        if (options.showContext && options.showContext > 0) {\r\n          const contextStart = Math.max(0, i - options.showContext);\r\n          const contextEnd = Math.min(lines.length, i + options.showContext + 1);\r\n          \r\n          searchMatch.beforeContext = lines.slice(contextStart, i);\r\n          searchMatch.afterContext = lines.slice(i + 1, contextEnd);\r\n        }\r\n\r\n        matches.push(searchMatch);\r\n\r\n        // Prevent infinite loop on zero-width matches\r\n        if (match[0].length === 0) {\r\n          pattern.lastIndex++;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      filePath: path.relative(process.cwd(), filePath),\r\n      matches,\r\n      totalMatches: matches.length\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Replace in a single file\r\n   */\r\n  private async replaceInFile(filePath: string, options: ReplaceOptions): Promise<ReplaceResult> {\r\n    try {\r\n      const content = await ops.promises.readFile(filePath, 'utf-8');\r\n      \r\n      let pattern: RegExp;\r\n      try {\r\n        if (options.isRegex) {\r\n          const flags = options.caseSensitive ? 'g' : 'gi';\r\n          pattern = new RegExp(options.pattern, flags);\r\n        } else {\r\n          const escapedPattern = options.pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n          const wordBoundary = options.wholeWord ? '\\\\b' : '';\r\n          const flags = options.caseSensitive ? 'g' : 'gi';\r\n          pattern = new RegExp(`${wordBoundary}${escapedPattern}${wordBoundary}`, flags);\r\n        }\r\n      } catch (error) {\r\n        return {\r\n          filePath: path.relative(process.cwd(), filePath),\r\n          replacements: 0,\r\n          success: false,\r\n          error: `Invalid regex pattern: ${options.pattern}`\r\n        };\r\n      }\r\n\r\n      const matches = content.match(pattern);\r\n      const replacementCount = matches ? matches.length : 0;\r\n\r\n      if (replacementCount === 0) {\r\n        return {\r\n          filePath: path.relative(process.cwd(), filePath),\r\n          replacements: 0,\r\n          success: true\r\n        };\r\n      }\r\n\r\n      const newContent = content.replace(pattern, options.replacement);\r\n\r\n      return {\r\n        filePath: path.relative(process.cwd(), filePath),\r\n        replacements: replacementCount,\r\n        preview: newContent,\r\n        success: true\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        filePath: path.relative(process.cwd(), filePath),\r\n        replacements: 0,\r\n        success: false,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get files recursively with filtering\r\n   */\r\n  private async getFilesRecursively(dirPath: string, options?: SearchOptions): Promise<string[]> {\r\n    const files: string[] = [];\r\n    \r\n    const walk = async (currentPath: string) => {\r\n      const entries = await ops.promises.readdir(currentPath, { withFileTypes: true });\r\n      \r\n      for (const entry of entries) {\r\n        const fullPath = path.join(currentPath, entry.name);\r\n        \r\n        if (entry.isDirectory()) {\r\n          // Skip common directories that shouldn't be searched\r\n          if (this.shouldSkipDirectory(entry.name)) {\r\n            continue;\r\n          }\r\n          await walk(fullPath);\r\n        } else if (entry.isFile()) {\r\n          if (this.shouldIncludeFile(fullPath, options)) {\r\n            files.push(fullPath);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    await walk(dirPath);\r\n    return files;\r\n  }\r\n\r\n  /**\r\n   * Check if directory should be skipped\r\n   */\r\n  private shouldSkipDirectory(dirName: string): boolean {\r\n    const skipDirs = [\r\n      'node_modules',\r\n      '.git',\r\n      '.vscode',\r\n      '.idea',\r\n      'dist',\r\n      'build',\r\n      'coverage',\r\n      '.next',\r\n      '.nuxt',\r\n      '__pycache__',\r\n      '.pytest_cache',\r\n      'vendor'\r\n    ];\r\n    \r\n    return skipDirs.includes(dirName) || dirName.startsWith('.');\r\n  }\r\n\r\n  /**\r\n   * Check if file should be included in search\r\n   */\r\n  private shouldIncludeFile(filePath: string, options?: SearchOptions): boolean {\r\n    const fileName = path.basename(filePath);\r\n    const ext = path.extname(fileName);\r\n    \r\n    // Skip binary files and common non-text files\r\n    const skipExtensions = [\r\n      '.exe', '.dll', '.so', '.dylib', '.bin',\r\n      '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.ico', '.svg',\r\n      '.mp3', '.mp4', '.avi', '.mkv', '.mov',\r\n      '.zip', '.tar', '.gz', '.rar', '.7z',\r\n      '.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx'\r\n    ];\r\n    \r\n    if (skipExtensions.includes(ext.toLowerCase())) {\r\n      return false;\r\n    }\r\n\r\n    // Apply include/exclude patterns if specified\r\n    if (options?.excludeFiles) {\r\n      for (const pattern of options.excludeFiles) {\r\n        if (this.matchesGlob(filePath, pattern)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (options?.includeFiles) {\r\n      for (const pattern of options.includeFiles) {\r\n        if (this.matchesGlob(filePath, pattern)) {\r\n          return true;\r\n        }\r\n      }\r\n      // If include patterns are specified but none match, exclude the file\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Simple glob pattern matching\r\n   */\r\n  private matchesGlob(filePath: string, pattern: string): boolean {\r\n    // Convert glob pattern to regex\r\n    const regexPattern = pattern\r\n      .replace(/\\./g, '\\\\.')\r\n      .replace(/\\*/g, '.*')\r\n      .replace(/\\?/g, '.');\r\n    \r\n    const regex = new RegExp(`^${regexPattern}$`, 'i');\r\n    return regex.test(path.basename(filePath)) || regex.test(filePath);\r\n  }\r\n\r\n  /**\r\n   * Format search results for display\r\n   */\r\n  private formatSearchResults(results: SearchResult[], options: SearchOptions): string {\r\n    if (results.length === 0) {\r\n      return 'No matches found';\r\n    }\r\n\r\n    let output = `Found ${results.reduce((sum, r) => sum + r.totalMatches, 0)} matches in ${results.length} files:\\n\\n`;\r\n\r\n    for (const result of results) {\r\n      output += `${result.filePath} (${result.totalMatches} matches):\\n`;\r\n      \r\n      for (const match of result.matches) {\r\n        output += `  ${match.line}:${match.column}: ${match.text.trim()}\\n`;\r\n        \r\n        if (options.showContext && (match.beforeContext || match.afterContext)) {\r\n          if (match.beforeContext) {\r\n            for (const contextLine of match.beforeContext) {\r\n              output += `    - ${contextLine}\\n`;\r\n            }\r\n          }\r\n          output += `    > ${match.text.trim()}\\n`;\r\n          if (match.afterContext) {\r\n            for (const contextLine of match.afterContext) {\r\n              output += `    + ${contextLine}\\n`;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      output += '\\n';\r\n    }\r\n\r\n    return output.trim();\r\n  }\r\n\r\n  /**\r\n   * Format replace results for display\r\n   */\r\n  private formatReplaceResults(results: ReplaceResult[], isDryRun: boolean): string {\r\n    const totalReplacements = results.reduce((sum, r) => sum + r.replacements, 0);\r\n    const action = isDryRun ? 'Would replace' : 'Replaced';\r\n    \r\n    let output = `${action} ${totalReplacements} occurrences in ${results.length} files:\\n\\n`;\r\n\r\n    for (const result of results) {\r\n      if (result.success) {\r\n        output += `${result.filePath}: ${result.replacements} replacements\\n`;\r\n      } else {\r\n        output += `${result.filePath}: ERROR - ${result.error}\\n`;\r\n      }\r\n    }\r\n\r\n    return output.trim();\r\n  }\r\n}","import * as ops from \"fs-extra\";\r\n\r\nconst pathExists = async (filePath: string): Promise<boolean> => {\r\n  try {\r\n    await ops.promises.access(filePath, ops.constants.F_OK);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n\r\n\r\nimport * as path from \"path\";\r\nimport { ToolResult } from \"../../types/index.js\";\r\nimport { ConfirmationService } from \"../../utils/confirmation-service.js\";\r\n\r\nexport interface FileTreeNode {\r\n  name: string;\r\n  path: string;\r\n  type: 'file' | 'directory';\r\n  size?: number;\r\n  modified?: Date;\r\n  children?: FileTreeNode[];\r\n}\r\n\r\nexport interface BulkOperation {\r\n  type: 'copy' | 'move' | 'delete' | 'create_dir' | 'chmod' | 'rename';\r\n  source: string;\r\n  destination?: string;\r\n  pattern?: string;\r\n  recursive?: boolean;\r\n  mode?: string; // for chmod\r\n}\r\n\r\nexport interface TreeFilterOptions {\r\n  includeHidden?: boolean;\r\n  maxDepth?: number;\r\n  includePatterns?: string[];\r\n  excludePatterns?: string[];\r\n  minSize?: number;\r\n  maxSize?: number;\r\n  modifiedAfter?: Date;\r\n  modifiedBefore?: Date;\r\n  fileTypes?: string[];\r\n}\r\n\r\nexport class FileTreeOperationsTool {\r\n  private confirmationService = ConfirmationService.getInstance();\r\n\r\n  /**\r\n   * Generate a visual tree representation of directory structure\r\n   */\r\n  async generateTree(rootPath: string, options: TreeFilterOptions = {}): Promise<ToolResult> {\r\n    try {\r\n      const resolvedPath = path.resolve(rootPath);\r\n      \r\n      if (!(await pathExists(resolvedPath))) {\r\n        return {\r\n          success: false,\r\n          error: `Path not found: ${rootPath}`\r\n        };\r\n      }\r\n\r\n      const tree = await this.buildTreeStructure(resolvedPath, options, 0);\r\n      const treeString = this.formatTree(tree, '', true);\r\n\r\n      return {\r\n        success: true,\r\n        output: `Directory tree for ${rootPath}:\\n${treeString}`\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error generating tree: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform bulk operations on files/directories\r\n   */\r\n  async bulkOperations(operations: BulkOperation[]): Promise<ToolResult> {\r\n    try {\r\n      // Validate all operations first\r\n      for (const [index, op] of operations.entries()) {\r\n        const validation = await this.validateBulkOperation(op);\r\n        if (!validation.valid) {\r\n          return {\r\n            success: false,\r\n            error: `Operation ${index + 1} invalid: ${validation.error}`\r\n          };\r\n        }\r\n      }\r\n\r\n      // Preview operations\r\n      const preview = this.generateOperationsPreview(operations);\r\n\r\n      // Request confirmation\r\n      const sessionFlags = this.confirmationService.getSessionFlags();\r\n      if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n        const confirmationResult = await this.confirmationService.requestConfirmation(\r\n          {\r\n            operation: `Bulk operations (${operations.length} operations)`,\r\n            filename: operations.map(op => op.source).join(', '),\r\n            showVSCodeOpen: false,\r\n            content: preview\r\n          },\r\n          \"file\"\r\n        );\r\n\r\n        if (!confirmationResult.confirmed) {\r\n          return {\r\n            success: false,\r\n            error: confirmationResult.feedback || \"Bulk operations cancelled by user\"\r\n          };\r\n        }\r\n      }\r\n\r\n      // Execute operations\r\n      const results: string[] = [];\r\n      for (const [index, op] of operations.entries()) {\r\n        try {\r\n          const result = await this.executeBulkOperation(op);\r\n          results.push(`✓ Operation ${index + 1}: ${result}`);\r\n        } catch (error: any) {\r\n          results.push(`✗ Operation ${index + 1}: ${error.message}`);\r\n        }\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        output: `Bulk operations completed:\\n${results.join('\\n')}`\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error executing bulk operations: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Copy directory structure (optionally with files)\r\n   */\r\n  async copyStructure(\r\n    sourcePath: string, \r\n    destinationPath: string, \r\n    options: { includeFiles?: boolean; overwrite?: boolean } = {}\r\n  ): Promise<ToolResult> {\r\n    try {\r\n      const resolvedSource = path.resolve(sourcePath);\r\n      const resolvedDest = path.resolve(destinationPath);\r\n\r\n      if (!(await pathExists(resolvedSource))) {\r\n        return {\r\n          success: false,\r\n          error: `Source path not found: ${sourcePath}`\r\n        };\r\n      }\r\n\r\n      if (await pathExists(resolvedDest) && !options.overwrite) {\r\n        return {\r\n          success: false,\r\n          error: `Destination already exists: ${destinationPath}`\r\n        };\r\n      }\r\n\r\n      const sessionFlags = this.confirmationService.getSessionFlags();\r\n      if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n        const confirmationResult = await this.confirmationService.requestConfirmation(\r\n          {\r\n            operation: `Copy structure from ${sourcePath} to ${destinationPath}`,\r\n            filename: `${sourcePath} → ${destinationPath}`,\r\n            showVSCodeOpen: false,\r\n            content: `Copy ${options.includeFiles ? 'structure and files' : 'structure only'}\\nOverwrite: ${options.overwrite ? 'Yes' : 'No'}`\r\n          },\r\n          \"file\"\r\n        );\r\n\r\n        if (!confirmationResult.confirmed) {\r\n          return {\r\n            success: false,\r\n            error: confirmationResult.feedback || \"Copy structure cancelled by user\"\r\n          };\r\n        }\r\n      }\r\n\r\n      await this.copyStructureRecursive(resolvedSource, resolvedDest, options);\r\n\r\n      return {\r\n        success: true,\r\n        output: `Structure copied from ${sourcePath} to ${destinationPath}`\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error copying structure: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find and organize files by type, size, or date\r\n   */\r\n  async organizeFiles(\r\n    sourcePath: string,\r\n    organizationType: 'type' | 'size' | 'date',\r\n    destinationBase?: string\r\n  ): Promise<ToolResult> {\r\n    try {\r\n      const resolvedSource = path.resolve(sourcePath);\r\n      \r\n      if (!(await pathExists(resolvedSource))) {\r\n        return {\r\n          success: false,\r\n          error: `Source path not found: ${sourcePath}`\r\n        };\r\n      }\r\n\r\n      const files = await this.getFilesRecursively(resolvedSource);\r\n      const organization = await this.categorizeFiles(files, organizationType);\r\n\r\n      const destBase = destinationBase ? path.resolve(destinationBase) : resolvedSource;\r\n      \r\n      // Preview organization\r\n      let preview = `Organization plan (${organizationType}):\\n`;\r\n      for (const [category, fileList] of Object.entries(organization)) {\r\n        preview += `\\n${category}/\\n`;\r\n        fileList.slice(0, 5).forEach(file => {\r\n          preview += `  - ${path.basename(file)}\\n`;\r\n        });\r\n        if (fileList.length > 5) {\r\n          preview += `  ... and ${fileList.length - 5} more files\\n`;\r\n        }\r\n      }\r\n\r\n      // Request confirmation\r\n      const sessionFlags = this.confirmationService.getSessionFlags();\r\n      if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n        const confirmationResult = await this.confirmationService.requestConfirmation(\r\n          {\r\n            operation: `Organize files by ${organizationType}`,\r\n            filename: sourcePath,\r\n            showVSCodeOpen: false,\r\n            content: preview\r\n          },\r\n          \"file\"\r\n        );\r\n\r\n        if (!confirmationResult.confirmed) {\r\n          return {\r\n            success: false,\r\n            error: confirmationResult.feedback || \"File organization cancelled by user\"\r\n          };\r\n        }\r\n      }\r\n\r\n      // Execute organization\r\n      let movedFiles = 0;\r\n      for (const [category, fileList] of Object.entries(organization)) {\r\n        const categoryDir = path.join(destBase, category);\r\n        await ops.promises.mkdir(categoryDir, { recursive: true });\r\n\r\n        for (const filePath of fileList) {\r\n          const fileName = path.basename(filePath);\r\n          const destPath = path.join(categoryDir, fileName);\r\n          await ops.move(filePath, destPath);\r\n          movedFiles++;\r\n        }\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        output: `Organized ${movedFiles} files into ${Object.keys(organization).length} categories by ${organizationType}`\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error organizing files: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up empty directories\r\n   */\r\n  async cleanupEmptyDirectories(rootPath: string): Promise<ToolResult> {\r\n    try {\r\n      const resolvedPath = path.resolve(rootPath);\r\n      \r\n      if (!(await pathExists(resolvedPath))) {\r\n        return {\r\n          success: false,\r\n          error: `Path not found: ${rootPath}`\r\n        };\r\n      }\r\n\r\n      const emptyDirs = await this.findEmptyDirectories(resolvedPath);\r\n      \r\n      if (emptyDirs.length === 0) {\r\n        return {\r\n          success: true,\r\n          output: \"No empty directories found\"\r\n        };\r\n      }\r\n\r\n      // Request confirmation\r\n      const sessionFlags = this.confirmationService.getSessionFlags();\r\n      if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n        const preview = `Empty directories to remove:\\n${emptyDirs.map(dir => `- ${path.relative(rootPath, dir)}`).join('\\n')}`;\r\n        const confirmationResult = await this.confirmationService.requestConfirmation(\r\n          {\r\n            operation: `Remove ${emptyDirs.length} empty directories`,\r\n            filename: rootPath,\r\n            showVSCodeOpen: false,\r\n            content: preview\r\n          },\r\n          \"file\"\r\n        );\r\n\r\n        if (!confirmationResult.confirmed) {\r\n          return {\r\n            success: false,\r\n            error: confirmationResult.feedback || \"Cleanup cancelled by user\"\r\n          };\r\n        }\r\n      }\r\n\r\n      // Remove empty directories (deepest first)\r\n      emptyDirs.sort((a, b) => b.length - a.length);\r\n      for (const dir of emptyDirs) {\r\n        await ops.rmdir(dir);\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        output: `Removed ${emptyDirs.length} empty directories`\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error cleaning up directories: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build tree structure recursively\r\n   */\r\n  private async buildTreeStructure(\r\n    dirPath: string, \r\n    options: TreeFilterOptions, \r\n    currentDepth: number\r\n  ): Promise<FileTreeNode> {\r\n    const stats = await ops.promises.stat(dirPath);\r\n    const name = path.basename(dirPath);\r\n    \r\n    const node: FileTreeNode = {\r\n      name: name || path.basename(dirPath),\r\n      path: dirPath,\r\n      type: stats.isDirectory() ? 'directory' : 'file',\r\n      size: stats.size,\r\n      modified: stats.mtime\r\n    };\r\n\r\n    if (stats.isDirectory() && (!options.maxDepth || currentDepth < options.maxDepth)) {\r\n      node.children = [];\r\n      \r\n      try {\r\n        const entries = await ops.promises.readdir(dirPath, { withFileTypes: true });\r\n        \r\n        for (const entry of entries) {\r\n          // Skip hidden files unless specified\r\n          if (!options.includeHidden && entry.name.startsWith('.')) {\r\n            continue;\r\n          }\r\n\r\n          const fullPath = path.join(dirPath, entry.name);\r\n          \r\n          // Apply filters\r\n          if (!this.passesFilters(fullPath, entry, options)) {\r\n            continue;\r\n          }\r\n\r\n          const childNode = await this.buildTreeStructure(fullPath, options, currentDepth + 1);\r\n          node.children.push(childNode);\r\n        }\r\n\r\n        // Sort children: directories first, then files, both alphabetically\r\n        node.children.sort((a, b) => {\r\n          if (a.type !== b.type) {\r\n            return a.type === 'directory' ? -1 : 1;\r\n          }\r\n          return a.name.localeCompare(b.name);\r\n        });\r\n      } catch (error) {\r\n        // Skip directories we can't read\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /**\r\n   * Format tree structure for display\r\n   */\r\n  private formatTree(node: FileTreeNode, prefix: string, isLast: boolean): string {\r\n    const connector = isLast ? '└── ' : '├── ';\r\n    let result = prefix + connector + node.name;\r\n    \r\n    if (node.type === 'file' && node.size) {\r\n      result += ` (${this.formatFileSize(node.size)})`;\r\n    }\r\n    \r\n    result += '\\n';\r\n\r\n    if (node.children) {\r\n      const childPrefix = prefix + (isLast ? '    ' : '│   ');\r\n      \r\n      for (let i = 0; i < node.children.length; i++) {\r\n        const child = node.children[i];\r\n        const isLastChild = i === node.children.length - 1;\r\n        result += this.formatTree(child, childPrefix, isLastChild);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Check if file/directory passes filters\r\n   */\r\n  private passesFilters(\r\n    fullPath: string, \r\n    entry: ops.Dirent, \r\n    options: TreeFilterOptions\r\n  ): boolean {\r\n    const name = entry.name;\r\n    const ext = path.extname(name).toLowerCase();\r\n\r\n    // Include/exclude patterns\r\n    if (options.excludePatterns) {\r\n      for (const pattern of options.excludePatterns) {\r\n        if (this.matchesPattern(name, pattern)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (options.includePatterns) {\r\n      let matches = false;\r\n      for (const pattern of options.includePatterns) {\r\n        if (this.matchesPattern(name, pattern)) {\r\n          matches = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!matches) return false;\r\n    }\r\n\r\n    // File type filter\r\n    if (options.fileTypes && entry.isFile()) {\r\n      if (!options.fileTypes.includes(ext)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Simple pattern matching (supports * and ?)\r\n   */\r\n  private matchesPattern(text: string, pattern: string): boolean {\r\n    const regexPattern = pattern\r\n      .replace(/\\./g, '\\\\.')\r\n      .replace(/\\*/g, '.*')\r\n      .replace(/\\?/g, '.');\r\n    \r\n    const regex = new RegExp(`^${regexPattern}$`, 'i');\r\n    return regex.test(text);\r\n  }\r\n\r\n  /**\r\n   * Format file size for display\r\n   */\r\n  private formatFileSize(bytes: number): string {\r\n    const units = ['B', 'KB', 'MB', 'GB'];\r\n    let size = bytes;\r\n    let unitIndex = 0;\r\n\r\n    while (size >= 1024 && unitIndex < units.length - 1) {\r\n      size /= 1024;\r\n      unitIndex++;\r\n    }\r\n\r\n    return `${size.toFixed(1)}${units[unitIndex]}`;\r\n  }\r\n\r\n  /**\r\n   * Validate bulk operation\r\n   */\r\n  private async validateBulkOperation(operation: BulkOperation): Promise<{ valid: boolean; error?: string }> {\r\n    try {\r\n      const sourcePath = path.resolve(operation.source);\r\n\r\n      switch (operation.type) {\r\n        case 'copy':\r\n        case 'move':\r\n          if (!(await pathExists(sourcePath))) {\r\n            return { valid: false, error: \"Source path does not exist\" };\r\n          }\r\n          if (!operation.destination) {\r\n            return { valid: false, error: \"Destination required for copy/move operations\" };\r\n          }\r\n          break;\r\n\r\n        case 'delete':\r\n          if (!(await pathExists(sourcePath))) {\r\n            return { valid: false, error: \"Path does not exist\" };\r\n          }\r\n          break;\r\n\r\n        case 'create_dir':\r\n          if (await pathExists(sourcePath)) {\r\n            return { valid: false, error: \"Directory already exists\" };\r\n          }\r\n          break;\r\n\r\n        case 'chmod':\r\n          if (!(await pathExists(sourcePath))) {\r\n            return { valid: false, error: \"Path does not exist\" };\r\n          }\r\n          if (!operation.mode) {\r\n            return { valid: false, error: \"Mode required for chmod operation\" };\r\n          }\r\n          break;\r\n\r\n        case 'rename':\r\n          if (!(await pathExists(sourcePath))) {\r\n            return { valid: false, error: \"Source path does not exist\" };\r\n          }\r\n          if (!operation.destination) {\r\n            return { valid: false, error: \"Destination required for rename operation\" };\r\n          }\r\n          break;\r\n      }\r\n\r\n      return { valid: true };\r\n    } catch (error: any) {\r\n      return { valid: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute a single bulk operation\r\n   */\r\n  private async executeBulkOperation(operation: BulkOperation): Promise<string> {\r\n    const sourcePath = path.resolve(operation.source);\r\n\r\n    switch (operation.type) {\r\n      case 'copy':\r\n        const copyDest = path.resolve(operation.destination!);\r\n        await ops.copy(sourcePath, copyDest);\r\n        return `Copied ${operation.source} to ${operation.destination}`;\r\n\r\n      case 'move':\r\n        const moveDest = path.resolve(operation.destination!);\r\n        await ops.move(sourcePath, moveDest);\r\n        return `Moved ${operation.source} to ${operation.destination}`;\r\n\r\n      case 'delete':\r\n        await ops.promises.rm(sourcePath);\r\n        return `Deleted ${operation.source}`;\r\n\r\n      case 'create_dir':\r\n        await ops.promises.mkdir(sourcePath, { recursive: true });\r\n        return `Created directory ${operation.source}`;\r\n\r\n      case 'chmod':\r\n        await ops.promises.chmod(sourcePath, operation.mode!);\r\n        return `Changed permissions of ${operation.source} to ${operation.mode}`;\r\n\r\n      case 'rename':\r\n        const renameDest = path.resolve(operation.destination!);\r\n        await ops.move(sourcePath, renameDest);\r\n        return `Renamed ${operation.source} to ${operation.destination}`;\r\n\r\n      default:\r\n        throw new Error(`Unknown operation type: ${operation.type}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate preview of operations\r\n   */\r\n  private generateOperationsPreview(operations: BulkOperation[]): string {\r\n    let preview = `Bulk Operations Preview (${operations.length} operations):\\n\\n`;\r\n    \r\n    for (const [index, op] of operations.entries()) {\r\n      preview += `${index + 1}. ${op.type.toUpperCase()}: ${op.source}`;\r\n      if (op.destination) {\r\n        preview += ` → ${op.destination}`;\r\n      }\r\n      if (op.mode) {\r\n        preview += ` (mode: ${op.mode})`;\r\n      }\r\n      preview += '\\n';\r\n    }\r\n\r\n    return preview;\r\n  }\r\n\r\n  /**\r\n   * Copy structure recursively\r\n   */\r\n  private async copyStructureRecursive(\r\n    source: string, \r\n    destination: string, \r\n    options: { includeFiles?: boolean; overwrite?: boolean }\r\n  ): Promise<void> {\r\n    const stats = await ops.promises.stat(source);\r\n\r\n    if (stats.isDirectory()) {\r\n      await ops.promises.mkdir(destination, { recursive: true });\r\n      \r\n      const entries = await ops.promises.readdir(source);\r\n      for (const entry of entries) {\r\n        const srcPath = path.join(source, entry);\r\n        const destPath = path.join(destination, entry);\r\n        await this.copyStructureRecursive(srcPath, destPath, options);\r\n      }\r\n    } else if (options.includeFiles) {\r\n      await ops.copy(source, destination, { overwrite: options.overwrite });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all files recursively\r\n   */\r\n  private async getFilesRecursively(dirPath: string): Promise<string[]> {\r\n    const files: string[] = [];\r\n    \r\n    const walk = async (currentPath: string) => {\r\n      const entries = await ops.promises.readdir(currentPath, { withFileTypes: true });\r\n      \r\n      for (const entry of entries) {\r\n        const fullPath = path.join(currentPath, entry.name);\r\n        \r\n        if (entry.isDirectory()) {\r\n          await walk(fullPath);\r\n        } else if (entry.isFile()) {\r\n          files.push(fullPath);\r\n        }\r\n      }\r\n    };\r\n\r\n    await walk(dirPath);\r\n    return files;\r\n  }\r\n\r\n  /**\r\n   * Categorize files for organization\r\n   */\r\n  private async categorizeFiles(\r\n    files: string[], \r\n    organizationType: 'type' | 'size' | 'date'\r\n  ): Promise<Record<string, string[]>> {\r\n    const categories: Record<string, string[]> = {};\r\n\r\n    for (const filePath of files) {\r\n      let category: string;\r\n\r\n      switch (organizationType) {\r\n        case 'type':\r\n          const ext = path.extname(filePath).toLowerCase();\r\n          category = ext || 'no-extension';\r\n          break;\r\n\r\n        case 'size':\r\n          const stats = await ops.promises.stat(filePath);\r\n          if (stats.size < 1024) category = 'small (< 1KB)';\r\n          else if (stats.size < 1024 * 1024) category = 'medium (< 1MB)';\r\n          else if (stats.size < 1024 * 1024 * 10) category = 'large (< 10MB)';\r\n          else category = 'very-large (> 10MB)';\r\n          break;\r\n\r\n        case 'date':\r\n          const fileStats = await ops.promises.stat(filePath);\r\n          const year = fileStats.mtime.getFullYear();\r\n          const month = fileStats.mtime.getMonth() + 1;\r\n          category = `${year}-${month.toString().padStart(2, '0')}`;\r\n          break;\r\n\r\n        default:\r\n          category = 'misc';\r\n      }\r\n\r\n      if (!categories[category]) {\r\n        categories[category] = [];\r\n      }\r\n      categories[category].push(filePath);\r\n    }\r\n\r\n    return categories;\r\n  }\r\n\r\n  /**\r\n   * Find empty directories recursively\r\n   */\r\n  private async findEmptyDirectories(dirPath: string): Promise<string[]> {\r\n    const emptyDirs: string[] = [];\r\n\r\n    const checkDirectory = async (currentPath: string): Promise<boolean> => {\r\n      try {\r\n        const entries = await ops.promises.readdir(currentPath);\r\n        \r\n        if (entries.length === 0) {\r\n          emptyDirs.push(currentPath);\r\n          return true;\r\n        }\r\n\r\n        let hasNonEmptyChildren = false;\r\n        for (const entry of entries) {\r\n          const fullPath = path.join(currentPath, entry);\r\n          const stats = await ops.promises.stat(fullPath);\r\n          \r\n          if (stats.isDirectory()) {\r\n            const isEmpty = await checkDirectory(fullPath);\r\n            if (!isEmpty) {\r\n              hasNonEmptyChildren = true;\r\n            }\r\n          } else {\r\n            hasNonEmptyChildren = true;\r\n          }\r\n        }\r\n\r\n        // If all children are empty directories, this directory is also considered empty\r\n        if (!hasNonEmptyChildren) {\r\n          emptyDirs.push(currentPath);\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      } catch (error) {\r\n        return false;\r\n      }\r\n    };\r\n\r\n    await checkDirectory(dirPath);\r\n    return emptyDirs;\r\n  }\r\n}","import * as ops from \"fs\";\r\n\r\nconst pathExists = async (filePath: string): Promise<boolean> => {\r\n  try {\r\n    await ops.promises.access(filePath, ops.constants.F_OK);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n\r\n\r\nimport * as path from \"path\";\r\nimport { ToolResult } from \"../../types/index.js\";\r\nimport { ConfirmationService } from \"../../utils/confirmation-service.js\";\r\n\r\nexport interface CodeContext {\r\n  language: string;\r\n  imports: string[];\r\n  exports: string[];\r\n  functions: FunctionInfo[];\r\n  classes: ClassInfo[];\r\n  variables: VariableInfo[];\r\n  types: TypeInfo[];\r\n}\r\n\r\nexport interface FunctionInfo {\r\n  name: string;\r\n  startLine: number;\r\n  endLine: number;\r\n  parameters: string[];\r\n  returnType?: string;\r\n  isAsync: boolean;\r\n  isExported: boolean;\r\n}\r\n\r\nexport interface ClassInfo {\r\n  name: string;\r\n  startLine: number;\r\n  endLine: number;\r\n  methods: FunctionInfo[];\r\n  properties: VariableInfo[];\r\n  extends?: string;\r\n  implements?: string[];\r\n  isExported: boolean;\r\n}\r\n\r\nexport interface VariableInfo {\r\n  name: string;\r\n  line: number;\r\n  type?: string;\r\n  isConst: boolean;\r\n  isExported: boolean;\r\n  scope: 'global' | 'function' | 'class' | 'block';\r\n}\r\n\r\nexport interface TypeInfo {\r\n  name: string;\r\n  line: number;\r\n  kind: 'interface' | 'type' | 'enum';\r\n  isExported: boolean;\r\n}\r\n\r\nexport interface RefactorOperation {\r\n  type: 'rename' | 'extract_function' | 'extract_variable' | 'inline' | 'move_function' | 'add_import';\r\n  target: string;\r\n  newName?: string;\r\n  startLine?: number;\r\n  endLine?: number;\r\n  destinationFile?: string;\r\n  importPath?: string;\r\n}\r\n\r\nexport class CodeAwareEditorTool {\r\n  private confirmationService = ConfirmationService.getInstance();\r\n\r\n  /**\r\n   * Analyze code structure and context\r\n   */\r\n  async analyzeCode(filePath: string): Promise<ToolResult> {\r\n    try {\r\n      const resolvedPath = path.resolve(filePath);\r\n      \r\n      if (!(await pathExists(resolvedPath))) {\r\n        return {\r\n          success: false,\r\n          error: `File not found: ${filePath}`\r\n        };\r\n      }\r\n\r\n      const content = await ops.promises.readFile(resolvedPath, 'utf-8');\r\n      const language = this.detectLanguage(filePath);\r\n      const context = await this.parseCodeContext(content, language);\r\n\r\n      const output = this.formatCodeAnalysis(context, filePath);\r\n\r\n      return {\r\n        success: true,\r\n        output\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error analyzing code: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform smart refactoring operations\r\n   */\r\n  async refactor(filePath: string, operation: RefactorOperation): Promise<ToolResult> {\r\n    try {\r\n      const resolvedPath = path.resolve(filePath);\r\n      \r\n      if (!(await pathExists(resolvedPath))) {\r\n        return {\r\n          success: false,\r\n          error: `File not found: ${filePath}`\r\n        };\r\n      }\r\n\r\n      const content = await ops.promises.readFile(resolvedPath, 'utf-8');\r\n      const language = this.detectLanguage(filePath);\r\n      const context = await this.parseCodeContext(content, language);\r\n\r\n      const result = await this.performRefactoring(content, context, operation, language);\r\n      \r\n      if (!result.success) {\r\n        return result;\r\n      }\r\n\r\n      // Request confirmation\r\n      const sessionFlags = this.confirmationService.getSessionFlags();\r\n      if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n        const preview = this.generateRefactorPreview(content, result.newContent!, operation);\r\n        const confirmationResult = await this.confirmationService.requestConfirmation(\r\n          {\r\n            operation: `Refactor: ${operation.type} (${operation.target})`,\r\n            filename: filePath,\r\n            showVSCodeOpen: false,\r\n            content: preview\r\n          },\r\n          \"file\"\r\n        );\r\n\r\n        if (!confirmationResult.confirmed) {\r\n          return {\r\n            success: false,\r\n            error: confirmationResult.feedback || \"Refactoring cancelled by user\"\r\n          };\r\n        }\r\n      }\r\n\r\n      // Apply changes\r\n      await ops.promises.writeFile(resolvedPath, result.newContent!, 'utf-8');\r\n\r\n      return {\r\n        success: true,\r\n        output: result.output!\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error performing refactoring: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Smart code insertion that preserves formatting and structure\r\n   */\r\n  async smartInsert(\r\n    filePath: string, \r\n    code: string, \r\n    location: 'top' | 'bottom' | 'before_function' | 'after_function' | 'in_class',\r\n    target?: string\r\n  ): Promise<ToolResult> {\r\n    try {\r\n      const resolvedPath = path.resolve(filePath);\r\n      \r\n      if (!(await pathExists(resolvedPath))) {\r\n        return {\r\n          success: false,\r\n          error: `File not found: ${filePath}`\r\n        };\r\n      }\r\n\r\n      const content = await ops.promises.readFile(resolvedPath, 'utf-8');\r\n      const language = this.detectLanguage(filePath);\r\n      const context = await this.parseCodeContext(content, language);\r\n\r\n      const insertionPoint = this.findInsertionPoint(content, context, location, target);\r\n      if (!insertionPoint.success) {\r\n        return insertionPoint;\r\n      }\r\n\r\n      const formattedCode = this.formatCodeForInsertion(code, insertionPoint.indentation!, language);\r\n      const lines = content.split('\\n');\r\n      \r\n      lines.splice(insertionPoint.line!, 0, formattedCode);\r\n      const newContent = lines.join('\\n');\r\n\r\n      // Request confirmation\r\n      const sessionFlags = this.confirmationService.getSessionFlags();\r\n      if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n        const preview = this.generateInsertionPreview(content, newContent, insertionPoint.line!);\r\n        const confirmationResult = await this.confirmationService.requestConfirmation(\r\n          {\r\n            operation: `Insert code at ${location}${target ? ` (${target})` : ''}`,\r\n            filename: filePath,\r\n            showVSCodeOpen: false,\r\n            content: preview\r\n          },\r\n          \"file\"\r\n        );\r\n\r\n        if (!confirmationResult.confirmed) {\r\n          return {\r\n            success: false,\r\n            error: confirmationResult.feedback || \"Code insertion cancelled by user\"\r\n          };\r\n        }\r\n      }\r\n\r\n      await ops.promises.writeFile(resolvedPath, newContent, 'utf-8');\r\n\r\n      return {\r\n        success: true,\r\n        output: `Code inserted at line ${insertionPoint.line! + 1} in ${filePath}`\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error inserting code: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Auto-format code while preserving logical structure\r\n   */\r\n  async formatCode(filePath: string, options: { preserveComments?: boolean; indentSize?: number } = {}): Promise<ToolResult> {\r\n    try {\r\n      const resolvedPath = path.resolve(filePath);\r\n      \r\n      if (!(await pathExists(resolvedPath))) {\r\n        return {\r\n          success: false,\r\n          error: `File not found: ${filePath}`\r\n        };\r\n      }\r\n\r\n      const content = await ops.promises.readFile(resolvedPath, 'utf-8');\r\n      const language = this.detectLanguage(filePath);\r\n      \r\n      const formattedContent = await this.formatCodeContent(content, language, options);\r\n\r\n      if (formattedContent === content) {\r\n        return {\r\n          success: true,\r\n          output: \"No formatting changes needed\"\r\n        };\r\n      }\r\n\r\n      // Request confirmation\r\n      const sessionFlags = this.confirmationService.getSessionFlags();\r\n      if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n        const preview = this.generateFormatPreview(content, formattedContent);\r\n        const confirmationResult = await this.confirmationService.requestConfirmation(\r\n          {\r\n            operation: \"Format code\",\r\n            filename: filePath,\r\n            showVSCodeOpen: false,\r\n            content: preview\r\n          },\r\n          \"file\"\r\n        );\r\n\r\n        if (!confirmationResult.confirmed) {\r\n          return {\r\n            success: false,\r\n            error: confirmationResult.feedback || \"Code formatting cancelled by user\"\r\n          };\r\n        }\r\n      }\r\n\r\n      await ops.promises.writeFile(resolvedPath, formattedContent, 'utf-8');\r\n\r\n      return {\r\n        success: true,\r\n        output: `Code formatted in ${filePath}`\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error formatting code: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add missing imports automatically\r\n   */\r\n  async addMissingImports(filePath: string, symbols: string[]): Promise<ToolResult> {\r\n    try {\r\n      const resolvedPath = path.resolve(filePath);\r\n      \r\n      if (!(await pathExists(resolvedPath))) {\r\n        return {\r\n          success: false,\r\n          error: `File not found: ${filePath}`\r\n        };\r\n      }\r\n\r\n      const content = await ops.promises.readFile(resolvedPath, 'utf-8');\r\n      const language = this.detectLanguage(filePath);\r\n      const context = await this.parseCodeContext(content, language);\r\n\r\n      const missingImports = symbols.filter(symbol => \r\n        !context.imports.some(imp => imp.includes(symbol))\r\n      );\r\n\r\n      if (missingImports.length === 0) {\r\n        return {\r\n          success: true,\r\n          output: \"All symbols are already imported\"\r\n        };\r\n      }\r\n\r\n      const importsToAdd = await this.generateImportStatements(missingImports, language);\r\n      const newContent = this.insertImports(content, importsToAdd, context, language);\r\n\r\n      if (newContent === content) {\r\n        return {\r\n          success: true,\r\n          output: \"No imports to add\"\r\n        };\r\n      }\r\n\r\n      // Request confirmation\r\n      const sessionFlags = this.confirmationService.getSessionFlags();\r\n      if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n        const preview = `Adding imports for: ${missingImports.join(', ')}\\n\\n${importsToAdd.join('\\n')}`;\r\n        const confirmationResult = await this.confirmationService.requestConfirmation(\r\n          {\r\n            operation: `Add ${missingImports.length} missing imports`,\r\n            filename: filePath,\r\n            showVSCodeOpen: false,\r\n            content: preview\r\n          },\r\n          \"file\"\r\n        );\r\n\r\n        if (!confirmationResult.confirmed) {\r\n          return {\r\n            success: false,\r\n            error: confirmationResult.feedback || \"Import addition cancelled by user\"\r\n          };\r\n        }\r\n      }\r\n\r\n      await ops.promises.writeFile(resolvedPath, newContent, 'utf-8');\r\n\r\n      return {\r\n        success: true,\r\n        output: `Added ${missingImports.length} missing imports to ${filePath}`\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error adding imports: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect programming language from file extension\r\n   */\r\n  private detectLanguage(filePath: string): string {\r\n    const ext = path.extname(filePath).toLowerCase();\r\n    \r\n    const languageMap: Record<string, string> = {\r\n      '.js': 'javascript',\r\n      '.jsx': 'javascript',\r\n      '.ts': 'typescript',\r\n      '.tsx': 'typescript',\r\n      '.py': 'python',\r\n      '.java': 'java',\r\n      '.c': 'c',\r\n      '.cpp': 'cpp',\r\n      '.cc': 'cpp',\r\n      '.cxx': 'cpp',\r\n      '.h': 'c',\r\n      '.hpp': 'cpp',\r\n      '.cs': 'csharp',\r\n      '.go': 'go',\r\n      '.rs': 'rust',\r\n      '.php': 'php',\r\n      '.rb': 'ruby',\r\n      '.swift': 'swift',\r\n      '.kt': 'kotlin',\r\n      '.scala': 'scala'\r\n    };\r\n\r\n    return languageMap[ext] || 'text';\r\n  }\r\n\r\n  /**\r\n   * Parse code context based on language\r\n   */\r\n  private async parseCodeContext(content: string, language: string): Promise<CodeContext> {\r\n    const context: CodeContext = {\r\n      language,\r\n      imports: [],\r\n      exports: [],\r\n      functions: [],\r\n      classes: [],\r\n      variables: [],\r\n      types: []\r\n    };\r\n\r\n    const lines = content.split('\\n');\r\n\r\n    switch (language) {\r\n      case 'javascript':\r\n      case 'typescript':\r\n        this.parseJavaScriptTypeScript(lines, context);\r\n        break;\r\n      case 'python':\r\n        this.parsePython(lines, context);\r\n        break;\r\n      case 'java':\r\n        this.parseJava(lines, context);\r\n        break;\r\n      default:\r\n        this.parseGeneric(lines, context);\r\n    }\r\n\r\n    return context;\r\n  }\r\n\r\n  /**\r\n   * Parse JavaScript/TypeScript specific syntax\r\n   */\r\n  private parseJavaScriptTypeScript(lines: string[], context: CodeContext): void {\r\n    let currentClass: ClassInfo | null = null;\r\n    let currentFunction: FunctionInfo | null = null;\r\n    let braceDepth = 0;\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i].trim();\r\n      const lineNumber = i + 1;\r\n\r\n      // Parse imports\r\n      if (line.startsWith('import ') || line.startsWith('const ') && line.includes('require(')) {\r\n        context.imports.push(line);\r\n      }\r\n\r\n      // Parse exports\r\n      if (line.startsWith('export ')) {\r\n        context.exports.push(line);\r\n      }\r\n\r\n      // Parse types (TypeScript)\r\n      if (line.startsWith('interface ') || line.startsWith('type ') || line.startsWith('enum ')) {\r\n        const match = line.match(/(interface|type|enum)\\s+(\\w+)/);\r\n        if (match) {\r\n          context.types.push({\r\n            name: match[2],\r\n            line: lineNumber,\r\n            kind: match[1] as 'interface' | 'type' | 'enum',\r\n            isExported: line.includes('export')\r\n          });\r\n        }\r\n      }\r\n\r\n      // Parse classes\r\n      if (line.includes('class ')) {\r\n        const match = line.match(/class\\s+(\\w+)/);\r\n        if (match) {\r\n          currentClass = {\r\n            name: match[1],\r\n            startLine: lineNumber,\r\n            endLine: lineNumber,\r\n            methods: [],\r\n            properties: [],\r\n            isExported: line.includes('export')\r\n          };\r\n          context.classes.push(currentClass);\r\n        }\r\n      }\r\n\r\n      // Parse functions\r\n      if (line.includes('function ') || line.match(/\\w+\\s*\\(/)) {\r\n        const functionMatch = line.match(/(?:async\\s+)?(?:function\\s+)?(\\w+)\\s*\\(/);\r\n        if (functionMatch) {\r\n          const func: FunctionInfo = {\r\n            name: functionMatch[1],\r\n            startLine: lineNumber,\r\n            endLine: lineNumber,\r\n            parameters: this.extractParameters(line),\r\n            isAsync: line.includes('async'),\r\n            isExported: line.includes('export')\r\n          };\r\n\r\n          if (currentClass) {\r\n            currentClass.methods.push(func);\r\n          } else {\r\n            context.functions.push(func);\r\n          }\r\n          currentFunction = func;\r\n        }\r\n      }\r\n\r\n      // Parse variables\r\n      if (line.match(/^(const|let|var)\\s+\\w+/)) {\r\n        const match = line.match(/(const|let|var)\\s+(\\w+)/);\r\n        if (match) {\r\n          context.variables.push({\r\n            name: match[2],\r\n            line: lineNumber,\r\n            isConst: match[1] === 'const',\r\n            isExported: line.includes('export'),\r\n            scope: currentFunction ? 'function' : currentClass ? 'class' : 'global'\r\n          });\r\n        }\r\n      }\r\n\r\n      // Track brace depth for function/class end detection\r\n      const openBraces = (line.match(/\\{/g) || []).length;\r\n      const closeBraces = (line.match(/\\}/g) || []).length;\r\n      braceDepth += openBraces - closeBraces;\r\n\r\n      if (braceDepth === 0 && currentFunction) {\r\n        currentFunction.endLine = lineNumber;\r\n        currentFunction = null;\r\n      }\r\n\r\n      if (braceDepth === 0 && currentClass) {\r\n        currentClass.endLine = lineNumber;\r\n        currentClass = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse Python specific syntax\r\n   */\r\n  private parsePython(lines: string[], context: CodeContext): void {\r\n    let currentClass: ClassInfo | null = null;\r\n    let currentIndent = 0;\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i];\r\n      const trimmedLine = line.trim();\r\n      const lineNumber = i + 1;\r\n      const indent = line.length - line.trimStart().length;\r\n\r\n      // Reset context when indentation decreases\r\n      if (indent <= currentIndent) {\r\n        currentClass = null;\r\n        currentIndent = indent;\r\n      }\r\n\r\n      // Parse imports\r\n      if (trimmedLine.startsWith('import ') || trimmedLine.startsWith('from ')) {\r\n        context.imports.push(trimmedLine);\r\n      }\r\n\r\n      // Parse classes\r\n      if (trimmedLine.startsWith('class ')) {\r\n        const match = trimmedLine.match(/class\\s+(\\w+)/);\r\n        if (match) {\r\n          currentClass = {\r\n            name: match[1],\r\n            startLine: lineNumber,\r\n            endLine: lineNumber,\r\n            methods: [],\r\n            properties: [],\r\n            isExported: true // Python doesn't have explicit exports\r\n          };\r\n          context.classes.push(currentClass);\r\n          currentIndent = indent;\r\n        }\r\n      }\r\n\r\n      // Parse functions\r\n      if (trimmedLine.startsWith('def ')) {\r\n        const match = trimmedLine.match(/def\\s+(\\w+)\\s*\\(/);\r\n        if (match) {\r\n          const func: FunctionInfo = {\r\n            name: match[1],\r\n            startLine: lineNumber,\r\n            endLine: lineNumber,\r\n            parameters: this.extractPythonParameters(trimmedLine),\r\n            isAsync: trimmedLine.startsWith('async def'),\r\n            isExported: true\r\n          };\r\n\r\n          if (currentClass) {\r\n            currentClass.methods.push(func);\r\n          } else {\r\n            context.functions.push(func);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Parse variables (basic detection)\r\n      if (trimmedLine.match(/^\\w+\\s*=/) && !trimmedLine.startsWith('def ') && !trimmedLine.startsWith('class ')) {\r\n        const match = trimmedLine.match(/^(\\w+)\\s*=/);\r\n        if (match) {\r\n          context.variables.push({\r\n            name: match[1],\r\n            line: lineNumber,\r\n            isConst: false,\r\n            isExported: true,\r\n            scope: currentClass ? 'class' : 'global'\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse Java specific syntax\r\n   */\r\n  private parseJava(lines: string[], context: CodeContext): void {\r\n    // Simplified Java parsing - can be extended\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i].trim();\r\n      const lineNumber = i + 1;\r\n\r\n      // Parse imports\r\n      if (line.startsWith('import ')) {\r\n        context.imports.push(line);\r\n      }\r\n\r\n      // Parse classes\r\n      if (line.includes('class ')) {\r\n        const match = line.match(/class\\s+(\\w+)/);\r\n        if (match) {\r\n          context.classes.push({\r\n            name: match[1],\r\n            startLine: lineNumber,\r\n            endLine: lineNumber,\r\n            methods: [],\r\n            properties: [],\r\n            isExported: line.includes('public')\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generic parsing for unknown languages\r\n   */\r\n  private parseGeneric(lines: string[], context: CodeContext): void {\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i].trim();\r\n      const lineNumber = i + 1;\r\n\r\n      // Look for function-like patterns\r\n      const functionMatch = line.match(/(\\w+)\\s*\\(/);\r\n      if (functionMatch && !line.includes('if') && !line.includes('while') && !line.includes('for')) {\r\n        context.functions.push({\r\n          name: functionMatch[1],\r\n          startLine: lineNumber,\r\n          endLine: lineNumber,\r\n          parameters: [],\r\n          isAsync: false,\r\n          isExported: false\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract function parameters\r\n   */\r\n  private extractParameters(line: string): string[] {\r\n    const match = line.match(/\\(([^)]*)\\)/);\r\n    if (!match || !match[1]) return [];\r\n    \r\n    return match[1].split(',').map(param => param.trim()).filter(Boolean);\r\n  }\r\n\r\n  /**\r\n   * Extract Python function parameters\r\n   */\r\n  private extractPythonParameters(line: string): string[] {\r\n    const match = line.match(/\\(([^)]*)\\)/);\r\n    if (!match || !match[1]) return [];\r\n    \r\n    return match[1].split(',')\r\n      .map(param => param.trim().split(':')[0].split('=')[0].trim())\r\n      .filter(Boolean);\r\n  }\r\n\r\n  /**\r\n   * Format code analysis for display\r\n   */\r\n  private formatCodeAnalysis(context: CodeContext, filePath: string): string {\r\n    let output = `Code Analysis for ${filePath} (${context.language}):\\n\\n`;\r\n\r\n    if (context.imports.length > 0) {\r\n      output += `Imports (${context.imports.length}):\\n`;\r\n      context.imports.slice(0, 5).forEach(imp => output += `  - ${imp}\\n`);\r\n      if (context.imports.length > 5) {\r\n        output += `  ... and ${context.imports.length - 5} more\\n`;\r\n      }\r\n      output += '\\n';\r\n    }\r\n\r\n    if (context.functions.length > 0) {\r\n      output += `Functions (${context.functions.length}):\\n`;\r\n      context.functions.forEach(func => {\r\n        output += `  - ${func.name}(${func.parameters.join(', ')}) [line ${func.startLine}]${func.isAsync ? ' (async)' : ''}${func.isExported ? ' (exported)' : ''}\\n`;\r\n      });\r\n      output += '\\n';\r\n    }\r\n\r\n    if (context.classes.length > 0) {\r\n      output += `Classes (${context.classes.length}):\\n`;\r\n      context.classes.forEach(cls => {\r\n        output += `  - ${cls.name} [lines ${cls.startLine}-${cls.endLine}]${cls.isExported ? ' (exported)' : ''}\\n`;\r\n        if (cls.methods.length > 0) {\r\n          output += `    Methods: ${cls.methods.map(m => m.name).join(', ')}\\n`;\r\n        }\r\n      });\r\n      output += '\\n';\r\n    }\r\n\r\n    if (context.types.length > 0) {\r\n      output += `Types (${context.types.length}):\\n`;\r\n      context.types.forEach(type => {\r\n        output += `  - ${type.name} (${type.kind}) [line ${type.line}]${type.isExported ? ' (exported)' : ''}\\n`;\r\n      });\r\n      output += '\\n';\r\n    }\r\n\r\n    if (context.variables.length > 0) {\r\n      output += `Variables (${context.variables.length}):\\n`;\r\n      context.variables.slice(0, 10).forEach(variable => {\r\n        output += `  - ${variable.name} [line ${variable.line}] (${variable.scope})${variable.isConst ? ' (const)' : ''}${variable.isExported ? ' (exported)' : ''}\\n`;\r\n      });\r\n      if (context.variables.length > 10) {\r\n        output += `  ... and ${context.variables.length - 10} more\\n`;\r\n      }\r\n    }\r\n\r\n    return output.trim();\r\n  }\r\n\r\n  /**\r\n   * Perform refactoring operation\r\n   */\r\n  private async performRefactoring(\r\n    content: string, \r\n    context: CodeContext, \r\n    operation: RefactorOperation, \r\n    language: string\r\n  ): Promise<{ success: boolean; newContent?: string; output?: string; error?: string }> {\r\n    const lines = content.split('\\n');\r\n\r\n    switch (operation.type) {\r\n      case 'rename':\r\n        return this.performRename(lines, context, operation.target, operation.newName!);\r\n\r\n      case 'extract_function':\r\n        return this.performExtractFunction(lines, operation.startLine!, operation.endLine!, operation.newName!, language);\r\n\r\n      case 'extract_variable':\r\n        return this.performExtractVariable(lines, operation.startLine!, operation.target, operation.newName!, language);\r\n\r\n      default:\r\n        return {\r\n          success: false,\r\n          error: `Refactoring operation '${operation.type}' not yet implemented`\r\n        };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform rename refactoring\r\n   */\r\n  private performRename(\r\n    lines: string[], \r\n    context: CodeContext, \r\n    oldName: string, \r\n    newName: string\r\n  ): { success: boolean; newContent?: string; output?: string; error?: string } {\r\n    if (!this.isValidIdentifier(newName)) {\r\n      return {\r\n        success: false,\r\n        error: `'${newName}' is not a valid identifier`\r\n      };\r\n    }\r\n\r\n    let changes = 0;\r\n    const newLines = lines.map(line => {\r\n      const regex = new RegExp(`\\\\b${oldName}\\\\b`, 'g');\r\n      const newLine = line.replace(regex, (match) => {\r\n        changes++;\r\n        return newName;\r\n      });\r\n      return newLine;\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      newContent: newLines.join('\\n'),\r\n      output: `Renamed '${oldName}' to '${newName}' (${changes} occurrences)`\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Perform extract function refactoring\r\n   */\r\n  private performExtractFunction(\r\n    lines: string[], \r\n    startLine: number, \r\n    endLine: number, \r\n    functionName: string, \r\n    language: string\r\n  ): { success: boolean; newContent?: string; output?: string; error?: string } {\r\n    if (startLine < 1 || endLine > lines.length || startLine > endLine) {\r\n      return {\r\n        success: false,\r\n        error: 'Invalid line range'\r\n      };\r\n    }\r\n\r\n    const extractedLines = lines.slice(startLine - 1, endLine);\r\n    const extractedCode = extractedLines.join('\\n');\r\n\r\n    // Create function declaration\r\n    let functionDecl: string;\r\n    switch (language) {\r\n      case 'javascript':\r\n      case 'typescript':\r\n        functionDecl = `function ${functionName}() {\\n${extractedCode}\\n}`;\r\n        break;\r\n      case 'python':\r\n        functionDecl = `def ${functionName}():\\n${extractedCode.split('\\n').map(line => '    ' + line).join('\\n')}`;\r\n        break;\r\n      default:\r\n        functionDecl = `// Extracted function\\n${extractedCode}`;\r\n    }\r\n\r\n    // Replace extracted code with function call\r\n    const functionCall = language === 'python' ? `${functionName}()` : `${functionName}();`;\r\n\r\n    // Insert function and replace code\r\n    const newLines = [\r\n      ...lines.slice(0, startLine - 1),\r\n      functionCall,\r\n      ...lines.slice(endLine),\r\n      '',\r\n      functionDecl\r\n    ];\r\n\r\n    return {\r\n      success: true,\r\n      newContent: newLines.join('\\n'),\r\n      output: `Extracted function '${functionName}' from lines ${startLine}-${endLine}`\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Perform extract variable refactoring\r\n   */\r\n  private performExtractVariable(\r\n    lines: string[], \r\n    line: number, \r\n    expression: string, \r\n    variableName: string, \r\n    language: string\r\n  ): { success: boolean; newContent?: string; output?: string; error?: string } {\r\n    if (line < 1 || line > lines.length) {\r\n      return {\r\n        success: false,\r\n        error: 'Invalid line number'\r\n      };\r\n    }\r\n\r\n    const targetLine = lines[line - 1];\r\n    if (!targetLine.includes(expression)) {\r\n      return {\r\n        success: false,\r\n        error: `Expression '${expression}' not found on line ${line}`\r\n      };\r\n    }\r\n\r\n    // Create variable declaration\r\n    let variableDecl: string;\r\n    switch (language) {\r\n      case 'javascript':\r\n      case 'typescript':\r\n        variableDecl = `const ${variableName} = ${expression};`;\r\n        break;\r\n      case 'python':\r\n        variableDecl = `${variableName} = ${expression}`;\r\n        break;\r\n      default:\r\n        variableDecl = `${variableName} = ${expression}`;\r\n    }\r\n\r\n    // Replace expression with variable\r\n    const newTargetLine = targetLine.replace(expression, variableName);\r\n\r\n    const newLines = [\r\n      ...lines.slice(0, line - 1),\r\n      variableDecl,\r\n      newTargetLine,\r\n      ...lines.slice(line)\r\n    ];\r\n\r\n    return {\r\n      success: true,\r\n      newContent: newLines.join('\\n'),\r\n      output: `Extracted variable '${variableName}' for expression '${expression}'`\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Find insertion point for code\r\n   */\r\n  private findInsertionPoint(\r\n    content: string, \r\n    context: CodeContext, \r\n    location: string, \r\n    target?: string\r\n  ): { success: boolean; line?: number; indentation?: string; error?: string } {\r\n    const lines = content.split('\\n');\r\n\r\n    switch (location) {\r\n      case 'top':\r\n        // Insert after imports\r\n        const lastImportLine = Math.max(...context.imports.map(imp => \r\n          lines.findIndex(line => line.trim() === imp.trim())\r\n        ).filter(idx => idx !== -1));\r\n        \r\n        return {\r\n          success: true,\r\n          line: lastImportLine >= 0 ? lastImportLine + 2 : 0,\r\n          indentation: ''\r\n        };\r\n\r\n      case 'bottom':\r\n        return {\r\n          success: true,\r\n          line: lines.length,\r\n          indentation: ''\r\n        };\r\n\r\n      case 'before_function':\r\n      case 'after_function':\r\n        if (!target) {\r\n          return { success: false, error: 'Target function name required' };\r\n        }\r\n\r\n        const func = context.functions.find(f => f.name === target);\r\n        if (!func) {\r\n          return { success: false, error: `Function '${target}' not found` };\r\n        }\r\n\r\n        const insertLine = location === 'before_function' ? func.startLine - 1 : func.endLine;\r\n        const referenceLine = lines[func.startLine - 1];\r\n        const indentation = referenceLine.match(/^(\\s*)/)?.[1] || '';\r\n\r\n        return {\r\n          success: true,\r\n          line: insertLine,\r\n          indentation\r\n        };\r\n\r\n      case 'in_class':\r\n        if (!target) {\r\n          return { success: false, error: 'Target class name required' };\r\n        }\r\n\r\n        const cls = context.classes.find(c => c.name === target);\r\n        if (!cls) {\r\n          return { success: false, error: `Class '${target}' not found` };\r\n        }\r\n\r\n        const classLine = lines[cls.startLine - 1];\r\n        const classIndentation = classLine.match(/^(\\s*)/)?.[1] || '';\r\n        const methodIndentation = classIndentation + '  '; // Add two spaces for method indentation\r\n\r\n        return {\r\n          success: true,\r\n          line: cls.endLine - 1,\r\n          indentation: methodIndentation\r\n        };\r\n\r\n      default:\r\n        return { success: false, error: `Unknown location: ${location}` };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Format code for insertion with proper indentation\r\n   */\r\n  private formatCodeForInsertion(code: string, indentation: string, language: string): string {\r\n    const lines = code.split('\\n');\r\n    return lines.map(line => {\r\n      if (line.trim() === '') return '';\r\n      return indentation + line;\r\n    }).join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Format code content (basic formatting)\r\n   */\r\n  private async formatCodeContent(\r\n    content: string, \r\n    language: string, \r\n    options: { preserveComments?: boolean; indentSize?: number }\r\n  ): Promise<string> {\r\n    // This is a simplified formatter - in a real implementation,\r\n    // you would integrate with language-specific formatters\r\n    const indentSize = options.indentSize || 2;\r\n    const indent = ' '.repeat(indentSize);\r\n    \r\n    const lines = content.split('\\n');\r\n    const formatted: string[] = [];\r\n    let currentIndent = 0;\r\n\r\n    for (const line of lines) {\r\n      const trimmed = line.trim();\r\n      \r\n      if (trimmed === '') {\r\n        formatted.push('');\r\n        continue;\r\n      }\r\n\r\n      // Adjust indentation based on braces/brackets\r\n      if (trimmed.includes('}') || trimmed.includes(']') || trimmed.includes(')')) {\r\n        currentIndent = Math.max(0, currentIndent - 1);\r\n      }\r\n\r\n      formatted.push(indent.repeat(currentIndent) + trimmed);\r\n\r\n      if (trimmed.includes('{') || trimmed.includes('[') || trimmed.includes('(')) {\r\n        currentIndent++;\r\n      }\r\n    }\r\n\r\n    return formatted.join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Generate import statements for missing symbols\r\n   */\r\n  private async generateImportStatements(symbols: string[], language: string): Promise<string[]> {\r\n    const imports: string[] = [];\r\n\r\n    for (const symbol of symbols) {\r\n      let importStatement: string;\r\n      \r\n      switch (language) {\r\n        case 'javascript':\r\n        case 'typescript':\r\n          // This is simplified - in reality, you'd need symbol resolution\r\n          importStatement = `import { ${symbol} } from './${symbol.toLowerCase()}';`;\r\n          break;\r\n        case 'python':\r\n          importStatement = `from .${symbol.toLowerCase()} import ${symbol}`;\r\n          break;\r\n        default:\r\n          importStatement = `// Import ${symbol}`;\r\n      }\r\n\r\n      imports.push(importStatement);\r\n    }\r\n\r\n    return imports;\r\n  }\r\n\r\n  /**\r\n   * Insert imports into content\r\n   */\r\n  private insertImports(content: string, imports: string[], context: CodeContext, language: string): string {\r\n    const lines = content.split('\\n');\r\n    \r\n    // Find insertion point (after existing imports)\r\n    let insertionPoint = 0;\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i].trim();\r\n      if (language === 'javascript' || language === 'typescript') {\r\n        if (line.startsWith('import ') || (line.startsWith('const ') && line.includes('require('))) {\r\n          insertionPoint = i + 1;\r\n        }\r\n      } else if (language === 'python') {\r\n        if (line.startsWith('import ') || line.startsWith('from ')) {\r\n          insertionPoint = i + 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Insert imports\r\n    const newLines = [\r\n      ...lines.slice(0, insertionPoint),\r\n      ...imports,\r\n      ...lines.slice(insertionPoint)\r\n    ];\r\n\r\n    return newLines.join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Generate preview for refactoring\r\n   */\r\n  private generateRefactorPreview(oldContent: string, newContent: string, operation: RefactorOperation): string {\r\n    const oldLines = oldContent.split('\\n');\r\n    const newLines = newContent.split('\\n');\r\n    \r\n    let preview = `Refactoring Preview: ${operation.type}\\n`;\r\n    preview += `Target: ${operation.target}\\n`;\r\n    if (operation.newName) {\r\n      preview += `New name: ${operation.newName}\\n`;\r\n    }\r\n    preview += '\\n';\r\n\r\n    // Show first few differences\r\n    for (let i = 0; i < Math.min(oldLines.length, newLines.length, 20); i++) {\r\n      if (oldLines[i] !== newLines[i]) {\r\n        preview += `Line ${i + 1}:\\n`;\r\n        preview += `- ${oldLines[i]}\\n`;\r\n        preview += `+ ${newLines[i]}\\n`;\r\n      }\r\n    }\r\n\r\n    return preview;\r\n  }\r\n\r\n  /**\r\n   * Generate preview for insertion\r\n   */\r\n  private generateInsertionPreview(oldContent: string, newContent: string, insertLine: number): string {\r\n    const oldLines = oldContent.split('\\n');\r\n    const newLines = newContent.split('\\n');\r\n    \r\n    let preview = `Code Insertion Preview:\\n`;\r\n    preview += `Insertion point: Line ${insertLine + 1}\\n\\n`;\r\n\r\n    // Show context around insertion\r\n    const start = Math.max(0, insertLine - 3);\r\n    const end = Math.min(newLines.length, insertLine + 6);\r\n\r\n    for (let i = start; i < end; i++) {\r\n      const marker = i === insertLine ? '>>> ' : '    ';\r\n      preview += `${marker}${i + 1}: ${newLines[i]}\\n`;\r\n    }\r\n\r\n    return preview;\r\n  }\r\n\r\n  /**\r\n   * Generate preview for formatting\r\n   */\r\n  private generateFormatPreview(oldContent: string, newContent: string): string {\r\n    const oldLines = oldContent.split('\\n');\r\n    const newLines = newContent.split('\\n');\r\n    \r\n    let preview = 'Formatting Preview:\\n\\n';\r\n    let changes = 0;\r\n\r\n    for (let i = 0; i < Math.min(oldLines.length, newLines.length); i++) {\r\n      if (oldLines[i] !== newLines[i]) {\r\n        if (changes < 10) { // Show first 10 changes\r\n          preview += `Line ${i + 1}:\\n`;\r\n          preview += `- ${oldLines[i]}\\n`;\r\n          preview += `+ ${newLines[i]}\\n`;\r\n        }\r\n        changes++;\r\n      }\r\n    }\r\n\r\n    if (changes > 10) {\r\n      preview += `... and ${changes - 10} more changes\\n`;\r\n    }\r\n\r\n    return preview;\r\n  }\r\n\r\n  /**\r\n   * Check if string is valid identifier\r\n   */\r\n  private isValidIdentifier(name: string): boolean {\r\n    return /^[a-zA-Z_$][a-zA-Z0-9_$]*$/.test(name);\r\n  }\r\n}","import * as ops from \"fs-extra\";\r\n\r\nconst pathExists = async (filePath: string): Promise<boolean> => {\r\n  try {\r\n    await ops.promises.access(filePath, ops.constants.F_OK);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n\r\n\r\nimport * as path from \"path\";\r\nimport { ToolResult } from \"../../types/index.js\";\r\nimport { ConfirmationService } from \"../../utils/confirmation-service.js\";\r\n\r\nexport interface HistoryEntry {\r\n  id: string;\r\n  timestamp: Date;\r\n  operation: OperationType;\r\n  description: string;\r\n  rollbackData: RollbackData;\r\n  metadata: OperationMetadata;\r\n}\r\n\r\nexport interface OperationMetadata {\r\n  user?: string;\r\n  tool: string;\r\n  sessionId?: string;\r\n  filesAffected: string[];\r\n  operationSize: 'small' | 'medium' | 'large';\r\n  estimatedTime?: number;\r\n}\r\n\r\nexport interface RollbackData {\r\n  type: 'file_operations' | 'multi_file' | 'refactor' | 'search_replace';\r\n  files: FileSnapshot[];\r\n  directories?: DirectorySnapshot[];\r\n  customData?: any;\r\n}\r\n\r\nexport interface FileSnapshot {\r\n  filePath: string;\r\n  existed: boolean;\r\n  content?: string;\r\n  permissions?: string;\r\n  lastModified?: Date;\r\n  size?: number;\r\n}\r\n\r\nexport interface DirectorySnapshot {\r\n  dirPath: string;\r\n  existed: boolean;\r\n  permissions?: string;\r\n  children?: string[];\r\n}\r\n\r\nexport type OperationType = \r\n  | 'file_create' \r\n  | 'file_edit' \r\n  | 'file_delete' \r\n  | 'file_rename' \r\n  | 'file_move'\r\n  | 'multi_file_edit'\r\n  | 'refactor'\r\n  | 'search_replace'\r\n  | 'directory_create'\r\n  | 'directory_delete'\r\n  | 'bulk_operation';\r\n\r\nexport interface HistoryOptions {\r\n  maxEntries?: number;\r\n  maxAge?: number; // in milliseconds\r\n  excludePatterns?: string[];\r\n  autoCleanup?: boolean;\r\n}\r\n\r\nexport class OperationHistoryTool {\r\n  private history: HistoryEntry[] = [];\r\n  private confirmationService = ConfirmationService.getInstance();\r\n  private currentPosition = -1; // For undo/redo navigation\r\n  private options: HistoryOptions;\r\n  private historyFile: string;\r\n\r\n  constructor(options: HistoryOptions = {}) {\r\n    this.options = {\r\n      maxEntries: 100,\r\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\r\n      excludePatterns: ['node_modules/**', '.git/**', 'dist/**', 'build/**'],\r\n      autoCleanup: true,\r\n      ...options\r\n    };\r\n\r\n    // History file in user's home directory\r\n    const homeDir = process.env.HOME || process.env.USERPROFILE || '';\r\n    this.historyFile = path.join(homeDir, '.grok', 'operation-history.json');\r\n    \r\n    this.loadHistory();\r\n    \r\n    if (this.options.autoCleanup) {\r\n      this.cleanupOldEntries();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Record a new operation in history\r\n   */\r\n  async recordOperation(\r\n    operation: OperationType,\r\n    description: string,\r\n    files: string[],\r\n    rollbackData: RollbackData,\r\n    metadata: Partial<OperationMetadata> = {}\r\n  ): Promise<ToolResult> {\r\n    try {\r\n      // Create snapshots of affected files before recording\r\n      const fileSnapshots = await this.createFileSnapshots(files);\r\n      \r\n      const entry: HistoryEntry = {\r\n        id: this.generateId(),\r\n        timestamp: new Date(),\r\n        operation,\r\n        description,\r\n        rollbackData: {\r\n          ...rollbackData,\r\n          files: fileSnapshots\r\n        },\r\n        metadata: {\r\n          tool: 'grok-cli',\r\n          filesAffected: files,\r\n          operationSize: this.determineOperationSize(files, rollbackData),\r\n          ...metadata\r\n        }\r\n      };\r\n\r\n      // Remove any entries after current position (when undoing and then making new changes)\r\n      if (this.currentPosition < this.history.length - 1) {\r\n        this.history = this.history.slice(0, this.currentPosition + 1);\r\n      }\r\n\r\n      this.history.push(entry);\r\n      this.currentPosition = this.history.length - 1;\r\n\r\n      // Enforce max entries limit\r\n      if (this.history.length > this.options.maxEntries!) {\r\n        this.history = this.history.slice(-this.options.maxEntries!);\r\n        this.currentPosition = this.history.length - 1;\r\n      }\r\n\r\n      await this.saveHistory();\r\n\r\n      return {\r\n        success: true,\r\n        output: `Operation recorded: ${description} (ID: ${entry.id})`\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error recording operation: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Undo the last operation\r\n   */\r\n  async undo(): Promise<ToolResult> {\r\n    try {\r\n      if (this.currentPosition < 0) {\r\n        return {\r\n          success: false,\r\n          error: \"No operations to undo\"\r\n        };\r\n      }\r\n\r\n      const entry = this.history[this.currentPosition];\r\n      \r\n      // Request confirmation for potentially dangerous operations\r\n      if (this.isDangerousOperation(entry.operation)) {\r\n        const sessionFlags = this.confirmationService.getSessionFlags();\r\n        if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n          const preview = this.generateUndoPreview(entry);\r\n          const confirmationResult = await this.confirmationService.requestConfirmation(\r\n            {\r\n              operation: `Undo: ${entry.description}`,\r\n              filename: entry.metadata.filesAffected.join(', '),\r\n              showVSCodeOpen: false,\r\n              content: preview\r\n            },\r\n            \"file\"\r\n          );\r\n\r\n          if (!confirmationResult.confirmed) {\r\n            return {\r\n              success: false,\r\n              error: confirmationResult.feedback || \"Undo operation cancelled by user\"\r\n            };\r\n          }\r\n        }\r\n      }\r\n\r\n      // Perform the undo\r\n      const result = await this.performUndo(entry);\r\n      if (!result.success) {\r\n        return result;\r\n      }\r\n\r\n      this.currentPosition--;\r\n\r\n      return {\r\n        success: true,\r\n        output: `Undone: ${entry.description} (${new Date(entry.timestamp).toLocaleString()})`\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error during undo: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Redo the next operation\r\n   */\r\n  async redo(): Promise<ToolResult> {\r\n    try {\r\n      if (this.currentPosition >= this.history.length - 1) {\r\n        return {\r\n          success: false,\r\n          error: \"No operations to redo\"\r\n        };\r\n      }\r\n\r\n      const nextPosition = this.currentPosition + 1;\r\n      const entry = this.history[nextPosition];\r\n\r\n      // Request confirmation for potentially dangerous operations\r\n      if (this.isDangerousOperation(entry.operation)) {\r\n        const sessionFlags = this.confirmationService.getSessionFlags();\r\n        if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n          const preview = this.generateRedoPreview(entry);\r\n          const confirmationResult = await this.confirmationService.requestConfirmation(\r\n            {\r\n              operation: `Redo: ${entry.description}`,\r\n              filename: entry.metadata.filesAffected.join(', '),\r\n              showVSCodeOpen: false,\r\n              content: preview\r\n            },\r\n            \"file\"\r\n          );\r\n\r\n          if (!confirmationResult.confirmed) {\r\n            return {\r\n              success: false,\r\n              error: confirmationResult.feedback || \"Redo operation cancelled by user\"\r\n            };\r\n          }\r\n        }\r\n      }\r\n\r\n      // Perform the redo (which is actually re-applying the original operation)\r\n      const result = await this.performRedo(entry);\r\n      if (!result.success) {\r\n        return result;\r\n      }\r\n\r\n      this.currentPosition = nextPosition;\r\n\r\n      return {\r\n        success: true,\r\n        output: `Redone: ${entry.description} (${new Date(entry.timestamp).toLocaleString()})`\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error during redo: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show operation history\r\n   */\r\n  async showHistory(limit: number = 10): Promise<ToolResult> {\r\n    try {\r\n      if (this.history.length === 0) {\r\n        return {\r\n          success: true,\r\n          output: \"No operations in history\"\r\n        };\r\n      }\r\n\r\n      const recentEntries = this.history.slice(-limit).reverse();\r\n      let output = `Operation History (last ${Math.min(limit, this.history.length)} entries):\\n\\n`;\r\n\r\n      for (const [index, entry] of recentEntries.entries()) {\r\n        const position = this.history.length - index;\r\n        const isCurrent = position - 1 === this.currentPosition;\r\n        const marker = isCurrent ? '→ ' : '  ';\r\n        \r\n        output += `${marker}${position}. ${entry.description}\\n`;\r\n        output += `   ${entry.operation} | ${new Date(entry.timestamp).toLocaleString()}\\n`;\r\n        output += `   Files: ${entry.metadata.filesAffected.slice(0, 3).join(', ')}`;\r\n        \r\n        if (entry.metadata.filesAffected.length > 3) {\r\n          output += ` (+${entry.metadata.filesAffected.length - 3} more)`;\r\n        }\r\n        \r\n        output += `\\n   ID: ${entry.id}\\n\\n`;\r\n      }\r\n\r\n      if (this.history.length > limit) {\r\n        output += `... and ${this.history.length - limit} older entries\\n`;\r\n      }\r\n\r\n      output += `\\nCurrent position: ${this.currentPosition + 1}/${this.history.length}`;\r\n\r\n      return {\r\n        success: true,\r\n        output: output.trim()\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error showing history: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Go to a specific point in history\r\n   */\r\n  async goToHistoryPoint(entryId: string): Promise<ToolResult> {\r\n    try {\r\n      const entryIndex = this.history.findIndex(entry => entry.id === entryId);\r\n      if (entryIndex === -1) {\r\n        return {\r\n          success: false,\r\n          error: `Operation with ID ${entryId} not found in history`\r\n        };\r\n      }\r\n\r\n      const targetPosition = entryIndex;\r\n      \r\n      if (targetPosition === this.currentPosition) {\r\n        return {\r\n          success: true,\r\n          output: \"Already at the specified history point\"\r\n        };\r\n      }\r\n\r\n      // Determine if we need to undo or redo operations\r\n      const operations: string[] = [];\r\n      \r\n      if (targetPosition < this.currentPosition) {\r\n        // Need to undo operations\r\n        for (let i = this.currentPosition; i > targetPosition; i--) {\r\n          const undoResult = await this.undo();\r\n          if (!undoResult.success) {\r\n            return undoResult;\r\n          }\r\n          operations.push(`Undone: ${this.history[i].description}`);\r\n        }\r\n      } else {\r\n        // Need to redo operations\r\n        for (let i = this.currentPosition; i < targetPosition; i++) {\r\n          const redoResult = await this.redo();\r\n          if (!redoResult.success) {\r\n            return redoResult;\r\n          }\r\n          operations.push(`Redone: ${this.history[i + 1].description}`);\r\n        }\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        output: `Moved to history point ${entryId}:\\n${operations.join('\\n')}`\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error navigating to history point: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear operation history\r\n   */\r\n  async clearHistory(): Promise<ToolResult> {\r\n    try {\r\n      // Request confirmation\r\n      const sessionFlags = this.confirmationService.getSessionFlags();\r\n      if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\r\n        const confirmationResult = await this.confirmationService.requestConfirmation(\r\n          {\r\n            operation: `Clear operation history (${this.history.length} entries)`,\r\n            filename: 'operation history',\r\n            showVSCodeOpen: false,\r\n            content: `This will permanently delete all ${this.history.length} recorded operations.\\nThis action cannot be undone.`\r\n          },\r\n          \"file\"\r\n        );\r\n\r\n        if (!confirmationResult.confirmed) {\r\n          return {\r\n            success: false,\r\n            error: confirmationResult.feedback || \"Clear history cancelled by user\"\r\n          };\r\n        }\r\n      }\r\n\r\n      this.history = [];\r\n      this.currentPosition = -1;\r\n      await this.saveHistory();\r\n\r\n      return {\r\n        success: true,\r\n        output: \"Operation history cleared\"\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error clearing history: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create snapshots of files before operation\r\n   */\r\n  private async createFileSnapshots(files: string[]): Promise<FileSnapshot[]> {\r\n    const snapshots: FileSnapshot[] = [];\r\n\r\n    for (const filePath of files) {\r\n      try {\r\n        const resolvedPath = path.resolve(filePath);\r\n        const exists = await pathExists(resolvedPath);\r\n\r\n        const snapshot: FileSnapshot = {\r\n          filePath: resolvedPath,\r\n          existed: exists\r\n        };\r\n\r\n        if (exists) {\r\n          const stats = await ops.promises.stat(resolvedPath);\r\n          \r\n          if (stats.isFile() && this.shouldSnapshotFile(resolvedPath)) {\r\n            snapshot.content = await ops.promises.readFile(resolvedPath, 'utf-8');\r\n            snapshot.size = stats.size;\r\n            snapshot.lastModified = stats.mtime;\r\n            snapshot.permissions = stats.mode.toString(8);\r\n          }\r\n        }\r\n\r\n        snapshots.push(snapshot);\r\n      } catch (error) {\r\n        // If we can't snapshot a file, record it as non-existent\r\n        snapshots.push({\r\n          filePath: path.resolve(filePath),\r\n          existed: false\r\n        });\r\n      }\r\n    }\r\n\r\n    return snapshots;\r\n  }\r\n\r\n  /**\r\n   * Check if file should be snapshotted (based on size and type)\r\n   */\r\n  private shouldSnapshotFile(filePath: string): boolean {\r\n    // Skip large files (> 1MB)\r\n    try {\r\n      const stats = ops.statSync(filePath);\r\n      if (stats.size > 1024 * 1024) {\r\n        return false;\r\n      }\r\n    } catch {\r\n      return false;\r\n    }\r\n\r\n    // Skip binary files\r\n    const ext = path.extname(filePath).toLowerCase();\r\n    const binaryExtensions = [\r\n      '.exe', '.dll', '.so', '.dylib', '.bin',\r\n      '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.ico',\r\n      '.mp3', '.mp4', '.avi', '.mkv', '.mov',\r\n      '.zip', '.tar', '.gz', '.rar', '.7z',\r\n      '.pdf', '.doc', '.docx', '.xls', '.xlsx'\r\n    ];\r\n\r\n    if (binaryExtensions.includes(ext)) {\r\n      return false;\r\n    }\r\n\r\n    // Skip files matching exclude patterns\r\n    for (const pattern of this.options.excludePatterns || []) {\r\n      if (this.matchesPattern(filePath, pattern)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Perform undo operation\r\n   */\r\n  private async performUndo(entry: HistoryEntry): Promise<ToolResult> {\r\n    try {\r\n      const rollbackData = entry.rollbackData;\r\n\r\n      switch (rollbackData.type) {\r\n        case 'file_operations':\r\n          return await this.undoFileOperations(rollbackData.files);\r\n        \r\n        case 'multi_file':\r\n          return await this.undoMultiFileOperation(rollbackData.files);\r\n        \r\n        case 'refactor':\r\n          return await this.undoRefactorOperation(rollbackData.files, rollbackData.customData);\r\n        \r\n        case 'search_replace':\r\n          return await this.undoSearchReplaceOperation(rollbackData.files);\r\n        \r\n        default:\r\n          return {\r\n            success: false,\r\n            error: `Unknown rollback type: ${rollbackData.type}`\r\n          };\r\n      }\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        error: `Error performing undo: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform redo operation\r\n   */\r\n  private async performRedo(entry: HistoryEntry): Promise<ToolResult> {\r\n    // For redo, we need to re-apply the changes\r\n    // This is complex because we need to store the \"forward\" changes as well\r\n    // For now, this is a simplified implementation\r\n    return {\r\n      success: false,\r\n      error: \"Redo functionality requires storing forward changes - not yet implemented\"\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Undo file operations\r\n   */\r\n  private async undoFileOperations(fileSnapshots: FileSnapshot[]): Promise<ToolResult> {\r\n    const restored: string[] = [];\r\n    const errors: string[] = [];\r\n\r\n    for (const snapshot of fileSnapshots) {\r\n      try {\r\n        const currentExists = await pathExists(snapshot.filePath);\r\n\r\n        if (snapshot.existed && snapshot.content !== undefined) {\r\n          // Restore file content\r\n          await ops.ensureDir(path.dirname(snapshot.filePath));\r\n          await ops.promises.writeFile(snapshot.filePath, snapshot.content, 'utf-8');\r\n          \r\n          if (snapshot.permissions) {\r\n            await ops.promises.chmod(snapshot.filePath, parseInt(snapshot.permissions, 8));\r\n          }\r\n          \r\n          restored.push(`Restored: ${snapshot.filePath}`);\r\n        } else if (!snapshot.existed && currentExists) {\r\n          // Remove file that didn't exist before\r\n          await ops.promises.rm(snapshot.filePath);\r\n          restored.push(`Removed: ${snapshot.filePath}`);\r\n        }\r\n      } catch (error: any) {\r\n        errors.push(`Failed to restore ${snapshot.filePath}: ${error.message}`);\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0 && restored.length === 0) {\r\n      return {\r\n        success: false,\r\n        error: `Undo failed:\\n${errors.join('\\n')}`\r\n      };\r\n    }\r\n\r\n    let output = `Undo completed:\\n${restored.join('\\n')}`;\r\n    if (errors.length > 0) {\r\n      output += `\\n\\nWarnings:\\n${errors.join('\\n')}`;\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      output\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Undo multi-file operation\r\n   */\r\n  private async undoMultiFileOperation(fileSnapshots: FileSnapshot[]): Promise<ToolResult> {\r\n    // Similar to undoFileOperations but with transaction-like behavior\r\n    return await this.undoFileOperations(fileSnapshots);\r\n  }\r\n\r\n  /**\r\n   * Undo refactor operation\r\n   */\r\n  private async undoRefactorOperation(fileSnapshots: FileSnapshot[], customData: any): Promise<ToolResult> {\r\n    // Refactor operations can be more complex and might need custom undo logic\r\n    return await this.undoFileOperations(fileSnapshots);\r\n  }\r\n\r\n  /**\r\n   * Undo search and replace operation\r\n   */\r\n  private async undoSearchReplaceOperation(fileSnapshots: FileSnapshot[]): Promise<ToolResult> {\r\n    return await this.undoFileOperations(fileSnapshots);\r\n  }\r\n\r\n  /**\r\n   * Generate undo preview\r\n   */\r\n  private generateUndoPreview(entry: HistoryEntry): string {\r\n    let preview = `Undo Preview: ${entry.description}\\n`;\r\n    preview += `Operation: ${entry.operation}\\n`;\r\n    preview += `Timestamp: ${new Date(entry.timestamp).toLocaleString()}\\n`;\r\n    preview += `Files affected: ${entry.metadata.filesAffected.length}\\n\\n`;\r\n\r\n    preview += \"Files to be restored:\\n\";\r\n    for (const file of entry.rollbackData.files.slice(0, 10)) {\r\n      if (file.existed) {\r\n        preview += `  - Restore: ${file.filePath}\\n`;\r\n      } else {\r\n        preview += `  - Remove: ${file.filePath}\\n`;\r\n      }\r\n    }\r\n\r\n    if (entry.rollbackData.files.length > 10) {\r\n      preview += `  ... and ${entry.rollbackData.files.length - 10} more files\\n`;\r\n    }\r\n\r\n    return preview;\r\n  }\r\n\r\n  /**\r\n   * Generate redo preview\r\n   */\r\n  private generateRedoPreview(entry: HistoryEntry): string {\r\n    let preview = `Redo Preview: ${entry.description}\\n`;\r\n    preview += `Operation: ${entry.operation}\\n`;\r\n    preview += `Timestamp: ${new Date(entry.timestamp).toLocaleString()}\\n`;\r\n    preview += `Files affected: ${entry.metadata.filesAffected.length}\\n\\n`;\r\n\r\n    preview += \"This will re-apply the original operation.\\n\";\r\n    preview += \"Files to be modified:\\n\";\r\n    for (const filePath of entry.metadata.filesAffected.slice(0, 10)) {\r\n      preview += `  - ${filePath}\\n`;\r\n    }\r\n\r\n    if (entry.metadata.filesAffected.length > 10) {\r\n      preview += `  ... and ${entry.metadata.filesAffected.length - 10} more files\\n`;\r\n    }\r\n\r\n    return preview;\r\n  }\r\n\r\n  /**\r\n   * Check if operation is potentially dangerous\r\n   */\r\n  private isDangerousOperation(operation: OperationType): boolean {\r\n    const dangerousOps = ['file_delete', 'directory_delete', 'bulk_operation'];\r\n    return dangerousOps.includes(operation);\r\n  }\r\n\r\n  /**\r\n   * Determine operation size\r\n   */\r\n  private determineOperationSize(files: string[], rollbackData: RollbackData): 'small' | 'medium' | 'large' {\r\n    if (files.length <= 3) return 'small';\r\n    if (files.length <= 10) return 'medium';\r\n    return 'large';\r\n  }\r\n\r\n  /**\r\n   * Generate unique ID\r\n   */\r\n  private generateId(): string {\r\n    return `op_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Pattern matching utility\r\n   */\r\n  private matchesPattern(filePath: string, pattern: string): boolean {\r\n    const regexPattern = pattern\r\n      .replace(/\\./g, '\\\\.')\r\n      .replace(/\\*\\*/g, '.*')\r\n      .replace(/\\*/g, '[^/]*')\r\n      .replace(/\\?/g, '.');\r\n    \r\n    const regex = new RegExp(`^${regexPattern}$`, 'i');\r\n    return regex.test(filePath);\r\n  }\r\n\r\n  /**\r\n   * Clean up old entries\r\n   */\r\n  private cleanupOldEntries(): void {\r\n    if (!this.options.maxAge) return;\r\n\r\n    const cutoffTime = Date.now() - this.options.maxAge;\r\n    const originalLength = this.history.length;\r\n    \r\n    this.history = this.history.filter(entry => \r\n      entry.timestamp.getTime() > cutoffTime\r\n    );\r\n\r\n    // Adjust current position\r\n    const removedCount = originalLength - this.history.length;\r\n    this.currentPosition = Math.max(-1, this.currentPosition - removedCount);\r\n  }\r\n\r\n  /**\r\n   * Load history from file\r\n   */\r\n  private async loadHistory(): Promise<void> {\r\n    try {\r\n      if (await pathExists(this.historyFile)) {\r\n        const data = await ops.promises.readFile(this.historyFile, 'utf-8');\r\n        const parsed = JSON.parse(data);\r\n        \r\n        this.history = parsed.entries.map((entry: any) => ({\r\n          ...entry,\r\n          timestamp: new Date(entry.timestamp)\r\n        }));\r\n        \r\n        this.currentPosition = parsed.currentPosition || this.history.length - 1;\r\n      }\r\n    } catch (error) {\r\n      // If we can't load history, start fresh\r\n      this.history = [];\r\n      this.currentPosition = -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save history to file\r\n   */\r\n  private async saveHistory(): Promise<void> {\r\n    try {\r\n      await ops.ensureDir(path.dirname(this.historyFile));\r\n      \r\n      const data = {\r\n        entries: this.history,\r\n        currentPosition: this.currentPosition,\r\n        lastUpdated: new Date().toISOString()\r\n      };\r\n      \r\n      await ops.promises.writeFile(this.historyFile, JSON.stringify(data, null, 2), 'utf-8');\r\n    } catch (error) {\r\n      // Silently ignore save errors to avoid disrupting operations\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current history status\r\n   */\r\n  getStatus(): { totalEntries: number; currentPosition: number; canUndo: boolean; canRedo: boolean } {\r\n    return {\r\n      totalEntries: this.history.length,\r\n      currentPosition: this.currentPosition,\r\n      canUndo: this.currentPosition >= 0,\r\n      canRedo: this.currentPosition < this.history.length - 1\r\n    };\r\n  }\r\n}","import { ToolResult } from \"../../types/index.js\";\r\nimport { SymbolInfo } from \"./types.js\";\r\nimport { CodeIntelligenceEngine } from \"./engine.js\";\r\nimport Fuse from \"fuse.js\";\r\nimport * as ops from \"fs\";\r\nimport { glob } from \"glob\";\r\n\r\nexport interface SymbolReference {\r\n  symbol: SymbolInfo;\r\n  filePath: string;\r\n  usages: SymbolUsage[];\r\n}\r\n\r\nexport interface SymbolUsage {\r\n  line: number;\r\n  column: number;\r\n  context: string;\r\n  type: 'definition' | 'call' | 'reference' | 'import' | 'export';\r\n}\r\n\r\nexport interface SearchResult {\r\n  query: string;\r\n  totalMatches: number;\r\n  symbols: SymbolReference[];\r\n  searchTime: number;\r\n  scope: {\r\n    filesSearched: number;\r\n    symbolsIndexed: number;\r\n  };\r\n}\r\n\r\nexport interface CrossReference {\r\n  symbol: string;\r\n  definitionFile: string;\r\n  usageFiles: string[];\r\n  importedBy: string[];\r\n  exportedTo: string[];\r\n}\r\n\r\nexport class SymbolSearchTool {\r\n  name = \"symbol_search\";\r\n  description = \"Search for symbols (functions, classes, variables) across the codebase with fuzzy matching and cross-references\";\r\n\r\n  private intelligenceEngine: CodeIntelligenceEngine;\r\n  private symbolIndex: Map<string, SymbolReference[]> = new Map();\r\n  private lastIndexTime: number = 0;\r\n  private indexCacheDuration = 5 * 60 * 1000; // 5 minutes\r\n\r\n  constructor(intelligenceEngine: CodeIntelligenceEngine) {\r\n    this.intelligenceEngine = intelligenceEngine;\r\n  }\r\n\r\n  async execute(args: any): Promise<ToolResult> {\r\n    try {\r\n      const {\r\n        query,\r\n        searchPath = process.cwd(),\r\n        symbolTypes = ['function', 'class', 'variable', 'interface', 'enum', 'type'],\r\n        includeUsages = false,\r\n        fuzzyMatch = true,\r\n        caseSensitive = false,\r\n        maxResults = 50,\r\n        filePatterns = ['**/*.{ts,tsx,js,jsx,py}'],\r\n        excludePatterns = ['**/node_modules/**', '**/dist/**', '**/.git/**'],\r\n        indexCache = true\r\n      } = args;\r\n\r\n      if (!query) {\r\n        throw new Error(\"Search query is required\");\r\n      }\r\n\r\n      const startTime = Date.now();\r\n\r\n      // Build or refresh symbol index\r\n      if (!indexCache || this.shouldRebuildIndex()) {\r\n        await this.buildSymbolIndex(searchPath, filePatterns, excludePatterns, symbolTypes);\r\n      }\r\n\r\n      // Perform search\r\n      const results = await this.searchSymbols(\r\n        query,\r\n        symbolTypes,\r\n        fuzzyMatch,\r\n        caseSensitive,\r\n        maxResults,\r\n        includeUsages\r\n      );\r\n\r\n      const searchTime = Date.now() - startTime;\r\n\r\n      return {\r\n        success: true,\r\n        output: JSON.stringify({\r\n          ...results,\r\n          searchTime\r\n        }, null, 2)\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : String(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  private shouldRebuildIndex(): boolean {\r\n    return Date.now() - this.lastIndexTime > this.indexCacheDuration;\r\n  }\r\n\r\n  private async buildSymbolIndex(\r\n    searchPath: string,\r\n    filePatterns: string[],\r\n    excludePatterns: string[],\r\n    symbolTypes: string[]\r\n  ): Promise<void> {\r\n    this.symbolIndex.clear();\r\n\r\n    // Find all source files\r\n    const allFiles: string[] = [];\r\n    for (const pattern of filePatterns) {\r\n      const files = await glob(pattern, {\r\n        cwd: searchPath,\r\n        absolute: true,\r\n        ignore: excludePatterns\r\n      });\r\n      allFiles.push(...files);\r\n    }\r\n\r\n    // Parse each file and extract symbols\r\n    for (const filePath of allFiles) {\r\n      try {\r\n        // Use the intelligence engine to get symbols\r\n        const symbols = this.intelligenceEngine.getFileSymbols(filePath);\r\n\r\n        // Filter by symbol types if needed\r\n        const filteredSymbols = symbols.filter(symbol => symbolTypes.includes(symbol.type));\r\n\r\n        for (const symbol of filteredSymbols) {\r\n          const symbolRef: SymbolReference = {\r\n            symbol,\r\n            filePath,\r\n            usages: []\r\n          };\r\n\r\n          // Index by symbol name\r\n          const existing = this.symbolIndex.get(symbol.name) || [];\r\n          existing.push(symbolRef);\r\n          this.symbolIndex.set(symbol.name, existing);\r\n\r\n          // Index by type for broader searches\r\n          const typeKey = `type:${symbol.type}`;\r\n          const typeExisting = this.symbolIndex.get(typeKey) || [];\r\n          typeExisting.push(symbolRef);\r\n          this.symbolIndex.set(typeKey, typeExisting);\r\n        }\r\n      } catch (error) {\r\n        // Skip files that can't be parsed\r\n        console.warn(`Failed to parse ${filePath}: ${error}`);\r\n      }\r\n    }\r\n\r\n    this.lastIndexTime = Date.now();\r\n  }\r\n\r\n  private async searchSymbols(\r\n    query: string,\r\n    symbolTypes: string[],\r\n    fuzzyMatch: boolean,\r\n    caseSensitive: boolean,\r\n    maxResults: number,\r\n    includeUsages: boolean\r\n  ): Promise<SearchResult> {\r\n    const allSymbols: SymbolReference[] = [];\r\n\r\n    // Collect all indexed symbols\r\n    for (const refs of this.symbolIndex.values()) {\r\n      allSymbols.push(...refs);\r\n    }\r\n\r\n    // Filter by symbol types\r\n    const filteredSymbols = allSymbols.filter(ref =>\r\n      symbolTypes.includes(ref.symbol.type)\r\n    );\r\n\r\n    let matches: SymbolReference[] = [];\r\n\r\n    if (fuzzyMatch) {\r\n      // Use Fuse.js for fuzzy searching\r\n      const fuse = new Fuse(filteredSymbols, {\r\n        keys: [\r\n          { name: 'symbol.name', weight: 0.7 },\r\n          { name: 'symbol.type', weight: 0.2 },\r\n          { name: 'filePath', weight: 0.1 }\r\n        ],\r\n        threshold: 0.4,\r\n        includeScore: true,\r\n        includeMatches: true,\r\n        isCaseSensitive: caseSensitive\r\n      });\r\n\r\n      const fuseResults = fuse.search(query);\r\n      matches = fuseResults.map(result => result.item);\r\n    } else {\r\n      // Exact string matching\r\n      const queryLower = caseSensitive ? query : query.toLowerCase();\r\n      matches = filteredSymbols.filter(ref => {\r\n        const symbolName = caseSensitive ? ref.symbol.name : ref.symbol.name.toLowerCase();\r\n        return symbolName.includes(queryLower);\r\n      });\r\n    }\r\n\r\n    // Limit results\r\n    matches = matches.slice(0, maxResults);\r\n\r\n    // Optionally find usages\r\n    if (includeUsages) {\r\n      for (const match of matches) {\r\n        match.usages = await this.findSymbolUsages(match);\r\n      }\r\n    }\r\n\r\n    return {\r\n      query,\r\n      totalMatches: matches.length,\r\n      symbols: matches,\r\n      searchTime: 0, // Will be set by caller\r\n      scope: {\r\n        filesSearched: this.getUniqueFiles(allSymbols).length,\r\n        symbolsIndexed: allSymbols.length\r\n      }\r\n    };\r\n  }\r\n\r\n  private async findSymbolUsages(symbolRef: SymbolReference): Promise<SymbolUsage[]> {\r\n    const usages: SymbolUsage[] = [];\r\n\r\n    try {\r\n      const content = await ops.promises.readFile(symbolRef.filePath, 'utf-8');\r\n      const lines = content.split('\\n');\r\n\r\n      // Simple text-based usage finding\r\n      // TODO: Use AST analysis for more accurate results\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const line = lines[i];\r\n        const symbolName = symbolRef.symbol.name;\r\n\r\n        let index = 0;\r\n        while ((index = line.indexOf(symbolName, index)) !== -1) {\r\n          // Skip if this is the definition itself\r\n          if (i === symbolRef.symbol.startPosition.row) {\r\n            index += symbolName.length;\r\n            continue;\r\n          }\r\n\r\n          // Determine usage type based on context\r\n          let usageType: SymbolUsage['type'] = 'reference';\r\n\r\n          if (line.includes('import') && line.includes(symbolName)) {\r\n            usageType = 'import';\r\n          } else if (line.includes('export') && line.includes(symbolName)) {\r\n            usageType = 'export';\r\n          } else if (line.includes(symbolName + '(')) {\r\n            usageType = 'call';\r\n          }\r\n\r\n          usages.push({\r\n            line: i,\r\n            column: index,\r\n            context: line.trim(),\r\n            type: usageType\r\n          });\r\n\r\n          index += symbolName.length;\r\n        }\r\n      }\r\n    } catch {\r\n      // Skip if file can't be read\r\n    }\r\n\r\n    return usages;\r\n  }\r\n\r\n  private getUniqueFiles(symbols: SymbolReference[]): string[] {\r\n    const files = new Set(symbols.map(ref => ref.filePath));\r\n    return Array.from(files);\r\n  }\r\n\r\n  async findCrossReferences(symbolName: string, searchPath: string = process.cwd()): Promise<CrossReference[]> {\r\n    const crossRefs: CrossReference[] = [];\r\n\r\n    // Find all occurrences of the symbol\r\n    const searchResult = await this.execute({\r\n      query: symbolName,\r\n      searchPath,\r\n      includeUsages: true,\r\n      fuzzyMatch: false,\r\n      caseSensitive: true\r\n    });\r\n\r\n    if (!searchResult.success || !searchResult.output) return [];\r\n    const parsed = JSON.parse(searchResult.output);\r\n    if (parsed.success && parsed.result.symbols) {\r\n      const symbols = parsed.result.symbols as SymbolReference[];\r\n\r\n      for (const symbolRef of symbols) {\r\n        if (symbolRef.symbol.name === symbolName) {\r\n          const definitionFile = symbolRef.filePath;\r\n          const usageFiles = symbolRef.usages\r\n            .filter(usage => usage.type === 'reference' || usage.type === 'call')\r\n            .map(() => symbolRef.filePath); // Simplified - should check other files\r\n\r\n          const importedBy = symbolRef.usages\r\n            .filter(usage => usage.type === 'import')\r\n            .map(() => symbolRef.filePath);\r\n\r\n          const exportedTo = symbolRef.usages\r\n            .filter(usage => usage.type === 'export')\r\n            .map(() => symbolRef.filePath);\r\n\r\n          crossRefs.push({\r\n            symbol: symbolName,\r\n            definitionFile,\r\n            usageFiles: [...new Set(usageFiles)],\r\n            importedBy: [...new Set(importedBy)],\r\n            exportedTo: [...new Set(exportedTo)]\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return crossRefs;\r\n  }\r\n\r\n  async findSimilarSymbols(symbolName: string, threshold: number = 0.6): Promise<SymbolReference[]> {\r\n    const allSymbols: SymbolReference[] = [];\r\n\r\n    for (const refs of this.symbolIndex.values()) {\r\n      allSymbols.push(...refs);\r\n    }\r\n\r\n    const fuse = new Fuse(allSymbols, {\r\n      keys: ['symbol.name'],\r\n      threshold,\r\n      includeScore: true\r\n    });\r\n\r\n    const results = fuse.search(symbolName);\r\n    return results.map(result => result.item);\r\n  }\r\n\r\n  async getSymbolsByType(symbolType: string, searchPath: string = process.cwd()): Promise<SymbolReference[]> {\r\n    if (!this.symbolIndex.has(`type:${symbolType}`)) {\r\n      await this.buildSymbolIndex(\r\n        searchPath,\r\n        ['**/*.{ts,tsx,js,jsx,py}'],\r\n        ['**/node_modules/**', '**/dist/**', '**/.git/**'],\r\n        [symbolType]\r\n      );\r\n    }\r\n\r\n    return this.symbolIndex.get(`type:${symbolType}`) || [];\r\n  }\r\n\r\n  clearIndex(): void {\r\n    this.symbolIndex.clear();\r\n    this.lastIndexTime = 0;\r\n  }\r\n\r\n  getIndexStats(): { symbolCount: number; fileCount: number; lastUpdated: Date } {\r\n    const allSymbols: SymbolReference[] = [];\r\n    for (const refs of this.symbolIndex.values()) {\r\n      allSymbols.push(...refs);\r\n    }\r\n\r\n    return {\r\n      symbolCount: allSymbols.length,\r\n      fileCount: this.getUniqueFiles(allSymbols).length,\r\n      lastUpdated: new Date(this.lastIndexTime)\r\n    };\r\n  }\r\n\r\n  getSchema() {\r\n    return {\r\n      type: \"object\",\r\n      properties: {\r\n        query: {\r\n          type: \"string\",\r\n          description: \"Search query for symbol names\"\r\n        },\r\n        searchPath: {\r\n          type: \"string\",\r\n          description: \"Root path to search in\",\r\n          default: \"current working directory\"\r\n        },\r\n        symbolTypes: {\r\n          type: \"array\",\r\n          items: {\r\n            type: \"string\",\r\n            enum: [\"function\", \"class\", \"variable\", \"interface\", \"enum\", \"type\", \"method\", \"property\"]\r\n          },\r\n          description: \"Types of symbols to search for\",\r\n          default: [\"function\", \"class\", \"variable\", \"interface\", \"enum\", \"type\"]\r\n        },\r\n        includeUsages: {\r\n          type: \"boolean\",\r\n          description: \"Whether to find usages of matched symbols\",\r\n          default: false\r\n        },\r\n        fuzzyMatch: {\r\n          type: \"boolean\",\r\n          description: \"Use fuzzy matching for symbol names\",\r\n          default: true\r\n        },\r\n        caseSensitive: {\r\n          type: \"boolean\",\r\n          description: \"Case sensitive search\",\r\n          default: false\r\n        },\r\n        maxResults: {\r\n          type: \"integer\",\r\n          description: \"Maximum number of results to return\",\r\n          default: 50,\r\n          minimum: 1,\r\n          maximum: 1000\r\n        },\r\n        filePatterns: {\r\n          type: \"array\",\r\n          items: { type: \"string\" },\r\n          description: \"Glob patterns for files to search\",\r\n          default: [\"**/*.{ts,tsx,js,jsx,py}\"]\r\n        },\r\n        excludePatterns: {\r\n          type: \"array\",\r\n          items: { type: \"string\" },\r\n          description: \"Glob patterns for files to exclude\",\r\n          default: [\"**/node_modules/**\", \"**/dist/**\", \"**/.git/**\"]\r\n        },\r\n        indexCache: {\r\n          type: \"boolean\",\r\n          description: \"Use cached symbol index if available\",\r\n          default: true\r\n        }\r\n      },\r\n      required: [\"query\"]\r\n    };\r\n  }\r\n}","import { ToolResult } from \"../../types/index.js\";\r\nimport { ImportInfo, ExportInfo } from \"./types.js\";\r\nimport { CodeIntelligenceEngine } from \"./engine.js\";\r\nimport * as ops from \"fs\";\r\n\r\nconst pathExists = async (filePath: string): Promise<boolean> => {\r\n  try {\r\n    await ops.promises.access(filePath, ops.constants.F_OK);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n\r\n\r\nimport path from \"path\";\r\nimport { glob } from \"glob\";\r\n\r\nexport interface DependencyNode {\r\n  filePath: string;\r\n  absolutePath: string;\r\n  imports: ImportInfo[];\r\n  exports: ExportInfo[];\r\n  dependencies: string[];\r\n  dependents: string[];\r\n  isEntryPoint: boolean;\r\n  isLeaf: boolean;\r\n  circularDependencies: string[][];\r\n}\r\n\r\nexport interface DependencyGraph {\r\n  nodes: Map<string, DependencyNode>;\r\n  entryPoints: string[];\r\n  leafNodes: string[];\r\n  circularDependencies: CircularDependency[];\r\n  unreachableFiles: string[];\r\n  statistics: DependencyStatistics;\r\n}\r\n\r\nexport interface CircularDependency {\r\n  cycle: string[];\r\n  severity: 'warning' | 'error';\r\n  type: 'direct' | 'indirect';\r\n}\r\n\r\nexport interface DependencyStatistics {\r\n  totalFiles: number;\r\n  totalDependencies: number;\r\n  averageDependencies: number;\r\n  maxDependencyDepth: number;\r\n  circularDependencyCount: number;\r\n  unreachableFileCount: number;\r\n}\r\n\r\nexport interface ModuleAnalysis {\r\n  filePath: string;\r\n  externalDependencies: string[];\r\n  internalDependencies: string[];\r\n  circularImports: string[];\r\n  unusedImports: string[];\r\n  missingDependencies: string[];\r\n  duplicateImports: string[];\r\n}\r\n\r\nexport class DependencyAnalyzerTool {\r\n  name = \"dependency_analyzer\";\r\n  description = \"Analyze import/export dependencies, detect circular dependencies, and generate dependency graphs\";\r\n\r\n  private intelligenceEngine: CodeIntelligenceEngine;\r\n\r\n  constructor(intelligenceEngine: CodeIntelligenceEngine) {\r\n    this.intelligenceEngine = intelligenceEngine;\r\n  }\r\n\r\n  async execute(args: any): Promise<ToolResult> {\r\n    try {\r\n      const {\r\n        rootPath = process.cwd(),\r\n        filePatterns = ['**/*.{ts,tsx,js,jsx}'],\r\n        excludePatterns = ['**/node_modules/**', '**/dist/**', '**/.git/**'],\r\n        includeExternals = false,\r\n        detectCircular = true,\r\n        findUnreachable = true,\r\n        generateGraph = false,\r\n        entryPoints = [],\r\n        maxDepth = 50\r\n      } = args;\r\n\r\n      if (!await pathExists(rootPath)) {\r\n        throw new Error(`Root path does not exist: ${rootPath}`);\r\n      }\r\n\r\n      // Find all source files\r\n      const sourceFiles = await this.findSourceFiles(rootPath, filePatterns, excludePatterns);\r\n\r\n      // Build dependency graph\r\n      const dependencyGraph = await this.buildDependencyGraph(\r\n        sourceFiles,\r\n        rootPath,\r\n        includeExternals,\r\n        maxDepth\r\n      );\r\n\r\n      // Detect circular dependencies\r\n      if (detectCircular) {\r\n        dependencyGraph.circularDependencies = this.detectCircularDependencies(dependencyGraph);\r\n      }\r\n\r\n      // Find unreachable files\r\n      if (findUnreachable) {\r\n        dependencyGraph.unreachableFiles = this.findUnreachableFiles(\r\n          dependencyGraph,\r\n          entryPoints.length > 0 ? entryPoints : this.inferEntryPoints(dependencyGraph)\r\n        );\r\n      }\r\n\r\n      // Calculate statistics\r\n      dependencyGraph.statistics = this.calculateStatistics(dependencyGraph);\r\n\r\n      // Format response\r\n      const result: any = {\r\n        rootPath,\r\n        totalFiles: sourceFiles.length,\r\n        entryPoints: dependencyGraph.entryPoints,\r\n        leafNodes: dependencyGraph.leafNodes,\r\n        statistics: dependencyGraph.statistics\r\n      };\r\n\r\n      if (detectCircular) {\r\n        result.circularDependencies = dependencyGraph.circularDependencies;\r\n      }\r\n\r\n      if (findUnreachable) {\r\n        result.unreachableFiles = dependencyGraph.unreachableFiles;\r\n      }\r\n\r\n      if (generateGraph) {\r\n        result.dependencyGraph = this.serializeDependencyGraph(dependencyGraph);\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        output: JSON.stringify(result, null, 2)\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : String(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  private async findSourceFiles(\r\n    rootPath: string,\r\n    filePatterns: string[],\r\n    excludePatterns: string[]\r\n  ): Promise<string[]> {\r\n    const allFiles: string[] = [];\r\n\r\n    for (const pattern of filePatterns) {\r\n      const files = await glob(pattern, {\r\n        cwd: rootPath,\r\n        absolute: true,\r\n        ignore: excludePatterns\r\n      });\r\n      allFiles.push(...files);\r\n    }\r\n\r\n    return [...new Set(allFiles)]; // Remove duplicates\r\n  }\r\n\r\n  private async buildDependencyGraph(\r\n    sourceFiles: string[],\r\n    rootPath: string,\r\n    _includeExternals: boolean,\r\n    _maxDepth: number\r\n  ): Promise<DependencyGraph> {\r\n    const graph: DependencyGraph = {\r\n      nodes: new Map(),\r\n      entryPoints: [],\r\n      leafNodes: [],\r\n      circularDependencies: [],\r\n      unreachableFiles: [],\r\n      statistics: {\r\n        totalFiles: 0,\r\n        totalDependencies: 0,\r\n        averageDependencies: 0,\r\n        maxDependencyDepth: 0,\r\n        circularDependencyCount: 0,\r\n        unreachableFileCount: 0\r\n      }\r\n    };\r\n\r\n    // Parse each file and extract imports/exports\r\n    for (const filePath of sourceFiles) {\r\n      try {\r\n        // Use the intelligence engine to get dependencies\r\n        const deps = this.intelligenceEngine.getDependencies(filePath);\r\n        const dependencies = Array.from(deps);\r\n\r\n        // For now, we'll use empty arrays for imports/exports\r\n        // The engine tracks dependencies but not the full import/export details\r\n        const imports: ImportInfo[] = [];\r\n        const exports: ExportInfo[] = [];\r\n\r\n        const node: DependencyNode = {\r\n          filePath: path.relative(rootPath, filePath),\r\n          absolutePath: filePath,\r\n          imports,\r\n          exports,\r\n          dependencies,\r\n          dependents: [],\r\n          isEntryPoint: false,\r\n          isLeaf: dependencies.length === 0,\r\n          circularDependencies: []\r\n        };\r\n\r\n        graph.nodes.set(filePath, node);\r\n      } catch (error) {\r\n        console.warn(`Failed to parse ${filePath}: ${error}`);\r\n      }\r\n    }\r\n\r\n    // Build reverse dependencies (dependents)\r\n    for (const [filePath, node] of graph.nodes) {\r\n      for (const dependency of node.dependencies) {\r\n        const depNode = graph.nodes.get(dependency);\r\n        if (depNode) {\r\n          depNode.dependents.push(filePath);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Identify entry points and leaf nodes\r\n    for (const [filePath, node] of graph.nodes) {\r\n      node.isEntryPoint = node.dependents.length === 0;\r\n      node.isLeaf = node.dependencies.length === 0;\r\n\r\n      if (node.isEntryPoint) {\r\n        graph.entryPoints.push(filePath);\r\n      }\r\n      if (node.isLeaf) {\r\n        graph.leafNodes.push(filePath);\r\n      }\r\n    }\r\n\r\n    return graph;\r\n  }\r\n\r\n  private async resolveImportPaths(\r\n    imports: ImportInfo[],\r\n    currentFile: string,\r\n    rootPath: string,\r\n    includeExternals: boolean\r\n  ): Promise<string[]> {\r\n    const dependencies: string[] = [];\r\n    const currentDir = path.dirname(currentFile);\r\n\r\n    for (const importInfo of imports) {\r\n      let resolvedPath: string | null = null;\r\n\r\n      if (importInfo.source.startsWith('.')) {\r\n        // Relative import\r\n        resolvedPath = await this.resolveRelativeImport(importInfo.source, currentDir);\r\n      } else if (importInfo.source.startsWith('/')) {\r\n        // Absolute import from root\r\n        resolvedPath = await this.resolveAbsoluteImport(importInfo.source, rootPath);\r\n      } else if (includeExternals) {\r\n        // External module\r\n        dependencies.push(importInfo.source);\r\n        continue;\r\n      } else {\r\n        // Skip external modules if not including them\r\n        continue;\r\n      }\r\n\r\n      if (resolvedPath && await pathExists(resolvedPath)) {\r\n        dependencies.push(resolvedPath);\r\n      }\r\n    }\r\n\r\n    return dependencies;\r\n  }\r\n\r\n  private async resolveRelativeImport(importPath: string, currentDir: string): Promise<string | null> {\r\n    const basePath = path.resolve(currentDir, importPath);\r\n\r\n    // Try different extensions\r\n    const extensions = ['.ts', '.tsx', '.js', '.jsx', '.json'];\r\n\r\n    for (const ext of extensions) {\r\n      const fullPath = basePath + ext;\r\n      if (await pathExists(fullPath)) {\r\n        return fullPath;\r\n      }\r\n    }\r\n\r\n    // Try index files\r\n    for (const ext of extensions) {\r\n      const indexPath = path.join(basePath, `index${ext}`);\r\n      if (await pathExists(indexPath)) {\r\n        return indexPath;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private async resolveAbsoluteImport(importPath: string, rootPath: string): Promise<string | null> {\r\n    const fullPath = path.join(rootPath, importPath.slice(1)); // Remove leading slash\r\n    return await this.resolveRelativeImport('.', path.dirname(fullPath));\r\n  }\r\n\r\n  private detectCircularDependencies(graph: DependencyGraph): CircularDependency[] {\r\n    const circularDeps: CircularDependency[] = [];\r\n    const visited = new Set<string>();\r\n    const visiting = new Set<string>();\r\n\r\n    const dfs = (filePath: string, path: string[]): void => {\r\n      if (visiting.has(filePath)) {\r\n        // Found a cycle\r\n        const cycleStart = path.indexOf(filePath);\r\n        const cycle = path.slice(cycleStart).concat([filePath]);\r\n\r\n        circularDeps.push({\r\n          cycle: cycle.map(fp => graph.nodes.get(fp)?.filePath || fp),\r\n          severity: cycle.length <= 2 ? 'error' : 'warning',\r\n          type: cycle.length <= 2 ? 'direct' : 'indirect'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (visited.has(filePath)) {\r\n        return;\r\n      }\r\n\r\n      visiting.add(filePath);\r\n      const node = graph.nodes.get(filePath);\r\n\r\n      if (node) {\r\n        for (const dependency of node.dependencies) {\r\n          if (graph.nodes.has(dependency)) {\r\n            dfs(dependency, [...path, filePath]);\r\n          }\r\n        }\r\n      }\r\n\r\n      visiting.delete(filePath);\r\n      visited.add(filePath);\r\n    };\r\n\r\n    for (const filePath of graph.nodes.keys()) {\r\n      if (!visited.has(filePath)) {\r\n        dfs(filePath, []);\r\n      }\r\n    }\r\n\r\n    return circularDeps;\r\n  }\r\n\r\n  private findUnreachableFiles(graph: DependencyGraph, entryPoints: string[]): string[] {\r\n    const reachable = new Set<string>();\r\n\r\n    const dfs = (filePath: string): void => {\r\n      if (reachable.has(filePath)) {\r\n        return;\r\n      }\r\n\r\n      reachable.add(filePath);\r\n      const node = graph.nodes.get(filePath);\r\n\r\n      if (node) {\r\n        for (const dependency of node.dependencies) {\r\n          if (graph.nodes.has(dependency)) {\r\n            dfs(dependency);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    // Start DFS from entry points\r\n    for (const entryPoint of entryPoints) {\r\n      if (graph.nodes.has(entryPoint)) {\r\n        dfs(entryPoint);\r\n      }\r\n    }\r\n\r\n    // Find unreachable files\r\n    const unreachable: string[] = [];\r\n    for (const filePath of graph.nodes.keys()) {\r\n      if (!reachable.has(filePath)) {\r\n        const node = graph.nodes.get(filePath);\r\n        unreachable.push(node?.filePath || filePath);\r\n      }\r\n    }\r\n\r\n    return unreachable;\r\n  }\r\n\r\n  private inferEntryPoints(graph: DependencyGraph): string[] {\r\n    // If no explicit entry points, use files with no dependents\r\n    if (graph.entryPoints.length > 0) {\r\n      return graph.entryPoints;\r\n    }\r\n\r\n    // Look for common entry point patterns\r\n    const commonEntryPatterns = [\r\n      /index\\.(ts|js|tsx|jsx)$/,\r\n      /main\\.(ts|js|tsx|jsx)$/,\r\n      /app\\.(ts|js|tsx|jsx)$/,\r\n      /server\\.(ts|js|tsx|jsx)$/\r\n    ];\r\n\r\n    const entryPoints: string[] = [];\r\n\r\n    for (const [filePath, node] of graph.nodes) {\r\n      const fileName = path.basename(filePath);\r\n\r\n      if (node.dependents.length === 0 ||\r\n        commonEntryPatterns.some(pattern => pattern.test(fileName))) {\r\n        entryPoints.push(filePath);\r\n      }\r\n    }\r\n\r\n    return entryPoints;\r\n  }\r\n\r\n  private calculateStatistics(graph: DependencyGraph): DependencyStatistics {\r\n    const totalFiles = graph.nodes.size;\r\n    let totalDependencies = 0;\r\n    let maxDepth = 0;\r\n\r\n    for (const node of graph.nodes.values()) {\r\n      totalDependencies += node.dependencies.length;\r\n\r\n      // Calculate depth from entry points\r\n      const depth = this.calculateNodeDepth(node.absolutePath, graph);\r\n      maxDepth = Math.max(maxDepth, depth);\r\n    }\r\n\r\n    return {\r\n      totalFiles,\r\n      totalDependencies,\r\n      averageDependencies: totalFiles > 0 ? totalDependencies / totalFiles : 0,\r\n      maxDependencyDepth: maxDepth,\r\n      circularDependencyCount: graph.circularDependencies.length,\r\n      unreachableFileCount: graph.unreachableFiles.length\r\n    };\r\n  }\r\n\r\n  private calculateNodeDepth(filePath: string, graph: DependencyGraph): number {\r\n    const visited = new Set<string>();\r\n\r\n    const dfs = (currentPath: string, depth: number): number => {\r\n      if (visited.has(currentPath)) {\r\n        return depth;\r\n      }\r\n\r\n      visited.add(currentPath);\r\n      const node = graph.nodes.get(currentPath);\r\n\r\n      if (!node || node.dependencies.length === 0) {\r\n        return depth;\r\n      }\r\n\r\n      let maxChildDepth = depth;\r\n      for (const dependency of node.dependencies) {\r\n        if (graph.nodes.has(dependency)) {\r\n          const childDepth = dfs(dependency, depth + 1);\r\n          maxChildDepth = Math.max(maxChildDepth, childDepth);\r\n        }\r\n      }\r\n\r\n      return maxChildDepth;\r\n    };\r\n\r\n    return dfs(filePath, 0);\r\n  }\r\n\r\n  private serializeDependencyGraph(graph: DependencyGraph): any {\r\n    const nodes: any[] = [];\r\n\r\n    for (const [filePath, node] of graph.nodes) {\r\n      nodes.push({\r\n        id: filePath,\r\n        filePath: node.filePath,\r\n        dependencies: node.dependencies,\r\n        dependents: node.dependents,\r\n        isEntryPoint: node.isEntryPoint,\r\n        isLeaf: node.isLeaf,\r\n        importCount: node.imports.length,\r\n        exportCount: node.exports.length\r\n      });\r\n    }\r\n\r\n    return {\r\n      nodes,\r\n      edges: this.generateEdges(graph)\r\n    };\r\n  }\r\n\r\n  private generateEdges(graph: DependencyGraph): any[] {\r\n    const edges: any[] = [];\r\n\r\n    for (const [filePath, node] of graph.nodes) {\r\n      for (const dependency of node.dependencies) {\r\n        if (graph.nodes.has(dependency)) {\r\n          edges.push({\r\n            from: filePath,\r\n            to: dependency,\r\n            type: 'dependency'\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return edges;\r\n  }\r\n\r\n  // Additional utility methods\r\n  async analyzeModule(filePath: string): Promise<ModuleAnalysis> {\r\n    // Use the intelligence engine to get dependencies\r\n    const deps = this.intelligenceEngine.getDependencies(filePath);\r\n    const rootPath = process.cwd();\r\n\r\n    const externalDependencies: string[] = [];\r\n    const internalDependencies: string[] = [];\r\n\r\n    // Classify dependencies as internal or external\r\n    for (const dep of deps) {\r\n      if (dep.startsWith('.') || dep.startsWith('/') || path.isAbsolute(dep)) {\r\n        internalDependencies.push(path.relative(rootPath, dep));\r\n      } else {\r\n        externalDependencies.push(dep);\r\n      }\r\n    }\r\n\r\n    return {\r\n      filePath: path.relative(rootPath, filePath),\r\n      externalDependencies,\r\n      internalDependencies,\r\n      circularImports: [], // TODO: Implement\r\n      unusedImports: [], // TODO: Implement with symbol usage analysis\r\n      missingDependencies: [], // TODO: Implement with file existence checks\r\n      duplicateImports: []\r\n    };\r\n  }\r\n\r\n  getSchema() {\r\n    return {\r\n      type: \"object\",\r\n      properties: {\r\n        rootPath: {\r\n          type: \"string\",\r\n          description: \"Root path to analyze dependencies from\",\r\n          default: \"current working directory\"\r\n        },\r\n        filePatterns: {\r\n          type: \"array\",\r\n          items: { type: \"string\" },\r\n          description: \"Glob patterns for files to include\",\r\n          default: [\"**/*.{ts,tsx,js,jsx}\"]\r\n        },\r\n        excludePatterns: {\r\n          type: \"array\",\r\n          items: { type: \"string\" },\r\n          description: \"Glob patterns for files to exclude\",\r\n          default: [\"**/node_modules/**\", \"**/dist/**\", \"**/.git/**\"]\r\n        },\r\n        includeExternals: {\r\n          type: \"boolean\",\r\n          description: \"Include external module dependencies\",\r\n          default: false\r\n        },\r\n        detectCircular: {\r\n          type: \"boolean\",\r\n          description: \"Detect circular dependencies\",\r\n          default: true\r\n        },\r\n        findUnreachable: {\r\n          type: \"boolean\",\r\n          description: \"Find unreachable files from entry points\",\r\n          default: true\r\n        },\r\n        generateGraph: {\r\n          type: \"boolean\",\r\n          description: \"Generate serialized dependency graph\",\r\n          default: false\r\n        },\r\n        entryPoints: {\r\n          type: \"array\",\r\n          items: { type: \"string\" },\r\n          description: \"Explicit entry point files (if not provided, will be inferred)\",\r\n          default: []\r\n        },\r\n        maxDepth: {\r\n          type: \"integer\",\r\n          description: \"Maximum dependency depth to analyze\",\r\n          default: 50,\r\n          minimum: 1,\r\n          maximum: 1000\r\n        }\r\n      }\r\n    };\r\n  }\r\n}","import { ToolResult } from \"../../types/index.js\";\r\nimport { SymbolInfo } from \"./types.js\";\r\nimport { SymbolSearchTool } from \"./symbol-search.js\";\r\nimport { DependencyAnalyzerTool } from \"./dependency-analyzer.js\";\r\nimport { CodeIntelligenceEngine } from \"./engine.js\";\r\nimport * as ops from \"fs\";\r\n\r\nconst pathExists = async (filePath: string): Promise<boolean> => {\r\n  try {\r\n    await ops.promises.access(filePath, ops.constants.F_OK);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n\r\n\r\nimport path from \"path\";\r\n\r\nexport interface CodeContext {\r\n  filePath: string;\r\n  symbols: ContextualSymbol[];\r\n  dependencies: ContextualDependency[];\r\n  relationships: CodeRelationship[];\r\n  semanticContext: SemanticContext;\r\n  codeMetrics: CodeMetrics;\r\n}\r\n\r\nexport interface ContextualSymbol extends SymbolInfo {\r\n  context: {\r\n    parentClass?: string;\r\n    parentFunction?: string;\r\n    relatedSymbols: string[];\r\n    usagePatterns: UsagePattern[];\r\n    semanticTags: string[];\r\n  };\r\n}\r\n\r\nexport interface ContextualDependency {\r\n  source: string;\r\n  type: 'internal' | 'external' | 'builtin';\r\n  usage: 'direct' | 'indirect';\r\n  importedSymbols: string[];\r\n  usageContext: string[];\r\n  isCircular: boolean;\r\n}\r\n\r\nexport interface CodeRelationship {\r\n  type: 'inheritance' | 'composition' | 'dependency' | 'usage' | 'similarity';\r\n  source: string;\r\n  target: string;\r\n  strength: number; // 0-1\r\n  description: string;\r\n  evidence: string[];\r\n}\r\n\r\nexport interface SemanticContext {\r\n  purpose: string;\r\n  domain: string[];\r\n  patterns: DesignPattern[];\r\n  complexity: ComplexityMetrics;\r\n  quality: QualityMetrics;\r\n}\r\n\r\nexport interface DesignPattern {\r\n  name: string;\r\n  confidence: number;\r\n  evidence: string[];\r\n  location: { startLine: number; endLine: number };\r\n}\r\n\r\nexport interface UsagePattern {\r\n  pattern: string;\r\n  frequency: number;\r\n  contexts: string[];\r\n}\r\n\r\nexport interface CodeMetrics {\r\n  linesOfCode: number;\r\n  cyclomaticComplexity: number;\r\n  cognitiveComplexity: number;\r\n  maintainabilityIndex: number;\r\n  technicalDebt: number;\r\n}\r\n\r\nexport interface ComplexityMetrics {\r\n  cyclomatic: number;\r\n  cognitive: number;\r\n  nesting: number;\r\n  dependencies: number;\r\n}\r\n\r\nexport interface QualityMetrics {\r\n  maintainability: number;\r\n  readability: number;\r\n  testability: number;\r\n  reusability: number;\r\n}\r\n\r\nexport interface ProjectContext {\r\n  rootPath: string;\r\n  projectType: string;\r\n  architecture: ArchitectureInfo;\r\n  codebase: CodebaseInfo;\r\n  relationships: ProjectRelationship[];\r\n}\r\n\r\nexport interface ArchitectureInfo {\r\n  pattern: string; // MVC, Microservices, Layered, etc.\r\n  layers: ArchitectureLayer[];\r\n  entryPoints: string[];\r\n  coreModules: string[];\r\n}\r\n\r\nexport interface ArchitectureLayer {\r\n  name: string;\r\n  files: string[];\r\n  dependencies: string[];\r\n  responsibility: string;\r\n}\r\n\r\nexport interface CodebaseInfo {\r\n  totalFiles: number;\r\n  languages: { [language: string]: number };\r\n  frameworks: string[];\r\n  testCoverage: number;\r\n  documentation: number;\r\n}\r\n\r\nexport interface ProjectRelationship {\r\n  type: string;\r\n  modules: string[];\r\n  strength: number;\r\n  description: string;\r\n}\r\n\r\n// Navigation feature interfaces\r\nexport interface DefinitionLocation {\r\n  filePath: string;\r\n  absolutePath: string;\r\n  lineNumber: number;\r\n  columnNumber: number;\r\n  symbolType: string;\r\n  symbolName: string;\r\n  preview?: string;\r\n}\r\n\r\nexport interface UsageLocation {\r\n  filePath: string;\r\n  absolutePath: string;\r\n  lineNumber: number;\r\n  columnNumber: number;\r\n  usageType: 'definition' | 'call' | 'reference' | 'import' | 'export';\r\n  context: string;\r\n}\r\n\r\nexport interface FindUsagesResult {\r\n  symbolName: string;\r\n  totalUsages: number;\r\n  definition?: DefinitionLocation;\r\n  usages: UsageLocation[];\r\n}\r\n\r\nexport class CodeContextTool {\r\n  name = \"code_context\";\r\n  description = \"Build intelligent code context, analyze relationships, and provide semantic understanding\";\r\n\r\n  private intelligenceEngine: CodeIntelligenceEngine;\r\n  private symbolSearch: SymbolSearchTool;\r\n  private dependencyAnalyzer: DependencyAnalyzerTool;\r\n\r\n  constructor(intelligenceEngine: CodeIntelligenceEngine) {\r\n    this.intelligenceEngine = intelligenceEngine;\r\n    this.symbolSearch = new SymbolSearchTool(intelligenceEngine);\r\n    this.dependencyAnalyzer = new DependencyAnalyzerTool(intelligenceEngine);\r\n  }\r\n\r\n  async execute(args: any): Promise<ToolResult> {\r\n    try {\r\n      const {\r\n        operation,\r\n        filePath,\r\n        symbolName,\r\n        rootPath = process.cwd(),\r\n        includeRelationships = true,\r\n        includeMetrics = true,\r\n        includeSemantics = true,\r\n        maxRelatedFiles = 10,\r\n        contextDepth = 2,\r\n        includeDefinition = true\r\n      } = args;\r\n\r\n      // Handle navigation operations\r\n      if (operation === 'go_to_definition') {\r\n        if (!symbolName) {\r\n          throw new Error(\"Symbol name is required for go_to_definition operation\");\r\n        }\r\n\r\n        const result = await this.goToDefinition(symbolName, rootPath);\r\n\r\n        if (!result) {\r\n          return {\r\n            success: false,\r\n            error: `Symbol '${symbolName}' not found`\r\n          };\r\n        }\r\n\r\n        return {\r\n          success: true,\r\n          output: JSON.stringify(result, null, 2)\r\n        };\r\n      }\r\n\r\n      if (operation === 'find_usages') {\r\n        if (!symbolName) {\r\n          throw new Error(\"Symbol name is required for find_usages operation\");\r\n        }\r\n\r\n        const result = await this.findUsages(symbolName, rootPath, includeDefinition);\r\n\r\n        return {\r\n          success: true,\r\n          output: JSON.stringify(result, null, 2)\r\n        };\r\n      }\r\n\r\n      // Default: Build comprehensive context\r\n      if (!filePath) {\r\n        throw new Error(\"File path is required for context analysis\");\r\n      }\r\n\r\n      if (!await pathExists(filePath)) {\r\n        throw new Error(`File not found: ${filePath}`);\r\n      }\r\n\r\n      // Build comprehensive context\r\n      const context = await this.buildCodeContext(\r\n        filePath,\r\n        rootPath,\r\n        includeRelationships,\r\n        includeMetrics,\r\n        includeSemantics,\r\n        maxRelatedFiles,\r\n        contextDepth\r\n      );\r\n\r\n      return {\r\n        success: true,\r\n        output: JSON.stringify(context, null, 2)\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : String(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  private async buildCodeContext(\r\n    filePath: string,\r\n    rootPath: string,\r\n    includeRelationships: boolean,\r\n    includeMetrics: boolean,\r\n    includeSemantics: boolean,\r\n    maxRelatedFiles: number,\r\n    _contextDepth: number\r\n  ): Promise<CodeContext> {\r\n    // Get symbols and metadata from the intelligence engine\r\n    const symbols = this.intelligenceEngine.getFileSymbols(filePath);\r\n    const metadata = this.intelligenceEngine.getFileMetadata(filePath);\r\n\r\n    if (!metadata) {\r\n      throw new Error(`File not indexed: ${filePath}`);\r\n    }\r\n\r\n    // Get dependencies (imports are tracked in the dependency graph)\r\n    // Note: We could use this.intelligenceEngine.getDependencies(filePath) here\r\n    // but for now we're using the legacy analyzeDependencies method\r\n    const imports: any[] = []; // We'll build this from dependencies if needed\r\n\r\n    // Enhance symbols with context\r\n    const contextualSymbols = await this.enhanceSymbolsWithContext(symbols, filePath, rootPath);\r\n\r\n    // Analyze dependencies\r\n    const dependencies = await this.analyzeDependencies(imports, filePath, rootPath);\r\n\r\n    // Build relationships\r\n    let relationships: CodeRelationship[] = [];\r\n    if (includeRelationships) {\r\n      relationships = await this.buildCodeRelationships(\r\n        filePath,\r\n        contextualSymbols,\r\n        dependencies,\r\n        rootPath,\r\n        maxRelatedFiles\r\n      );\r\n    }\r\n\r\n    // Analyze semantics\r\n    let semanticContext: SemanticContext = {\r\n      purpose: 'unknown',\r\n      domain: [],\r\n      patterns: [],\r\n      complexity: { cyclomatic: 0, cognitive: 0, nesting: 0, dependencies: 0 },\r\n      quality: { maintainability: 0, readability: 0, testability: 0, reusability: 0 }\r\n    };\r\n\r\n    if (includeSemantics) {\r\n      semanticContext = await this.analyzeSemanticContext(filePath, contextualSymbols, dependencies);\r\n    }\r\n\r\n    // Calculate metrics\r\n    let codeMetrics: CodeMetrics = {\r\n      linesOfCode: 0,\r\n      cyclomaticComplexity: 0,\r\n      cognitiveComplexity: 0,\r\n      maintainabilityIndex: 0,\r\n      technicalDebt: 0\r\n    };\r\n\r\n    if (includeMetrics) {\r\n      codeMetrics = await this.calculateCodeMetrics(filePath, contextualSymbols);\r\n    }\r\n\r\n    return {\r\n      filePath: path.relative(rootPath, filePath),\r\n      symbols: contextualSymbols,\r\n      dependencies,\r\n      relationships,\r\n      semanticContext,\r\n      codeMetrics\r\n    };\r\n  }\r\n\r\n  private async enhanceSymbolsWithContext(\r\n    symbols: SymbolInfo[],\r\n    filePath: string,\r\n    rootPath: string\r\n  ): Promise<ContextualSymbol[]> {\r\n    const enhanced: ContextualSymbol[] = [];\r\n\r\n    for (const symbol of symbols) {\r\n      // Find related symbols\r\n      const relatedSymbols = await this.findRelatedSymbols(symbol, symbols, filePath, rootPath);\r\n\r\n      // Analyze usage patterns\r\n      const usagePatterns = await this.analyzeUsagePatterns(symbol, filePath);\r\n\r\n      // Generate semantic tags\r\n      const semanticTags = this.generateSemanticTags(symbol, filePath);\r\n\r\n      const contextualSymbol: ContextualSymbol = {\r\n        ...symbol,\r\n        context: {\r\n          parentClass: this.findParentClass(symbol, symbols),\r\n          parentFunction: this.findParentFunction(symbol, symbols),\r\n          relatedSymbols,\r\n          usagePatterns,\r\n          semanticTags\r\n        }\r\n      };\r\n\r\n      enhanced.push(contextualSymbol);\r\n    }\r\n\r\n    return enhanced;\r\n  }\r\n\r\n  private async findRelatedSymbols(\r\n    symbol: SymbolInfo,\r\n    allSymbols: SymbolInfo[],\r\n    filePath: string,\r\n    _rootPath: string\r\n  ): Promise<string[]> {\r\n    const related: string[] = [];\r\n\r\n    // Find symbols in same class/scope\r\n    const sameScope = allSymbols.filter(s =>\r\n      s !== symbol && s.scope === symbol.scope\r\n    );\r\n    related.push(...sameScope.map(s => s.name));\r\n\r\n    // Search for similar symbols across project\r\n    try {\r\n      const searchResult = await this.symbolSearch.findSimilarSymbols(symbol.name, 0.7);\r\n      const similarNames = searchResult\r\n        .filter(ref => ref.filePath !== filePath)\r\n        .slice(0, 5)\r\n        .map(ref => ref.symbol.name);\r\n      related.push(...similarNames);\r\n    } catch {\r\n      // Skip if search fails\r\n    }\r\n\r\n    return [...new Set(related)];\r\n  }\r\n\r\n  private async analyzeUsagePatterns(symbol: SymbolInfo, filePath: string): Promise<UsagePattern[]> {\r\n    const patterns: UsagePattern[] = [];\r\n\r\n    try {\r\n      const content = await ops.promises.readFile(filePath, 'utf-8');\r\n      const lines = content.split('\\n');\r\n\r\n      // Simple pattern analysis\r\n      let callCount = 0;\r\n      let assignmentCount = 0;\r\n      let returnCount = 0;\r\n\r\n      for (const line of lines) {\r\n        if (line.includes(`${symbol.name}(`)) callCount++;\r\n        if (line.includes(`= ${symbol.name}`) || line.includes(`const ${symbol.name}`)) assignmentCount++;\r\n        if (line.includes(`return ${symbol.name}`)) returnCount++;\r\n      }\r\n\r\n      if (callCount > 0) {\r\n        patterns.push({\r\n          pattern: 'function_call',\r\n          frequency: callCount,\r\n          contexts: ['invocation']\r\n        });\r\n      }\r\n\r\n      if (assignmentCount > 0) {\r\n        patterns.push({\r\n          pattern: 'assignment',\r\n          frequency: assignmentCount,\r\n          contexts: ['declaration', 'assignment']\r\n        });\r\n      }\r\n\r\n      if (returnCount > 0) {\r\n        patterns.push({\r\n          pattern: 'return_value',\r\n          frequency: returnCount,\r\n          contexts: ['return']\r\n        });\r\n      }\r\n    } catch {\r\n      // Skip if file read fails\r\n    }\r\n\r\n    return patterns;\r\n  }\r\n\r\n  private generateSemanticTags(symbol: SymbolInfo, filePath: string): string[] {\r\n    const tags: string[] = [];\r\n\r\n    // Basic type tag\r\n    tags.push(symbol.type);\r\n\r\n    // Name-based semantic analysis\r\n    const name = symbol.name.toLowerCase();\r\n\r\n    if (name.includes('test') || name.includes('spec')) {\r\n      tags.push('test');\r\n    }\r\n    if (name.includes('util') || name.includes('helper')) {\r\n      tags.push('utility');\r\n    }\r\n    if (name.includes('config') || name.includes('setting')) {\r\n      tags.push('configuration');\r\n    }\r\n    if (name.includes('api') || name.includes('service')) {\r\n      tags.push('api');\r\n    }\r\n    if (name.includes('component') || name.includes('widget')) {\r\n      tags.push('ui');\r\n    }\r\n    if (name.includes('model') || name.includes('entity')) {\r\n      tags.push('model');\r\n    }\r\n    if (name.includes('controller') || name.includes('handler')) {\r\n      tags.push('controller');\r\n    }\r\n\r\n    // File path-based tags\r\n    const fileName = path.basename(filePath);\r\n    if (fileName.includes('test')) {\r\n      tags.push('test');\r\n    }\r\n    if (fileName.includes('mock')) {\r\n      tags.push('mock');\r\n    }\r\n\r\n    // Async/await patterns\r\n    if (symbol.isAsync) {\r\n      tags.push('async');\r\n    }\r\n\r\n    // Access modifiers\r\n    if (symbol.accessibility) {\r\n      tags.push(symbol.accessibility);\r\n    }\r\n\r\n    return [...new Set(tags)];\r\n  }\r\n\r\n  private findParentClass(symbol: SymbolInfo, allSymbols: SymbolInfo[]): string | undefined {\r\n    const classSymbols = allSymbols.filter(s => s.type === 'class');\r\n\r\n    for (const classSymbol of classSymbols) {\r\n      if (symbol.startPosition.row >= classSymbol.startPosition.row &&\r\n        symbol.endPosition.row <= classSymbol.endPosition.row &&\r\n        symbol !== classSymbol) {\r\n        return classSymbol.name;\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private findParentFunction(symbol: SymbolInfo, allSymbols: SymbolInfo[]): string | undefined {\r\n    const functionSymbols = allSymbols.filter(s => s.type === 'function' || s.type === 'method');\r\n\r\n    for (const funcSymbol of functionSymbols) {\r\n      if (symbol.startPosition.row >= funcSymbol.startPosition.row &&\r\n        symbol.endPosition.row <= funcSymbol.endPosition.row &&\r\n        symbol !== funcSymbol) {\r\n        return funcSymbol.name;\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private async analyzeDependencies(\r\n    imports: any[],\r\n    _filePath: string,\r\n    _rootPath: string\r\n  ): Promise<ContextualDependency[]> {\r\n    const dependencies: ContextualDependency[] = [];\r\n\r\n    for (const importInfo of imports) {\r\n      const type = this.categorizeImport(importInfo.source);\r\n      const importedSymbols = importInfo.specifiers?.map((spec: any) => spec.name) || [];\r\n\r\n      dependencies.push({\r\n        source: importInfo.source,\r\n        type,\r\n        usage: 'direct',\r\n        importedSymbols,\r\n        usageContext: [],\r\n        isCircular: false // TODO: Check with dependency analyzer\r\n      });\r\n    }\r\n\r\n    return dependencies;\r\n  }\r\n\r\n  private categorizeImport(source: string): 'internal' | 'external' | 'builtin' {\r\n    if (source.startsWith('.') || source.startsWith('/')) {\r\n      return 'internal';\r\n    }\r\n\r\n    const builtinModules = ['fs', 'path', 'util', 'crypto', 'http', 'https', 'os', 'url'];\r\n    if (builtinModules.includes(source)) {\r\n      return 'builtin';\r\n    }\r\n\r\n    return 'external';\r\n  }\r\n\r\n  private async buildCodeRelationships(\r\n    filePath: string,\r\n    symbols: ContextualSymbol[],\r\n    dependencies: ContextualDependency[],\r\n    _rootPath: string,\r\n    _maxRelatedFiles: number\r\n  ): Promise<CodeRelationship[]> {\r\n    const relationships: CodeRelationship[] = [];\r\n\r\n    // Symbol relationships within file\r\n    for (const symbol of symbols) {\r\n      for (const relatedName of symbol.context.relatedSymbols) {\r\n        const relatedSymbol = symbols.find(s => s.name === relatedName);\r\n        if (relatedSymbol) {\r\n          relationships.push({\r\n            type: 'usage',\r\n            source: symbol.name,\r\n            target: relatedSymbol.name,\r\n            strength: 0.8,\r\n            description: `${symbol.name} uses ${relatedSymbol.name}`,\r\n            evidence: [`Same file: ${path.basename(filePath)}`]\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // Dependency relationships\r\n    for (const dep of dependencies) {\r\n      if (dep.type === 'internal') {\r\n        relationships.push({\r\n          type: 'dependency',\r\n          source: path.basename(filePath),\r\n          target: dep.source,\r\n          strength: 0.9,\r\n          description: `File depends on ${dep.source}`,\r\n          evidence: [`Import: ${dep.importedSymbols.join(', ')}`]\r\n        });\r\n      }\r\n    }\r\n\r\n    return relationships;\r\n  }\r\n\r\n  private async analyzeSemanticContext(\r\n    filePath: string,\r\n    symbols: ContextualSymbol[],\r\n    dependencies: ContextualDependency[]\r\n  ): Promise<SemanticContext> {\r\n    const fileName = path.basename(filePath);\r\n    const content = await ops.promises.readFile(filePath, 'utf-8');\r\n\r\n    // Determine purpose\r\n    const purpose = this.inferPurpose(fileName, symbols, content);\r\n\r\n    // Extract domain\r\n    const domain = this.extractDomain(filePath, symbols, dependencies);\r\n\r\n    // Detect patterns\r\n    const patterns = this.detectDesignPatterns(content, symbols);\r\n\r\n    // Calculate complexity\r\n    const complexity = this.calculateComplexityMetrics(content, symbols);\r\n\r\n    // Assess quality\r\n    const quality = this.assessQuality(content, symbols, dependencies);\r\n\r\n    return {\r\n      purpose,\r\n      domain,\r\n      patterns,\r\n      complexity,\r\n      quality\r\n    };\r\n  }\r\n\r\n  private inferPurpose(fileName: string, symbols: ContextualSymbol[], _content: string): string {\r\n    const name = fileName.toLowerCase();\r\n\r\n    if (name.includes('test') || name.includes('spec')) return 'testing';\r\n    if (name.includes('config')) return 'configuration';\r\n    if (name.includes('util') || name.includes('helper')) return 'utility';\r\n    if (name.includes('service')) return 'service';\r\n    if (name.includes('component')) return 'ui_component';\r\n    if (name.includes('model')) return 'data_model';\r\n    if (name.includes('controller')) return 'controller';\r\n    if (name.includes('router') || name.includes('route')) return 'routing';\r\n\r\n    // Analyze symbol types\r\n    const functionCount = symbols.filter(s => s.type === 'function').length;\r\n    const classCount = symbols.filter(s => s.type === 'class').length;\r\n    const interfaceCount = symbols.filter(s => s.type === 'interface').length;\r\n\r\n    if (interfaceCount > functionCount && interfaceCount > classCount) return 'type_definitions';\r\n    if (classCount > functionCount) return 'object_oriented';\r\n    if (functionCount > 0) return 'functional';\r\n\r\n    return 'unknown';\r\n  }\r\n\r\n  private extractDomain(filePath: string, _symbols: ContextualSymbol[], dependencies: ContextualDependency[]): string[] {\r\n    const domains: string[] = [];\r\n    const pathParts = filePath.split(path.sep);\r\n\r\n    // Extract from path\r\n    for (const part of pathParts) {\r\n      if (['auth', 'user', 'authentication'].includes(part.toLowerCase())) {\r\n        domains.push('authentication');\r\n      }\r\n      if (['api', 'rest', 'graphql'].includes(part.toLowerCase())) {\r\n        domains.push('api');\r\n      }\r\n      if (['ui', 'component', 'view'].includes(part.toLowerCase())) {\r\n        domains.push('ui');\r\n      }\r\n      if (['data', 'model', 'database'].includes(part.toLowerCase())) {\r\n        domains.push('data');\r\n      }\r\n    }\r\n\r\n    // Extract from dependencies\r\n    for (const dep of dependencies) {\r\n      if (dep.source.includes('react')) domains.push('react');\r\n      if (dep.source.includes('express')) domains.push('web_server');\r\n      if (dep.source.includes('database') || dep.source.includes('sql')) domains.push('database');\r\n      if (dep.source.includes('test')) domains.push('testing');\r\n    }\r\n\r\n    return [...new Set(domains)];\r\n  }\r\n\r\n  private detectDesignPatterns(content: string, symbols: ContextualSymbol[]): DesignPattern[] {\r\n    const patterns: DesignPattern[] = [];\r\n\r\n    // Singleton pattern detection\r\n    if (content.includes('getInstance') && symbols.some(s => s.type === 'class')) {\r\n      patterns.push({\r\n        name: 'Singleton',\r\n        confidence: 0.7,\r\n        evidence: ['getInstance method found'],\r\n        location: { startLine: 0, endLine: 0 }\r\n      });\r\n    }\r\n\r\n    // Factory pattern detection\r\n    if (content.includes('create') && symbols.some(s => s.name.toLowerCase().includes('factory'))) {\r\n      patterns.push({\r\n        name: 'Factory',\r\n        confidence: 0.8,\r\n        evidence: ['Factory class with create method'],\r\n        location: { startLine: 0, endLine: 0 }\r\n      });\r\n    }\r\n\r\n    // Observer pattern detection\r\n    if (content.includes('subscribe') || content.includes('addEventListener')) {\r\n      patterns.push({\r\n        name: 'Observer',\r\n        confidence: 0.6,\r\n        evidence: ['Event subscription methods found'],\r\n        location: { startLine: 0, endLine: 0 }\r\n      });\r\n    }\r\n\r\n    return patterns;\r\n  }\r\n\r\n  private calculateComplexityMetrics(content: string, symbols: ContextualSymbol[]): ComplexityMetrics {\r\n    const lines = content.split('\\n');\r\n\r\n    // Simple complexity calculations\r\n    let cyclomatic = 1; // Base complexity\r\n    let cognitive = 0;\r\n    let maxNesting = 0;\r\n    let currentNesting = 0;\r\n\r\n    for (const line of lines) {\r\n      const trimmed = line.trim();\r\n\r\n      // Cyclomatic complexity\r\n      if (trimmed.includes('if') || trimmed.includes('while') || trimmed.includes('for') ||\r\n        trimmed.includes('switch') || trimmed.includes('catch')) {\r\n        cyclomatic++;\r\n      }\r\n\r\n      // Nesting level\r\n      if (trimmed.includes('{')) currentNesting++;\r\n      if (trimmed.includes('}')) currentNesting--;\r\n      maxNesting = Math.max(maxNesting, currentNesting);\r\n\r\n      // Cognitive complexity (simplified)\r\n      if (trimmed.includes('if') || trimmed.includes('while') || trimmed.includes('for')) {\r\n        cognitive += currentNesting + 1;\r\n      }\r\n    }\r\n\r\n    return {\r\n      cyclomatic,\r\n      cognitive,\r\n      nesting: maxNesting,\r\n      dependencies: symbols.length\r\n    };\r\n  }\r\n\r\n  private assessQuality(content: string, symbols: ContextualSymbol[], dependencies: ContextualDependency[]): QualityMetrics {\r\n    const lines = content.split('\\n').filter(line => line.trim().length > 0);\r\n    const commentLines = lines.filter(line => line.trim().startsWith('//') || line.trim().startsWith('*'));\r\n\r\n    // Simple quality metrics\r\n    const commentRatio = commentLines.length / lines.length;\r\n    const averageLineLength = lines.reduce((sum, line) => sum + line.length, 0) / lines.length;\r\n    const functionCount = symbols.filter(s => s.type === 'function').length;\r\n    const classCount = symbols.filter(s => s.type === 'class').length;\r\n\r\n    const maintainability = Math.min(1, commentRatio * 2 + (functionCount > 0 ? 0.3 : 0));\r\n    const readability = Math.max(0, 1 - (averageLineLength - 50) / 100);\r\n    const testability = functionCount > classCount ? 0.8 : 0.5;\r\n    const reusability = dependencies.filter(d => d.type === 'external').length > 0 ? 0.7 : 0.4;\r\n\r\n    return {\r\n      maintainability: Math.max(0, Math.min(1, maintainability)),\r\n      readability: Math.max(0, Math.min(1, readability)),\r\n      testability: Math.max(0, Math.min(1, testability)),\r\n      reusability: Math.max(0, Math.min(1, reusability))\r\n    };\r\n  }\r\n\r\n  private async calculateCodeMetrics(filePath: string, _symbols: ContextualSymbol[]): Promise<CodeMetrics> {\r\n    const content = await ops.promises.readFile(filePath, 'utf-8');\r\n    const lines = content.split('\\n');\r\n    const codeLines = lines.filter(line => line.trim().length > 0 && !line.trim().startsWith('//'));\r\n\r\n    // Calculate basic metrics\r\n    const linesOfCode = codeLines.length;\r\n    const cyclomaticComplexity = this.calculateCyclomaticComplexity(content);\r\n    const cognitiveComplexity = this.calculateCognitiveComplexity(content);\r\n\r\n    // Maintainability Index (simplified Microsoft formula)\r\n    const averageLineLength = codeLines.reduce((sum, line) => sum + line.length, 0) / codeLines.length;\r\n    const maintainabilityIndex = Math.max(0,\r\n      171 - 5.2 * Math.log(averageLineLength) - 0.23 * cyclomaticComplexity - 16.2 * Math.log(linesOfCode)\r\n    );\r\n\r\n    // Technical debt estimation (simplified)\r\n    const technicalDebt = (cyclomaticComplexity - 10) * 0.1 + (cognitiveComplexity - 15) * 0.05;\r\n\r\n    return {\r\n      linesOfCode,\r\n      cyclomaticComplexity,\r\n      cognitiveComplexity,\r\n      maintainabilityIndex,\r\n      technicalDebt: Math.max(0, technicalDebt)\r\n    };\r\n  }\r\n\r\n  private calculateCyclomaticComplexity(content: string): number {\r\n    let complexity = 1; // Base complexity\r\n    const complexityKeywords = ['if', 'else', 'while', 'for', 'switch', 'case', 'catch', '&&', '||', '?'];\r\n\r\n    for (const keyword of complexityKeywords) {\r\n      const matches = content.match(new RegExp(`\\\\b${keyword}\\\\b`, 'g'));\r\n      if (matches) {\r\n        complexity += matches.length;\r\n      }\r\n    }\r\n\r\n    return complexity;\r\n  }\r\n\r\n  private calculateCognitiveComplexity(content: string): number {\r\n    let complexity = 0;\r\n    let nestingLevel = 0;\r\n    const lines = content.split('\\n');\r\n\r\n    for (const line of lines) {\r\n      const trimmed = line.trim();\r\n\r\n      // Track nesting\r\n      if (trimmed.includes('{')) nestingLevel++;\r\n      if (trimmed.includes('}')) nestingLevel = Math.max(0, nestingLevel - 1);\r\n\r\n      // Add complexity for control structures\r\n      if (trimmed.includes('if') || trimmed.includes('while') || trimmed.includes('for')) {\r\n        complexity += nestingLevel + 1;\r\n      }\r\n      if (trimmed.includes('switch')) {\r\n        complexity += nestingLevel + 1;\r\n      }\r\n      if (trimmed.includes('catch')) {\r\n        complexity += nestingLevel + 1;\r\n      }\r\n    }\r\n\r\n    return complexity;\r\n  }\r\n\r\n  // ==================== Navigation Features ====================\r\n\r\n  /**\r\n   * Go to the definition of a symbol\r\n   * @param symbolName - Name of the symbol to find\r\n   * @param rootPath - Root path for relative path resolution\r\n   * @returns Definition location or null if not found\r\n   */\r\n  async goToDefinition(symbolName: string, rootPath: string = process.cwd()): Promise<DefinitionLocation | null> {\r\n    try {\r\n      // Find symbol using the intelligence engine\r\n      const refs = this.intelligenceEngine.findSymbol(symbolName);\r\n\r\n      if (refs.length === 0) {\r\n        return null;\r\n      }\r\n\r\n      // Get the first reference (definition)\r\n      const ref = refs[0];\r\n      const symbol = ref.symbol;\r\n\r\n      // Read file content for preview\r\n      let preview: string | undefined;\r\n      try {\r\n        const content = await ops.promises.readFile(ref.filePath, 'utf-8');\r\n        const lines = content.split('\\n');\r\n        const line = lines[symbol.startPosition.row];\r\n        preview = line?.trim();\r\n      } catch {\r\n        // Preview is optional\r\n      }\r\n\r\n      return {\r\n        filePath: path.relative(rootPath, ref.filePath),\r\n        absolutePath: ref.filePath,\r\n        lineNumber: symbol.startPosition.row + 1, // Convert to 1-based\r\n        columnNumber: symbol.startPosition.column + 1, // Convert to 1-based\r\n        symbolType: symbol.type,\r\n        symbolName: symbol.name,\r\n        preview\r\n      };\r\n    } catch (error) {\r\n      console.error(`Error finding definition for ${symbolName}:`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find all usages of a symbol\r\n   * @param symbolName - Name of the symbol to find usages for\r\n   * @param rootPath - Root path for relative path resolution\r\n   * @param includeDefinition - Whether to include the definition in results\r\n   * @returns Find usages result with all locations\r\n   */\r\n  async findUsages(\r\n    symbolName: string,\r\n    rootPath: string = process.cwd(),\r\n    includeDefinition: boolean = true\r\n  ): Promise<FindUsagesResult> {\r\n    try {\r\n      // Get cross-references from the intelligence engine\r\n      const crossRef = this.intelligenceEngine.findReferences(symbolName);\r\n\r\n      if (!crossRef) {\r\n        return {\r\n          symbolName,\r\n          totalUsages: 0,\r\n          usages: []\r\n        };\r\n      }\r\n\r\n      const usages: UsageLocation[] = [];\r\n\r\n      // Get definition location\r\n      let definition: DefinitionLocation | undefined;\r\n      const defRefs = this.intelligenceEngine.findSymbol(symbolName);\r\n      if (defRefs.length > 0) {\r\n        const defRef = defRefs[0];\r\n        const symbol = defRef.symbol;\r\n\r\n        // Read context for definition\r\n        let context = '';\r\n        try {\r\n          const content = await ops.promises.readFile(defRef.filePath, 'utf-8');\r\n          const lines = content.split('\\n');\r\n          context = lines[symbol.startPosition.row]?.trim() || '';\r\n        } catch {\r\n          // Context is optional\r\n        }\r\n\r\n        definition = {\r\n          filePath: path.relative(rootPath, defRef.filePath),\r\n          absolutePath: defRef.filePath,\r\n          lineNumber: symbol.startPosition.row + 1,\r\n          columnNumber: symbol.startPosition.column + 1,\r\n          symbolType: symbol.type,\r\n          symbolName: symbol.name,\r\n          preview: context\r\n        };\r\n\r\n        // Add definition to usages if requested\r\n        if (includeDefinition) {\r\n          usages.push({\r\n            filePath: path.relative(rootPath, defRef.filePath),\r\n            absolutePath: defRef.filePath,\r\n            lineNumber: symbol.startPosition.row + 1,\r\n            columnNumber: symbol.startPosition.column + 1,\r\n            usageType: 'definition',\r\n            context\r\n          });\r\n        }\r\n      }\r\n\r\n      // Add all references\r\n      for (const ref of crossRef.references) {\r\n        // Read context for this reference\r\n        let context = '';\r\n        try {\r\n          const content = await ops.promises.readFile(ref.file, 'utf-8');\r\n          const lines = content.split('\\n');\r\n          context = lines[ref.line]?.trim() || '';\r\n        } catch {\r\n          // Context is optional\r\n        }\r\n\r\n        usages.push({\r\n          filePath: path.relative(rootPath, ref.file),\r\n          absolutePath: ref.file,\r\n          lineNumber: ref.line + 1, // Convert to 1-based\r\n          columnNumber: ref.column + 1, // Convert to 1-based\r\n          usageType: ref.type,\r\n          context\r\n        });\r\n      }\r\n\r\n      return {\r\n        symbolName,\r\n        totalUsages: usages.length,\r\n        definition,\r\n        usages\r\n      };\r\n    } catch (error) {\r\n      console.error(`Error finding usages for ${symbolName}:`, error);\r\n      return {\r\n        symbolName,\r\n        totalUsages: 0,\r\n        usages: []\r\n      };\r\n    }\r\n  }\r\n\r\n  getSchema() {\r\n    return {\r\n      type: \"object\",\r\n      properties: {\r\n        operation: {\r\n          type: \"string\",\r\n          enum: [\"analyze_context\", \"go_to_definition\", \"find_usages\"],\r\n          description: \"Operation to perform: analyze_context (default), go_to_definition, or find_usages\",\r\n          default: \"analyze_context\"\r\n        },\r\n        filePath: {\r\n          type: \"string\",\r\n          description: \"Path to the file to analyze for context (required for analyze_context operation)\"\r\n        },\r\n        symbolName: {\r\n          type: \"string\",\r\n          description: \"Name of the symbol (required for go_to_definition and find_usages operations)\"\r\n        },\r\n        rootPath: {\r\n          type: \"string\",\r\n          description: \"Root path of the project for relative path resolution\",\r\n          default: \"current working directory\"\r\n        },\r\n        includeDefinition: {\r\n          type: \"boolean\",\r\n          description: \"Include definition in find_usages results\",\r\n          default: true\r\n        },\r\n        includeRelationships: {\r\n          type: \"boolean\",\r\n          description: \"Include code relationships analysis (for analyze_context)\",\r\n          default: true\r\n        },\r\n        includeMetrics: {\r\n          type: \"boolean\",\r\n          description: \"Include code quality metrics (for analyze_context)\",\r\n          default: true\r\n        },\r\n        includeSemantics: {\r\n          type: \"boolean\",\r\n          description: \"Include semantic analysis and patterns (for analyze_context)\",\r\n          default: true\r\n        },\r\n        maxRelatedFiles: {\r\n          type: \"integer\",\r\n          description: \"Maximum number of related files to analyze (for analyze_context)\",\r\n          default: 10,\r\n          minimum: 1,\r\n          maximum: 50\r\n        },\r\n        contextDepth: {\r\n          type: \"integer\",\r\n          description: \"Depth of context analysis (for analyze_context)\",\r\n          default: 2,\r\n          minimum: 1,\r\n          maximum: 5\r\n        }\r\n      }\r\n    };\r\n  }\r\n}","import { ToolResult } from \"../../types/index.js\";\r\nimport { SymbolInfo } from \"./types.js\";\r\nimport { SymbolSearchTool, SymbolReference } from \"./symbol-search.js\";\r\nimport { CodeIntelligenceEngine } from \"./engine.js\";\r\nimport { MultiFileEditorTool } from \"../advanced/multi-file-editor.js\";\r\nimport { OperationHistoryTool } from \"../advanced/operation-history.js\";\r\nimport * as ops from \"fs\";\r\n\r\nconst pathExists = async (filePath: string): Promise<boolean> => {\r\n  try {\r\n    await ops.promises.access(filePath, ops.constants.F_OK);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n\r\n\r\nimport path from \"path\";\r\n\r\nexport interface RefactoringOperation {\r\n  type: 'rename' | 'extract_function' | 'extract_variable' | 'inline_function' | 'inline_variable' | 'move_function' | 'move_class';\r\n  description: string;\r\n  files: RefactoringFileChange[];\r\n  preview: string;\r\n  safety: SafetyAnalysis;\r\n  rollback?: string;\r\n}\r\n\r\nexport interface RefactoringFileChange {\r\n  filePath: string;\r\n  changes: TextChange[];\r\n  backup?: string;\r\n}\r\n\r\nexport interface TextChange {\r\n  startLine: number;\r\n  startColumn: number;\r\n  endLine: number;\r\n  endColumn: number;\r\n  oldText: string;\r\n  newText: string;\r\n  type: 'replace' | 'insert' | 'delete';\r\n}\r\n\r\nexport interface SafetyAnalysis {\r\n  riskLevel: 'low' | 'medium' | 'high';\r\n  potentialIssues: string[];\r\n  affectedFiles: number;\r\n  affectedSymbols: number;\r\n  requiresTests: boolean;\r\n  breakingChanges: boolean;\r\n}\r\n\r\nexport interface RenameRequest {\r\n  symbolName: string;\r\n  newName: string;\r\n  filePath?: string;\r\n  scope: 'file' | 'project' | 'global';\r\n  includeComments: boolean;\r\n  includeStrings: boolean;\r\n}\r\n\r\nexport interface ExtractFunctionRequest {\r\n  filePath: string;\r\n  startLine: number;\r\n  endLine: number;\r\n  functionName: string;\r\n  parameters?: ExtractedParameter[];\r\n  returnType?: string;\r\n}\r\n\r\nexport interface ExtractedParameter {\r\n  name: string;\r\n  type?: string;\r\n  defaultValue?: string;\r\n}\r\n\r\nexport interface MoveRequest {\r\n  symbolName: string;\r\n  sourceFile: string;\r\n  targetFile: string;\r\n  createTargetFile?: boolean;\r\n}\r\n\r\nexport interface InlineRequest {\r\n  symbolName: string;\r\n  filePath: string;\r\n  preserveComments: boolean;\r\n}\r\n\r\nexport class RefactoringAssistantTool {\r\n  name = \"refactoring_assistant\";\r\n  description = \"Perform safe code refactoring operations including rename, extract, inline, and move operations\";\r\n\r\n  private intelligenceEngine: CodeIntelligenceEngine;\r\n  private symbolSearch: SymbolSearchTool;\r\n  private multiFileEditor: MultiFileEditorTool;\r\n  private operationHistory: OperationHistoryTool;\r\n\r\n  constructor(intelligenceEngine: CodeIntelligenceEngine) {\r\n    this.intelligenceEngine = intelligenceEngine;\r\n    this.symbolSearch = new SymbolSearchTool(intelligenceEngine);\r\n    this.multiFileEditor = new MultiFileEditorTool();\r\n    this.operationHistory = new OperationHistoryTool();\r\n  }\r\n\r\n  async execute(args: any): Promise<ToolResult> {\r\n    try {\r\n      const { operation, ...operationArgs } = args;\r\n\r\n      if (!operation) {\r\n        throw new Error(\"Refactoring operation type is required\");\r\n      }\r\n\r\n      let result: RefactoringOperation;\r\n\r\n      switch (operation) {\r\n        case 'rename':\r\n          result = await this.performRename(operationArgs as RenameRequest);\r\n          break;\r\n        case 'extract_function':\r\n          result = await this.performExtractFunction(operationArgs as ExtractFunctionRequest);\r\n          break;\r\n        case 'extract_variable':\r\n          result = await this.performExtractVariable(operationArgs);\r\n          break;\r\n        case 'inline_function':\r\n          result = await this.performInlineFunction(operationArgs as InlineRequest);\r\n          break;\r\n        case 'inline_variable':\r\n          result = await this.performInlineVariable(operationArgs as InlineRequest);\r\n          break;\r\n        case 'move_function':\r\n        case 'move_class':\r\n          result = await this.performMove(operationArgs as MoveRequest);\r\n          break;\r\n        default:\r\n          throw new Error(`Unsupported refactoring operation: ${operation}`);\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        output: JSON.stringify(result, null, 2)\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : String(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  private async performRename(request: RenameRequest): Promise<RefactoringOperation> {\r\n    const { symbolName, newName, filePath, scope, includeComments, includeStrings } = request;\r\n\r\n    if (!symbolName || !newName) {\r\n      throw new Error(\"Symbol name and new name are required for rename operation\");\r\n    }\r\n\r\n    // Validate new name\r\n    if (!this.isValidIdentifier(newName)) {\r\n      throw new Error(`Invalid identifier: ${newName}`);\r\n    }\r\n\r\n    // Find all occurrences of the symbol\r\n    const searchPath = scope === 'file' && filePath ? path.dirname(filePath) : process.cwd();\r\n    const searchResult = await this.symbolSearch.execute({\r\n      query: symbolName,\r\n      searchPath,\r\n      includeUsages: true,\r\n      fuzzyMatch: false,\r\n      caseSensitive: true\r\n    });\r\n\r\n    if (!searchResult.success || !searchResult.output) {\r\n      throw new Error(\"Failed to find symbol occurrences\");\r\n    }\r\n    const parsed = JSON.parse(searchResult.output);\r\n    if (!parsed.success) {\r\n      throw new Error(\"Failed to find symbol occurrences\");\r\n    }\r\n\r\n    const symbolRefs = parsed.result.symbols as SymbolReference[];\r\n\r\n    // Filter by scope\r\n    const relevantRefs = scope === 'file' && filePath\r\n      ? symbolRefs.filter(ref => ref.filePath === filePath)\r\n      : symbolRefs;\r\n\r\n    if (relevantRefs.length === 0) {\r\n      throw new Error(`Symbol '${symbolName}' not found in specified scope`);\r\n    }\r\n\r\n    // Perform safety analysis\r\n    const safety = await this.analyzeSafety(relevantRefs, 'rename');\r\n\r\n    // Generate changes\r\n    const fileChanges: RefactoringFileChange[] = [];\r\n    const affectedFiles = new Set<string>();\r\n\r\n    for (const ref of relevantRefs) {\r\n      affectedFiles.add(ref.filePath);\r\n\r\n      const changes = await this.generateRenameChanges(\r\n        ref,\r\n        symbolName,\r\n        newName,\r\n        includeComments,\r\n        includeStrings\r\n      );\r\n\r\n      if (changes.length > 0) {\r\n        fileChanges.push({\r\n          filePath: ref.filePath,\r\n          changes\r\n        });\r\n      }\r\n    }\r\n\r\n    // Generate preview\r\n    const preview = this.generatePreview(fileChanges, 'rename', symbolName, newName);\r\n\r\n    return {\r\n      type: 'rename',\r\n      description: `Rename '${symbolName}' to '${newName}' (${scope} scope)`,\r\n      files: fileChanges,\r\n      preview,\r\n      safety\r\n    };\r\n  }\r\n\r\n  private async performExtractFunction(request: ExtractFunctionRequest): Promise<RefactoringOperation> {\r\n    const { filePath, startLine, endLine, functionName, parameters = [], returnType } = request;\r\n\r\n    if (!filePath || startLine === undefined || endLine === undefined || !functionName) {\r\n      throw new Error(\"File path, line range, and function name are required\");\r\n    }\r\n\r\n    if (!await pathExists(filePath)) {\r\n      throw new Error(`File not found: ${filePath}`);\r\n    }\r\n\r\n    const content = await ops.promises.readFile(filePath, 'utf-8');\r\n    const lines = content.split('\\n');\r\n\r\n    if (startLine < 0 || endLine >= lines.length || startLine > endLine) {\r\n      throw new Error(\"Invalid line range\");\r\n    }\r\n\r\n    // Extract the code block\r\n    const extractedCode = lines.slice(startLine, endLine + 1);\r\n    const extractedText = extractedCode.join('\\n');\r\n\r\n    // Analyze the extracted code for variables using enhanced AST analysis\r\n    const analysis = await this.analyzeExtractedCode(extractedText, filePath);\r\n\r\n    // Use auto-detected parameters if none were provided\r\n    const finalParameters = parameters.length > 0 ? parameters : analysis.parameters;\r\n    const finalReturnType = returnType || analysis.inferredReturnType;\r\n\r\n    // Generate function signature\r\n    const functionSignature = this.generateFunctionSignature(\r\n      functionName,\r\n      finalParameters,\r\n      finalReturnType\r\n    );\r\n\r\n    // Create the new function\r\n    const newFunction = this.createExtractedFunction(\r\n      functionSignature,\r\n      extractedText,\r\n      analysis.localVariables\r\n    );\r\n\r\n    // Generate function call\r\n    const functionCall = this.generateFunctionCall(\r\n      functionName,\r\n      finalParameters,\r\n      analysis.returnVariable\r\n    );\r\n\r\n    // Create changes\r\n    const changes: TextChange[] = [\r\n      // Replace extracted code with function call\r\n      {\r\n        startLine,\r\n        startColumn: 0,\r\n        endLine,\r\n        endColumn: lines[endLine].length,\r\n        oldText: extractedText,\r\n        newText: functionCall,\r\n        type: 'replace'\r\n      },\r\n      // Insert new function (simplified - should find appropriate location)\r\n      {\r\n        startLine: endLine + 1,\r\n        startColumn: 0,\r\n        endLine: endLine + 1,\r\n        endColumn: 0,\r\n        oldText: '',\r\n        newText: '\\n' + newFunction + '\\n',\r\n        type: 'insert'\r\n      }\r\n    ];\r\n\r\n    // Determine risk level based on analysis confidence and external references\r\n    let riskLevel: 'low' | 'medium' | 'high' = 'medium';\r\n    const potentialIssues: string[] = [\r\n      'Variable scope changes',\r\n      'Side effects may be altered',\r\n      'Error handling context may change'\r\n    ];\r\n\r\n    if (analysis.confidence > 0.8 && analysis.externalReferences.size === 0) {\r\n      riskLevel = 'low';\r\n    } else if (analysis.confidence < 0.5 || analysis.externalReferences.size > 3) {\r\n      riskLevel = 'high';\r\n      potentialIssues.push('Low confidence in parameter detection');\r\n    }\r\n\r\n    if (analysis.externalReferences.size > 0) {\r\n      potentialIssues.push(`References ${analysis.externalReferences.size} external symbols`);\r\n    }\r\n\r\n    const safety: SafetyAnalysis = {\r\n      riskLevel,\r\n      potentialIssues,\r\n      affectedFiles: 1,\r\n      affectedSymbols: 1,\r\n      requiresTests: true,\r\n      breakingChanges: false\r\n    };\r\n\r\n    const fileChanges: RefactoringFileChange[] = [{\r\n      filePath,\r\n      changes\r\n    }];\r\n\r\n    // Enhanced preview with analysis details\r\n    let preview = this.generatePreview(fileChanges, 'extract_function', extractedText, functionName);\r\n\r\n    // Add analysis metadata to preview\r\n    preview += `\\n\\n--- Analysis Details ---`;\r\n    preview += `\\nConfidence: ${(analysis.confidence * 100).toFixed(0)}%`;\r\n    preview += `\\nAuto-detected parameters: ${finalParameters.map(p => `${p.name}: ${p.type || 'any'}`).join(', ') || 'none'}`;\r\n    preview += `\\nInferred return type: ${finalReturnType}`;\r\n    if (analysis.externalReferences.size > 0) {\r\n      preview += `\\nExternal references: ${Array.from(analysis.externalReferences).join(', ')}`;\r\n      preview += `\\n⚠️  Warning: Function references external symbols that may need to be passed as parameters`;\r\n    }\r\n\r\n    return {\r\n      type: 'extract_function',\r\n      description: `Extract function '${functionName}' from lines ${startLine}-${endLine} (confidence: ${(analysis.confidence * 100).toFixed(0)}%)`,\r\n      files: fileChanges,\r\n      preview,\r\n      safety\r\n    };\r\n  }\r\n\r\n  private async performExtractVariable(args: any): Promise<RefactoringOperation> {\r\n    const { filePath, startLine, startColumn, endLine, endColumn, variableName, variableType } = args;\r\n\r\n    if (!filePath || !variableName) {\r\n      throw new Error(\"File path and variable name are required\");\r\n    }\r\n\r\n    const content = await ops.promises.readFile(filePath, 'utf-8');\r\n    const lines = content.split('\\n');\r\n\r\n    // Extract expression\r\n    const startLineContent = lines[startLine];\r\n    const endLineContent = lines[endLine];\r\n\r\n    let expression: string;\r\n    if (startLine === endLine) {\r\n      expression = startLineContent.substring(startColumn, endColumn);\r\n    } else {\r\n      expression = startLineContent.substring(startColumn) + '\\n' +\r\n        lines.slice(startLine + 1, endLine).join('\\n') + '\\n' +\r\n        endLineContent.substring(0, endColumn);\r\n    }\r\n\r\n    // Generate variable declaration\r\n    const indent = this.getIndentation(startLineContent);\r\n    const varDeclaration = `${indent}const ${variableName}${variableType ? `: ${variableType}` : ''} = ${expression.trim()};`;\r\n\r\n    const changes: TextChange[] = [\r\n      // Insert variable declaration\r\n      {\r\n        startLine,\r\n        startColumn: 0,\r\n        endLine: startLine,\r\n        endColumn: 0,\r\n        oldText: '',\r\n        newText: varDeclaration + '\\n',\r\n        type: 'insert'\r\n      },\r\n      // Replace expression with variable\r\n      {\r\n        startLine: startLine + 1, // Account for inserted line\r\n        startColumn,\r\n        endLine: endLine + 1,\r\n        endColumn,\r\n        oldText: expression,\r\n        newText: variableName,\r\n        type: 'replace'\r\n      }\r\n    ];\r\n\r\n    const safety: SafetyAnalysis = {\r\n      riskLevel: 'low',\r\n      potentialIssues: ['Variable name conflicts'],\r\n      affectedFiles: 1,\r\n      affectedSymbols: 1,\r\n      requiresTests: false,\r\n      breakingChanges: false\r\n    };\r\n\r\n    const fileChanges: RefactoringFileChange[] = [{\r\n      filePath,\r\n      changes\r\n    }];\r\n\r\n    const preview = this.generatePreview(fileChanges, 'extract_variable', expression, variableName);\r\n\r\n    return {\r\n      type: 'extract_variable',\r\n      description: `Extract variable '${variableName}' from expression`,\r\n      files: fileChanges,\r\n      preview,\r\n      safety\r\n    };\r\n  }\r\n\r\n  private async performInlineFunction(request: InlineRequest): Promise<RefactoringOperation> {\r\n    const { symbolName, filePath, preserveComments } = request;\r\n\r\n    // Find function definition using the intelligence engine\r\n    const symbols = this.intelligenceEngine.getFileSymbols(filePath);\r\n    const functionSymbol = symbols.find((s: SymbolInfo) => s.name === symbolName && s.type === 'function');\r\n\r\n    if (!functionSymbol) {\r\n      throw new Error(`Function '${symbolName}' not found`);\r\n    }\r\n\r\n    // Get function body\r\n    const content = await ops.promises.readFile(filePath, 'utf-8');\r\n    const lines = content.split('\\n');\r\n    const functionLines = lines.slice(functionSymbol.startPosition.row, functionSymbol.endPosition.row + 1);\r\n    const functionBody = this.extractFunctionBody(functionLines.join('\\n'));\r\n\r\n    // Find all calls to this function\r\n    const usageSearch = await this.symbolSearch.execute({\r\n      query: symbolName,\r\n      searchPath: path.dirname(filePath),\r\n      includeUsages: true,\r\n      fuzzyMatch: false\r\n    });\r\n\r\n    if (!usageSearch.success || !usageSearch.output) {\r\n      throw new Error(\"Failed to find function usages\");\r\n    }\r\n    const usageParsed = JSON.parse(usageSearch.output);\r\n    if (!usageParsed.success) {\r\n      throw new Error(\"Failed to find function usages\");\r\n    }\r\n\r\n    const usages = usageParsed.result.symbols as SymbolReference[];\r\n    const functionCalls = this.findFunctionCalls(usages, symbolName);\r\n\r\n    // Generate inline replacements\r\n    const fileChanges: RefactoringFileChange[] = [];\r\n    const affectedFiles = new Set<string>();\r\n\r\n    for (const call of functionCalls) {\r\n      affectedFiles.add(call.filePath);\r\n      const inlinedCode = this.inlineFunction(functionBody, call.arguments);\r\n\r\n      // Add change to replace function call with inlined code\r\n      const changes: TextChange[] = [{\r\n        startLine: call.line,\r\n        startColumn: call.column,\r\n        endLine: call.line,\r\n        endColumn: call.column + call.text.length,\r\n        oldText: call.text,\r\n        newText: inlinedCode,\r\n        type: 'replace'\r\n      }];\r\n\r\n      fileChanges.push({\r\n        filePath: call.filePath,\r\n        changes\r\n      });\r\n    }\r\n\r\n    // Remove function definition\r\n    const definitionChanges: TextChange[] = [{\r\n      startLine: functionSymbol.startPosition.row,\r\n      startColumn: 0,\r\n      endLine: functionSymbol.endPosition.row + 1,\r\n      endColumn: 0,\r\n      oldText: functionLines.join('\\n'),\r\n      newText: preserveComments ? this.extractComments(functionLines.join('\\n')) : '',\r\n      type: 'replace'\r\n    }];\r\n\r\n    fileChanges.push({\r\n      filePath,\r\n      changes: definitionChanges\r\n    });\r\n\r\n    const safety: SafetyAnalysis = {\r\n      riskLevel: 'high',\r\n      potentialIssues: [\r\n        'Code duplication',\r\n        'Variable scope changes',\r\n        'Performance implications',\r\n        'Debugging complexity'\r\n      ],\r\n      affectedFiles: affectedFiles.size,\r\n      affectedSymbols: functionCalls.length + 1,\r\n      requiresTests: true,\r\n      breakingChanges: false\r\n    };\r\n\r\n    const preview = this.generatePreview(fileChanges, 'inline_function', symbolName, 'inlined code');\r\n\r\n    return {\r\n      type: 'inline_function',\r\n      description: `Inline function '${symbolName}' at all call sites`,\r\n      files: fileChanges,\r\n      preview,\r\n      safety\r\n    };\r\n  }\r\n\r\n  private async performInlineVariable(_request: InlineRequest): Promise<RefactoringOperation> {\r\n    // Similar to inline function but for variables\r\n    throw new Error(\"Inline variable not yet implemented\");\r\n  }\r\n\r\n  private async performMove(request: MoveRequest): Promise<RefactoringOperation> {\r\n    const { symbolName, sourceFile, targetFile, createTargetFile = false } = request;\r\n\r\n    if (!symbolName || !sourceFile || !targetFile) {\r\n      throw new Error(\"Symbol name, source file, and target file are required\");\r\n    }\r\n\r\n    if (!await pathExists(sourceFile)) {\r\n      throw new Error(`Source file not found: ${sourceFile}`);\r\n    }\r\n\r\n    if (!await pathExists(targetFile) && !createTargetFile) {\r\n      throw new Error(`Target file not found: ${targetFile}. Set createTargetFile=true to create it.`);\r\n    }\r\n\r\n    // Find the symbol in the source file\r\n    const symbols = this.intelligenceEngine.getFileSymbols(sourceFile);\r\n    const symbol = symbols.find(s => s.name === symbolName);\r\n\r\n    if (!symbol) {\r\n      throw new Error(`Symbol '${symbolName}' not found in ${sourceFile}`);\r\n    }\r\n\r\n    // Determine operation type based on symbol type\r\n    const operationType = symbol.type === 'class' ? 'move_class' : 'move_function';\r\n\r\n    // Read source and target files\r\n    const sourceContent = await ops.promises.readFile(sourceFile, 'utf-8');\r\n    const sourceLines = sourceContent.split('\\n');\r\n\r\n    let targetContent = '';\r\n    let targetLines: string[] = [];\r\n    if (await pathExists(targetFile)) {\r\n      targetContent = await ops.promises.readFile(targetFile, 'utf-8');\r\n      targetLines = targetContent.split('\\n');\r\n    }\r\n\r\n    // Extract the symbol code from source file\r\n    const symbolCode = this.extractSymbolCode(sourceLines, symbol);\r\n\r\n    // Find all files that import this symbol\r\n    const dependents = this.intelligenceEngine.getDependents(sourceFile);\r\n    const affectedFiles = new Set<string>();\r\n\r\n    // Check which dependents actually import this symbol\r\n    for (const dependent of dependents) {\r\n      const crossRef = this.intelligenceEngine.findReferences(symbolName);\r\n      if (crossRef) {\r\n        for (const ref of crossRef.references) {\r\n          if (ref.file === dependent && ref.type === 'import') {\r\n            affectedFiles.add(dependent);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Prepare file changes\r\n    const fileChanges: RefactoringFileChange[] = [];\r\n\r\n    // 1. Remove symbol from source file\r\n    const sourceChanges: TextChange[] = [{\r\n      startLine: symbol.startPosition.row,\r\n      startColumn: 0,\r\n      endLine: symbol.endPosition.row + 1,\r\n      endColumn: 0,\r\n      oldText: symbolCode,\r\n      newText: '',\r\n      type: 'replace'\r\n    }];\r\n\r\n    fileChanges.push({\r\n      filePath: sourceFile,\r\n      changes: sourceChanges\r\n    });\r\n\r\n    // 2. Add symbol to target file\r\n    const targetChanges: TextChange[] = [];\r\n\r\n    if (targetLines.length === 0) {\r\n      // New file - add symbol at the beginning\r\n      targetChanges.push({\r\n        startLine: 0,\r\n        startColumn: 0,\r\n        endLine: 0,\r\n        endColumn: 0,\r\n        oldText: '',\r\n        newText: symbolCode + '\\n',\r\n        type: 'insert'\r\n      });\r\n    } else {\r\n      // Existing file - add at the end\r\n      targetChanges.push({\r\n        startLine: targetLines.length,\r\n        startColumn: 0,\r\n        endLine: targetLines.length,\r\n        endColumn: 0,\r\n        oldText: '',\r\n        newText: '\\n' + symbolCode + '\\n',\r\n        type: 'insert'\r\n      });\r\n    }\r\n\r\n    fileChanges.push({\r\n      filePath: targetFile,\r\n      changes: targetChanges\r\n    });\r\n\r\n    // 3. Update imports in dependent files\r\n    for (const dependentFile of affectedFiles) {\r\n      const importChanges = await this.updateImportsForMove(\r\n        dependentFile,\r\n        symbolName,\r\n        sourceFile,\r\n        targetFile\r\n      );\r\n\r\n      if (importChanges.length > 0) {\r\n        fileChanges.push({\r\n          filePath: dependentFile,\r\n          changes: importChanges\r\n        });\r\n      }\r\n    }\r\n\r\n    // Safety analysis\r\n    const riskLevel = this.assessMoveRisk(affectedFiles.size, symbol.type);\r\n    const potentialIssues: string[] = [];\r\n\r\n    if (affectedFiles.size > 5) {\r\n      potentialIssues.push(`Affects ${affectedFiles.size} files`);\r\n    }\r\n\r\n    if (symbol.type === 'class') {\r\n      potentialIssues.push('Moving a class may affect inheritance hierarchies');\r\n    }\r\n\r\n    // Check for circular dependencies\r\n    const targetDeps = this.intelligenceEngine.getDependencies(targetFile);\r\n    if (targetDeps.has(sourceFile)) {\r\n      potentialIssues.push('⚠️  Warning: May create circular dependency');\r\n    }\r\n\r\n    const safety: SafetyAnalysis = {\r\n      riskLevel,\r\n      potentialIssues,\r\n      affectedFiles: fileChanges.length,\r\n      affectedSymbols: 1,\r\n      requiresTests: true,\r\n      breakingChanges: affectedFiles.size > 0\r\n    };\r\n\r\n    const preview = this.generateMovePreview(\r\n      symbolName,\r\n      sourceFile,\r\n      targetFile,\r\n      affectedFiles.size,\r\n      operationType\r\n    );\r\n\r\n    return {\r\n      type: operationType,\r\n      description: `Move ${symbol.type} '${symbolName}' from ${path.basename(sourceFile)} to ${path.basename(targetFile)}`,\r\n      files: fileChanges,\r\n      preview,\r\n      safety\r\n    };\r\n  }\r\n\r\n  // Helper methods\r\n\r\n  private isValidIdentifier(name: string): boolean {\r\n    return /^[a-zA-Z_$][a-zA-Z0-9_$]*$/.test(name);\r\n  }\r\n\r\n  private async analyzeSafety(refs: SymbolReference[], operation: string): Promise<SafetyAnalysis> {\r\n    const affectedFiles = new Set(refs.map((ref: SymbolReference) => ref.filePath)).size;\r\n    const affectedSymbols = refs.length;\r\n\r\n    let riskLevel: 'low' | 'medium' | 'high' = 'low';\r\n    const potentialIssues: string[] = [];\r\n\r\n    if (affectedFiles > 5) {\r\n      riskLevel = 'medium';\r\n      potentialIssues.push('Many files affected');\r\n    }\r\n\r\n    if (affectedSymbols > 20) {\r\n      riskLevel = 'high';\r\n      potentialIssues.push('Many symbol occurrences');\r\n    }\r\n\r\n    if (operation === 'rename') {\r\n      potentialIssues.push('Potential naming conflicts');\r\n    }\r\n\r\n    return {\r\n      riskLevel,\r\n      potentialIssues,\r\n      affectedFiles,\r\n      affectedSymbols,\r\n      requiresTests: affectedFiles > 1,\r\n      breakingChanges: false\r\n    };\r\n  }\r\n\r\n  private async generateRenameChanges(\r\n    ref: SymbolReference,\r\n    oldName: string,\r\n    newName: string,\r\n    includeComments: boolean,\r\n    includeStrings: boolean\r\n  ): Promise<TextChange[]> {\r\n    const changes: TextChange[] = [];\r\n    const content = await ops.promises.readFile(ref.filePath, 'utf-8');\r\n    const lines = content.split('\\n');\r\n\r\n    // Simple text replacement for now\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i];\r\n\r\n      // Skip comments and strings if not requested\r\n      if (!includeComments && (line.trim().startsWith('//') || line.trim().startsWith('*'))) {\r\n        continue;\r\n      }\r\n\r\n      if (!includeStrings && (line.includes('\"') || line.includes(\"'\"))) {\r\n        continue;\r\n      }\r\n\r\n      // Find word boundaries to avoid partial matches\r\n      const regex = new RegExp(`\\\\b${oldName}\\\\b`, 'g');\r\n      let match;\r\n\r\n      while ((match = regex.exec(line)) !== null) {\r\n        changes.push({\r\n          startLine: i,\r\n          startColumn: match.index,\r\n          endLine: i,\r\n          endColumn: match.index + oldName.length,\r\n          oldText: oldName,\r\n          newText: newName,\r\n          type: 'replace'\r\n        });\r\n      }\r\n    }\r\n\r\n    return changes;\r\n  }\r\n\r\n  private async analyzeExtractedCode(code: string, filePath: string): Promise<{\r\n    parameters: ExtractedParameter[];\r\n    localVariables: string[];\r\n    inferredReturnType: string;\r\n    returnVariable: string | undefined;\r\n    externalReferences: Set<string>;\r\n    confidence: number;\r\n  }> {\r\n    const parameters: ExtractedParameter[] = [];\r\n    const localVariables: string[] = [];\r\n    const externalReferences = new Set<string>();\r\n    let inferredReturnType = 'void';\r\n    let returnVariable: string | undefined;\r\n    let confidence = 0.5; // Default confidence\r\n\r\n    try {\r\n      // Parse the extracted code as TypeScript\r\n      const { parse } = await import(\"@typescript-eslint/typescript-estree\");\r\n\r\n      // Wrap code in a function to make it parseable\r\n      const wrappedCode = `function __temp__() {\\n${code}\\n}`;\r\n\r\n      const ast = parse(wrappedCode, {\r\n        jsx: filePath.endsWith('.tsx') || filePath.endsWith('.jsx'),\r\n        loc: true,\r\n        range: true,\r\n        errorOnUnknownASTType: false,\r\n        errorOnTypeScriptSyntacticAndSemanticIssues: false\r\n      });\r\n\r\n      // Get all symbols from the parent file for context\r\n      const fileSymbols = this.intelligenceEngine.getFileSymbols(filePath);\r\n      const fileSymbolNames = new Set(fileSymbols.map(s => s.name));\r\n\r\n      // Track variables declared within the extracted code\r\n      const declaredVariables = new Set<string>();\r\n      const usedVariables = new Set<string>();\r\n      const returnStatements: any[] = [];\r\n\r\n      // Traverse AST to find variable declarations and usages\r\n      const visit = (node: any) => {\r\n        if (!node) return;\r\n\r\n        switch (node.type) {\r\n          case 'VariableDeclaration':\r\n            node.declarations?.forEach((decl: any) => {\r\n              const varName = decl.id?.name;\r\n              if (varName) {\r\n                declaredVariables.add(varName);\r\n                localVariables.push(varName);\r\n              }\r\n            });\r\n            break;\r\n\r\n          case 'Identifier':\r\n            // Track identifier usage\r\n            const idName = node.name;\r\n            if (idName && !declaredVariables.has(idName)) {\r\n              usedVariables.add(idName);\r\n            }\r\n            break;\r\n\r\n          case 'ReturnStatement':\r\n            returnStatements.push(node);\r\n            if (node.argument) {\r\n              // Analyze return value\r\n              if (node.argument.type === 'Identifier') {\r\n                returnVariable = node.argument.name;\r\n              } else if (node.argument.type === 'ObjectExpression') {\r\n                inferredReturnType = 'object';\r\n              } else if (node.argument.type === 'ArrayExpression') {\r\n                inferredReturnType = 'any[]';\r\n              } else if (node.argument.type === 'Literal') {\r\n                inferredReturnType = typeof node.argument.value;\r\n              }\r\n            }\r\n            break;\r\n\r\n          case 'FunctionDeclaration':\r\n          case 'ArrowFunctionExpression':\r\n          case 'FunctionExpression':\r\n            // Don't traverse into nested functions for variable analysis\r\n            return;\r\n        }\r\n\r\n        // Recursively visit children\r\n        for (const key in node) {\r\n          if (key !== 'parent' && key !== 'loc' && key !== 'range') {\r\n            const child = node[key];\r\n            if (Array.isArray(child)) {\r\n              child.forEach(grandchild => {\r\n                if (grandchild && typeof grandchild === 'object') {\r\n                  visit(grandchild);\r\n                }\r\n              });\r\n            } else if (child && typeof child === 'object') {\r\n              visit(child);\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      visit(ast);\r\n\r\n      // Determine parameters: variables used but not declared locally\r\n      for (const varName of usedVariables) {\r\n        if (!declaredVariables.has(varName)) {\r\n          // Check if it's a symbol from the parent file\r\n          const isFileSymbol = fileSymbolNames.has(varName);\r\n          const isGlobal = this.isGlobalIdentifier(varName);\r\n\r\n          if (!isGlobal) {\r\n            if (isFileSymbol) {\r\n              // It's a reference to a file-level symbol\r\n              externalReferences.add(varName);\r\n            } else {\r\n              // It's likely a parameter\r\n              parameters.push({\r\n                name: varName,\r\n                type: this.inferParameterType(varName, code)\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Infer return type from return statements\r\n      if (returnStatements.length > 0) {\r\n        if (returnVariable && declaredVariables.has(returnVariable)) {\r\n          // Variable is declared locally and returned\r\n          inferredReturnType = this.inferVariableType(returnVariable, code);\r\n        } else if (returnVariable && !declaredVariables.has(returnVariable)) {\r\n          // Variable is a parameter or external reference\r\n          inferredReturnType = 'any';\r\n        }\r\n      } else {\r\n        inferredReturnType = 'void';\r\n      }\r\n\r\n      // Calculate confidence based on analysis quality\r\n      confidence = this.calculateAnalysisConfidence({\r\n        hasReturnStatements: returnStatements.length > 0,\r\n        parametersDetected: parameters.length,\r\n        localVariablesDetected: localVariables.length,\r\n        externalReferencesDetected: externalReferences.size,\r\n        returnTypeInferred: inferredReturnType !== 'any'\r\n      });\r\n\r\n    } catch (error) {\r\n      // Fallback to simple regex-based analysis\r\n      console.warn('AST analysis failed, using fallback:', error);\r\n\r\n      const lines = code.split('\\n');\r\n      for (const line of lines) {\r\n        if (line.includes('return ')) {\r\n          const returnMatch = line.match(/return\\s+([^;]+)/);\r\n          if (returnMatch) {\r\n            returnVariable = returnMatch[1].trim();\r\n            inferredReturnType = 'any';\r\n          }\r\n        }\r\n      }\r\n\r\n      confidence = 0.3; // Low confidence for fallback\r\n    }\r\n\r\n    return {\r\n      parameters,\r\n      localVariables,\r\n      inferredReturnType,\r\n      returnVariable,\r\n      externalReferences,\r\n      confidence\r\n    };\r\n  }\r\n\r\n  private isGlobalIdentifier(name: string): boolean {\r\n    // Common global identifiers that shouldn't be parameters\r\n    const globals = new Set([\r\n      'console', 'window', 'document', 'process', 'global', 'require', 'module', 'exports',\r\n      'setTimeout', 'setInterval', 'clearTimeout', 'clearInterval', 'Promise', 'Array',\r\n      'Object', 'String', 'Number', 'Boolean', 'Date', 'Math', 'JSON', 'RegExp',\r\n      'Error', 'TypeError', 'ReferenceError', 'SyntaxError', 'Map', 'Set', 'WeakMap',\r\n      'WeakSet', 'Symbol', 'Proxy', 'Reflect', 'Buffer', 'undefined', 'null', 'true',\r\n      'false', 'NaN', 'Infinity', 'isNaN', 'isFinite', 'parseInt', 'parseFloat',\r\n      'encodeURI', 'decodeURI', 'encodeURIComponent', 'decodeURIComponent'\r\n    ]);\r\n\r\n    return globals.has(name);\r\n  }\r\n\r\n  private inferParameterType(paramName: string, code: string): string {\r\n    // Try to infer type from usage patterns\r\n    const lines = code.split('\\n');\r\n\r\n    for (const line of lines) {\r\n      // Check for method calls\r\n      if (line.includes(`${paramName}.`)) {\r\n        if (line.includes('.map(') || line.includes('.filter(') || line.includes('.forEach(')) {\r\n          return 'any[]';\r\n        }\r\n        if (line.includes('.toString(') || line.includes('.toLowerCase(') || line.includes('.toUpperCase(')) {\r\n          return 'string';\r\n        }\r\n        if (line.includes('.toFixed(') || line.includes('.toPrecision(')) {\r\n          return 'number';\r\n        }\r\n      }\r\n\r\n      // Check for arithmetic operations\r\n      if (new RegExp(`${paramName}\\\\s*[+\\\\-*/]\\\\s*\\\\d`).test(line)) {\r\n        return 'number';\r\n      }\r\n\r\n      // Check for string operations\r\n      if (new RegExp(`${paramName}\\\\s*\\\\+\\\\s*['\"\\`]`).test(line) || new RegExp(`['\"\\`]\\\\s*\\\\+\\\\s*${paramName}`).test(line)) {\r\n        return 'string';\r\n      }\r\n\r\n      // Check for boolean operations\r\n      if (new RegExp(`${paramName}\\\\s*(&&|\\\\|\\\\||!)\\\\s*`).test(line)) {\r\n        return 'boolean';\r\n      }\r\n    }\r\n\r\n    return 'any'; // Default to any if we can't infer\r\n  }\r\n\r\n  private inferVariableType(varName: string, code: string): string {\r\n    // Try to infer type from variable declaration\r\n    const lines = code.split('\\n');\r\n\r\n    for (const line of lines) {\r\n      // Look for variable declaration\r\n      const declMatch = line.match(new RegExp(`(?:const|let|var)\\\\s+${varName}\\\\s*=\\\\s*(.+)`));\r\n      if (declMatch) {\r\n        const value = declMatch[1].trim();\r\n\r\n        // Check literal types\r\n        if (value.startsWith('\"') || value.startsWith(\"'\") || value.startsWith('`')) {\r\n          return 'string';\r\n        }\r\n        if (/^\\d+$/.test(value) || /^\\d+\\.\\d+$/.test(value)) {\r\n          return 'number';\r\n        }\r\n        if (value === 'true' || value === 'false') {\r\n          return 'boolean';\r\n        }\r\n        if (value.startsWith('[')) {\r\n          return 'any[]';\r\n        }\r\n        if (value.startsWith('{')) {\r\n          return 'object';\r\n        }\r\n      }\r\n\r\n      // Look for type annotation\r\n      const typeMatch = line.match(new RegExp(`(?:const|let|var)\\\\s+${varName}\\\\s*:\\\\s*([^=]+)`));\r\n      if (typeMatch) {\r\n        return typeMatch[1].trim();\r\n      }\r\n    }\r\n\r\n    return 'any';\r\n  }\r\n\r\n  private calculateAnalysisConfidence(metrics: {\r\n    hasReturnStatements: boolean;\r\n    parametersDetected: number;\r\n    localVariablesDetected: number;\r\n    externalReferencesDetected: number;\r\n    returnTypeInferred: boolean;\r\n  }): number {\r\n    let confidence = 0.5; // Base confidence\r\n\r\n    // Increase confidence for successful analysis\r\n    if (metrics.hasReturnStatements) confidence += 0.1;\r\n    if (metrics.parametersDetected > 0) confidence += 0.1;\r\n    if (metrics.localVariablesDetected > 0) confidence += 0.1;\r\n    if (metrics.returnTypeInferred) confidence += 0.15;\r\n\r\n    // Decrease confidence for complex scenarios\r\n    if (metrics.externalReferencesDetected > 3) confidence -= 0.1;\r\n    if (metrics.parametersDetected > 5) confidence -= 0.05;\r\n\r\n    return Math.max(0.1, Math.min(1.0, confidence));\r\n  }\r\n\r\n  private generateFunctionSignature(\r\n    name: string,\r\n    parameters: ExtractedParameter[],\r\n    returnType: string\r\n  ): string {\r\n    const params = parameters.map(p =>\r\n      `${p.name}${p.type ? `: ${p.type}` : ''}${p.defaultValue ? ` = ${p.defaultValue}` : ''}`\r\n    ).join(', ');\r\n\r\n    return `function ${name}(${params})${returnType !== 'void' ? `: ${returnType}` : ''}`;\r\n  }\r\n\r\n  private createExtractedFunction(\r\n    signature: string,\r\n    body: string,\r\n    _localVars: string[]\r\n  ): string {\r\n    return `${signature} {\\n${body}\\n}`;\r\n  }\r\n\r\n  private generateFunctionCall(\r\n    name: string,\r\n    parameters: ExtractedParameter[],\r\n    returnVar?: string\r\n  ): string {\r\n    const args = parameters.map(p => p.name).join(', ');\r\n    const call = `${name}(${args})`;\r\n\r\n    return returnVar ? `const ${returnVar} = ${call};` : `${call};`;\r\n  }\r\n\r\n  private getIndentation(line: string): string {\r\n    const match = line.match(/^(\\s*)/);\r\n    return match ? match[1] : '';\r\n  }\r\n\r\n  private extractFunctionBody(functionCode: string): string {\r\n    // Extract just the body content between { }\r\n    const lines = functionCode.split('\\n');\r\n    const bodyStart = lines.findIndex(line => line.includes('{')) + 1;\r\n    const bodyEnd = lines.length - 1; // Assume last line has }\r\n\r\n    return lines.slice(bodyStart, bodyEnd).join('\\n');\r\n  }\r\n\r\n  private findFunctionCalls(usages: SymbolReference[], _functionName: string): any[] {\r\n    // Find actual function calls vs just references\r\n    const calls: any[] = [];\r\n\r\n    for (const usage of usages) {\r\n      for (const u of usage.usages) {\r\n        if (u.type === 'call') {\r\n          calls.push({\r\n            filePath: usage.filePath,\r\n            line: u.line,\r\n            column: u.column,\r\n            text: u.context,\r\n            arguments: [] // Would parse actual arguments\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return calls;\r\n  }\r\n\r\n  private inlineFunction(functionBody: string, _args: string[]): string {\r\n    // Replace parameters with arguments in function body\r\n    // This is a simplified implementation\r\n    return functionBody;\r\n  }\r\n\r\n  private extractComments(code: string): string {\r\n    const lines = code.split('\\n');\r\n    const comments = lines.filter(line =>\r\n      line.trim().startsWith('//') ||\r\n      line.trim().startsWith('*') ||\r\n      line.trim().startsWith('/*')\r\n    );\r\n    return comments.join('\\n');\r\n  }\r\n\r\n  private extractSymbolCode(lines: string[], symbol: SymbolInfo): string {\r\n    // Extract the code for the symbol, including any leading comments\r\n    let startLine = symbol.startPosition.row;\r\n    let endLine = symbol.endPosition.row;\r\n\r\n    // Look for JSDoc or comments above the symbol\r\n    for (let i = startLine - 1; i >= 0; i--) {\r\n      const line = lines[i].trim();\r\n      if (line.startsWith('//') || line.startsWith('/*') || line.startsWith('*') || line === '') {\r\n        startLine = i;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Extract the lines\r\n    const symbolLines = lines.slice(startLine, endLine + 1);\r\n    return symbolLines.join('\\n');\r\n  }\r\n\r\n  private async updateImportsForMove(\r\n    dependentFile: string,\r\n    symbolName: string,\r\n    oldSourceFile: string,\r\n    newSourceFile: string\r\n  ): Promise<TextChange[]> {\r\n    const changes: TextChange[] = [];\r\n\r\n    try {\r\n      const content = await ops.promises.readFile(dependentFile, 'utf-8');\r\n      const lines = content.split('\\n');\r\n\r\n      // Calculate the new import path relative to the dependent file\r\n      const dependentDir = path.dirname(dependentFile);\r\n      const oldRelativePath = path.relative(dependentDir, oldSourceFile).replace(/\\\\/g, '/');\r\n      const newRelativePath = path.relative(dependentDir, newSourceFile).replace(/\\\\/g, '/');\r\n\r\n      // Ensure paths start with './' or '../'\r\n      const oldImportPath = oldRelativePath.startsWith('.') ? oldRelativePath : './' + oldRelativePath;\r\n      const newImportPath = newRelativePath.startsWith('.') ? newRelativePath : './' + newRelativePath;\r\n\r\n      // Remove file extension for import paths\r\n      const oldImportPathNoExt = oldImportPath.replace(/\\.(ts|tsx|js|jsx)$/, '');\r\n      const newImportPathNoExt = newImportPath.replace(/\\.(ts|tsx|js|jsx)$/, '');\r\n\r\n      // Find and update import statements\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const line = lines[i];\r\n\r\n        // Match import statements that import from the old source file\r\n        const importRegex = new RegExp(`import\\\\s+.*from\\\\s+['\"]${oldImportPathNoExt.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}['\"]`);\r\n\r\n        if (importRegex.test(line)) {\r\n          const newLine = line.replace(oldImportPathNoExt, newImportPathNoExt);\r\n\r\n          changes.push({\r\n            startLine: i,\r\n            startColumn: 0,\r\n            endLine: i,\r\n            endColumn: line.length,\r\n            oldText: line,\r\n            newText: newLine,\r\n            type: 'replace'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn(`Failed to update imports in ${dependentFile}:`, error);\r\n    }\r\n\r\n    return changes;\r\n  }\r\n\r\n  private assessMoveRisk(affectedFilesCount: number, symbolType: string): 'low' | 'medium' | 'high' {\r\n    if (affectedFilesCount === 0) {\r\n      return 'low';\r\n    } else if (affectedFilesCount <= 3) {\r\n      return symbolType === 'class' ? 'medium' : 'low';\r\n    } else if (affectedFilesCount <= 10) {\r\n      return 'medium';\r\n    } else {\r\n      return 'high';\r\n    }\r\n  }\r\n\r\n  private generateMovePreview(\r\n    symbolName: string,\r\n    sourceFile: string,\r\n    targetFile: string,\r\n    affectedFilesCount: number,\r\n    operationType: string\r\n  ): string {\r\n    const sourceName = path.basename(sourceFile);\r\n    const targetName = path.basename(targetFile);\r\n\r\n    let preview = `--- Move ${operationType === 'move_class' ? 'Class' : 'Function'} ---\\n`;\r\n    preview += `Symbol: ${symbolName}\\n`;\r\n    preview += `From: ${sourceName}\\n`;\r\n    preview += `To: ${targetName}\\n`;\r\n    preview += `\\n`;\r\n    preview += `--- Impact ---\\n`;\r\n    preview += `Files affected: ${affectedFilesCount + 2}\\n`; // +2 for source and target\r\n    preview += `Import updates: ${affectedFilesCount} files\\n`;\r\n\r\n    if (affectedFilesCount > 0) {\r\n      preview += `\\n⚠️  This operation will update import statements in ${affectedFilesCount} dependent files.\\n`;\r\n    }\r\n\r\n    return preview;\r\n  }\r\n\r\n  private generatePreview(\r\n    fileChanges: RefactoringFileChange[],\r\n    operation: string,\r\n    oldValue: string,\r\n    newValue: string\r\n  ): string {\r\n    let preview = `${operation.toUpperCase()}: ${oldValue} → ${newValue}\\n\\n`;\r\n\r\n    for (const fileChange of fileChanges) {\r\n      preview += `File: ${fileChange.filePath}\\n`;\r\n      preview += `Changes: ${fileChange.changes.length}\\n`;\r\n\r\n      for (const change of fileChange.changes.slice(0, 3)) { // Show first 3 changes\r\n        preview += `  Line ${change.startLine}: ${change.oldText} → ${change.newText}\\n`;\r\n      }\r\n\r\n      if (fileChange.changes.length > 3) {\r\n        preview += `  ... and ${fileChange.changes.length - 3} more changes\\n`;\r\n      }\r\n\r\n      preview += '\\n';\r\n    }\r\n\r\n    return preview;\r\n  }\r\n\r\n  getSchema() {\r\n    return {\r\n      type: \"object\",\r\n      properties: {\r\n        operation: {\r\n          type: \"string\",\r\n          enum: [\"rename\", \"extract_function\", \"extract_variable\", \"inline_function\", \"inline_variable\", \"move_function\", \"move_class\"],\r\n          description: \"Type of refactoring operation to perform\"\r\n        },\r\n        symbolName: {\r\n          type: \"string\",\r\n          description: \"Name of symbol to refactor (for rename, inline, move operations)\"\r\n        },\r\n        newName: {\r\n          type: \"string\",\r\n          description: \"New name for symbol (for rename operation)\"\r\n        },\r\n        filePath: {\r\n          type: \"string\",\r\n          description: \"Path to file containing the symbol\"\r\n        },\r\n        scope: {\r\n          type: \"string\",\r\n          enum: [\"file\", \"project\", \"global\"],\r\n          description: \"Scope of refactoring operation\",\r\n          default: \"project\"\r\n        },\r\n        includeComments: {\r\n          type: \"boolean\",\r\n          description: \"Include comments in rename operation\",\r\n          default: false\r\n        },\r\n        includeStrings: {\r\n          type: \"boolean\",\r\n          description: \"Include string literals in rename operation\",\r\n          default: false\r\n        },\r\n        startLine: {\r\n          type: \"integer\",\r\n          description: \"Start line for extract operations\"\r\n        },\r\n        endLine: {\r\n          type: \"integer\",\r\n          description: \"End line for extract operations\"\r\n        },\r\n        startColumn: {\r\n          type: \"integer\",\r\n          description: \"Start column for extract variable operation\"\r\n        },\r\n        endColumn: {\r\n          type: \"integer\",\r\n          description: \"End column for extract variable operation\"\r\n        },\r\n        functionName: {\r\n          type: \"string\",\r\n          description: \"Name for extracted function\"\r\n        },\r\n        variableName: {\r\n          type: \"string\",\r\n          description: \"Name for extracted variable\"\r\n        },\r\n        variableType: {\r\n          type: \"string\",\r\n          description: \"Type annotation for extracted variable\"\r\n        },\r\n        parameters: {\r\n          type: \"array\",\r\n          items: {\r\n            type: \"object\",\r\n            properties: {\r\n              name: { type: \"string\" },\r\n              type: { type: \"string\" },\r\n              defaultValue: { type: \"string\" }\r\n            },\r\n            required: [\"name\"]\r\n          },\r\n          description: \"Parameters for extracted function\"\r\n        },\r\n        returnType: {\r\n          type: \"string\",\r\n          description: \"Return type for extracted function\"\r\n        },\r\n        targetFile: {\r\n          type: \"string\",\r\n          description: \"Target file for move operations\"\r\n        },\r\n        createTargetFile: {\r\n          type: \"boolean\",\r\n          description: \"Create target file if it doesn't exist\",\r\n          default: false\r\n        },\r\n        preserveComments: {\r\n          type: \"boolean\",\r\n          description: \"Preserve comments in inline operations\",\r\n          default: true\r\n        }\r\n      },\r\n      required: [\"operation\"]\r\n    };\r\n  }\r\n}","import { parse as parseTS } from \"@typescript-eslint/typescript-estree\";\r\nimport chokidar, { FSWatcher } from \"chokidar\";\r\nimport * as ops from \"fs\";\r\nimport path from \"path\";\r\nimport { glob } from \"glob\";\r\nimport { SymbolInfo, ImportInfo, ExportInfo, ParseError } from \"./types.js\";\r\n\r\n// Conditional tree-sitter imports\r\nlet Parser: any;\r\nlet JavaScript: any;\r\nlet TypeScript: any;\r\nlet Python: any;\r\n\r\ntry {\r\n  Parser = require(\"tree-sitter\");\r\n  JavaScript = require(\"tree-sitter-javascript\");\r\n  TypeScript = require(\"tree-sitter-typescript\");\r\n  Python = require(\"tree-sitter-python\");\r\n} catch {\r\n  console.warn(\"Tree-sitter modules not available, using TypeScript-only parsing\");\r\n}\r\n\r\n// ==================== Core Data Structures ====================\r\n\r\nexport interface FileMetadata {\r\n  filePath: string;\r\n  absolutePath: string;\r\n  language: string;\r\n  lastModified: number;\r\n  hash: string;\r\n  parseTime: number;\r\n  indexed: boolean;\r\n}\r\n\r\nexport interface SymbolReference {\r\n  symbol: SymbolInfo;\r\n  filePath: string;\r\n  usages: SymbolUsage[];\r\n}\r\n\r\nexport interface SymbolUsage {\r\n  line: number;\r\n  column: number;\r\n  context: string;\r\n  type: 'definition' | 'call' | 'reference' | 'import' | 'export';\r\n}\r\n\r\nexport interface CrossReference {\r\n  symbolName: string;\r\n  definitionFile: string;\r\n  definitionLocation: { line: number; column: number };\r\n  references: Array<{\r\n    file: string;\r\n    line: number;\r\n    column: number;\r\n    type: SymbolUsage['type'];\r\n  }>;\r\n}\r\n\r\nexport interface ImpactAnalysis {\r\n  affectedFiles: Set<string>;\r\n  affectedSymbols: Set<string>;\r\n  circularDependencies: string[][];\r\n  riskLevel: 'low' | 'medium' | 'high';\r\n  warnings: string[];\r\n}\r\n\r\nexport interface EngineStatistics {\r\n  totalFiles: number;\r\n  indexedFiles: number;\r\n  totalSymbols: number;\r\n  totalDependencies: number;\r\n  memoryUsage: number;\r\n  lastUpdateTime: number;\r\n  averageParseTime: number;\r\n}\r\n\r\n// ==================== Code Intelligence Engine ====================\r\n\r\nexport class CodeIntelligenceEngine {\r\n  // Core data structures\r\n  private fileAsts: Map<string, any> = new Map(); // filePath -> AST\r\n  private fileMetadata: Map<string, FileMetadata> = new Map(); // filePath -> metadata\r\n  private symbolIndex: Map<string, SymbolReference[]> = new Map(); // symbolName -> references\r\n  private dependencyGraph: Map<string, Set<string>> = new Map(); // filePath -> dependencies\r\n  private reverseDependencies: Map<string, Set<string>> = new Map(); // filePath -> dependents\r\n  private crossReferences: Map<string, CrossReference> = new Map(); // symbolName -> cross-refs\r\n  private parseErrors: Map<string, ParseError[]> = new Map(); // filePath -> errors\r\n\r\n  // Parser instances\r\n  private parsers: Map<string, any> = new Map();\r\n\r\n  // File watcher\r\n  private watcher: FSWatcher | null = null;\r\n  private isInitialized: boolean = false;\r\n  private isIndexing: boolean = false;\r\n\r\n  // Configuration\r\n  private rootPath: string;\r\n  private filePatterns: string[] = ['**/*.{ts,tsx,js,jsx,py}'];\r\n  private excludePatterns: string[] = ['**/node_modules/**', '**/dist/**', '**/.git/**', '**/.grok/**'];\r\n\r\n  // Performance tracking\r\n  private statistics: EngineStatistics = {\r\n    totalFiles: 0,\r\n    indexedFiles: 0,\r\n    totalSymbols: 0,\r\n    totalDependencies: 0,\r\n    memoryUsage: 0,\r\n    lastUpdateTime: 0,\r\n    averageParseTime: 0\r\n  };\r\n\r\n  // Debouncing for file changes\r\n  private pendingUpdates: Map<string, NodeJS.Timeout> = new Map();\r\n  private updateDebounceMs: number = 300;\r\n\r\n  constructor(rootPath: string, options?: {\r\n    filePatterns?: string[];\r\n    excludePatterns?: string[];\r\n    updateDebounceMs?: number;\r\n  }) {\r\n    this.rootPath = path.resolve(rootPath);\r\n\r\n    if (options?.filePatterns) {\r\n      this.filePatterns = options.filePatterns;\r\n    }\r\n    if (options?.excludePatterns) {\r\n      this.excludePatterns = options.excludePatterns;\r\n    }\r\n    if (options?.updateDebounceMs !== undefined) {\r\n      this.updateDebounceMs = options.updateDebounceMs;\r\n    }\r\n\r\n    this.initializeParsers();\r\n  }\r\n\r\n  // ==================== Initialization ====================\r\n\r\n  private initializeParsers(): void {\r\n    if (!Parser || !JavaScript || !TypeScript || !Python) {\r\n      console.log(\"Tree-sitter parsers not available, using TypeScript-only parsing\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // JavaScript/JSX parser\r\n      const jsParser = new Parser();\r\n      jsParser.setLanguage(JavaScript as any);\r\n      this.parsers.set('javascript', jsParser);\r\n      this.parsers.set('js', jsParser);\r\n      this.parsers.set('jsx', jsParser);\r\n\r\n      // TypeScript/TSX parser\r\n      const tsParser = new Parser();\r\n      tsParser.setLanguage((TypeScript as any).typescript);\r\n      this.parsers.set('typescript', tsParser);\r\n      this.parsers.set('ts', tsParser);\r\n\r\n      const tsxParser = new Parser();\r\n      tsxParser.setLanguage((TypeScript as any).tsx);\r\n      this.parsers.set('tsx', tsxParser);\r\n\r\n      // Python parser\r\n      const pyParser = new Parser();\r\n      pyParser.setLanguage(Python as any);\r\n      this.parsers.set('python', pyParser);\r\n      this.parsers.set('py', pyParser);\r\n    } catch (error) {\r\n      console.warn('Failed to initialize some parsers:', error);\r\n    }\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    if (this.isInitialized) {\r\n      console.warn('CodeIntelligenceEngine already initialized');\r\n      return;\r\n    }\r\n\r\n    console.log(`🧠 Initializing Code Intelligence Engine for: ${this.rootPath}`);\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      // 1. Scan all source files\r\n      const sourceFiles = await this.scanSourceFiles();\r\n      console.log(`   Found ${sourceFiles.length} source files`);\r\n\r\n      // 2. Index all files\r\n      this.isIndexing = true;\r\n      await this.indexFiles(sourceFiles);\r\n      this.isIndexing = false;\r\n\r\n      // 3. Build cross-references\r\n      this.buildCrossReferences();\r\n\r\n      // 4. Start file watcher\r\n      this.startFileWatcher();\r\n\r\n      // 5. Update statistics\r\n      this.updateStatistics();\r\n\r\n      this.isInitialized = true;\r\n      const duration = Date.now() - startTime;\r\n      console.log(`✅ Engine initialized in ${duration}ms`);\r\n      console.log(`   Indexed ${this.statistics.indexedFiles} files, ${this.statistics.totalSymbols} symbols`);\r\n    } catch (error) {\r\n      console.error('Failed to initialize Code Intelligence Engine:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async scanSourceFiles(): Promise<string[]> {\r\n    const allFiles: string[] = [];\r\n\r\n    for (const pattern of this.filePatterns) {\r\n      const files = await glob(pattern, {\r\n        cwd: this.rootPath,\r\n        absolute: true,\r\n        ignore: this.excludePatterns,\r\n        nodir: true\r\n      });\r\n      allFiles.push(...files);\r\n    }\r\n\r\n    return [...new Set(allFiles)]; // Remove duplicates\r\n  }\r\n\r\n  private async indexFiles(files: string[]): Promise<void> {\r\n    const total = files.length;\r\n    let indexed = 0;\r\n    const batchSize = 10;\r\n\r\n    // Process in batches to avoid overwhelming the system\r\n    for (let i = 0; i < files.length; i += batchSize) {\r\n      const batch = files.slice(i, i + batchSize);\r\n      await Promise.all(batch.map(file => this.indexFile(file)));\r\n      indexed += batch.length;\r\n\r\n      if (indexed % 50 === 0 || indexed === total) {\r\n        console.log(`   Indexing progress: ${indexed}/${total}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private async indexFile(filePath: string): Promise<void> {\r\n    try {\r\n      const parseStart = Date.now();\r\n\r\n      // Get file stats\r\n      const stats = await ops.promises.stat(filePath);\r\n      const content = await ops.promises.readFile(filePath, 'utf-8');\r\n      const hash = this.computeHash(content);\r\n      const language = this.detectLanguage(filePath);\r\n\r\n      // Check if file needs reindexing\r\n      const existing = this.fileMetadata.get(filePath);\r\n      if (existing && existing.hash === hash) {\r\n        return; // No changes, skip reindexing\r\n      }\r\n\r\n      // Parse file\r\n      const parseResult = await this.parseFile(filePath, content, language);\r\n      const parseTime = Date.now() - parseStart;\r\n\r\n      // Store AST\r\n      if (parseResult.tree) {\r\n        this.fileAsts.set(filePath, parseResult.tree);\r\n      }\r\n\r\n      // Store metadata\r\n      this.fileMetadata.set(filePath, {\r\n        filePath: path.relative(this.rootPath, filePath),\r\n        absolutePath: filePath,\r\n        language,\r\n        lastModified: stats.mtimeMs,\r\n        hash,\r\n        parseTime,\r\n        indexed: true\r\n      });\r\n\r\n      // Index symbols\r\n      this.indexSymbols(filePath, parseResult.symbols);\r\n\r\n      // Index dependencies\r\n      this.indexDependencies(filePath, parseResult.imports);\r\n\r\n      // Store errors\r\n      if (parseResult.errors.length > 0) {\r\n        this.parseErrors.set(filePath, parseResult.errors);\r\n      } else {\r\n        this.parseErrors.delete(filePath);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.warn(`Failed to index ${filePath}:`, error);\r\n      this.parseErrors.set(filePath, [{\r\n        message: error instanceof Error ? error.message : String(error),\r\n        line: 0,\r\n        column: 0,\r\n        severity: 'error'\r\n      }]);\r\n    }\r\n  }\r\n\r\n  private async parseFile(filePath: string, content: string, language: string): Promise<{\r\n    tree: any;\r\n    symbols: SymbolInfo[];\r\n    imports: ImportInfo[];\r\n    exports: ExportInfo[];\r\n    errors: ParseError[];\r\n  }> {\r\n    const errors: ParseError[] = [];\r\n\r\n    try {\r\n      // Use TypeScript ESTree for TS/JS files\r\n      if (language === 'typescript' || language === 'tsx' || language === 'javascript' || language === 'jsx') {\r\n        return await this.parseWithTypeScript(content, language);\r\n      }\r\n\r\n      // Use tree-sitter for other languages\r\n      return await this.parseWithTreeSitter(content, language, filePath);\r\n    } catch (error) {\r\n      errors.push({\r\n        message: error instanceof Error ? error.message : String(error),\r\n        line: 0,\r\n        column: 0,\r\n        severity: 'error'\r\n      });\r\n\r\n      return {\r\n        tree: null,\r\n        symbols: [],\r\n        imports: [],\r\n        exports: [],\r\n        errors\r\n      };\r\n    }\r\n  }\r\n\r\n  private async parseWithTypeScript(content: string, language: string): Promise<any> {\r\n    try {\r\n      const ast = parseTS(content, {\r\n        jsx: language === 'tsx' || language === 'jsx',\r\n        loc: true,\r\n        range: true,\r\n        comment: true,\r\n        attachComments: true,\r\n        errorOnUnknownASTType: false,\r\n        errorOnTypeScriptSyntacticAndSemanticIssues: false\r\n      });\r\n\r\n      const symbols = this.extractTypeScriptSymbols(ast, content);\r\n      const imports = this.extractTypeScriptImports(ast);\r\n      const exports = this.extractTypeScriptExports(ast);\r\n\r\n      return {\r\n        tree: ast,\r\n        symbols,\r\n        imports,\r\n        exports,\r\n        errors: []\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        tree: null,\r\n        symbols: [],\r\n        imports: [],\r\n        exports: [],\r\n        errors: [{\r\n          message: error instanceof Error ? error.message : String(error),\r\n          line: 0,\r\n          column: 0,\r\n          severity: 'error'\r\n        }]\r\n      };\r\n    }\r\n  }\r\n\r\n  private async parseWithTreeSitter(content: string, language: string, _filePath: string): Promise<any> {\r\n    try {\r\n      const parser = this.parsers.get(language);\r\n      if (!parser) {\r\n        throw new Error(`No parser available for language: ${language}`);\r\n      }\r\n\r\n      const tree = parser.parse(content);\r\n      const symbols = this.extractTreeSitterSymbols(tree.rootNode, content, language);\r\n      const imports = this.extractTreeSitterImports(tree.rootNode, content, language);\r\n      const exports = this.extractTreeSitterExports(tree.rootNode, content, language);\r\n\r\n      return {\r\n        tree: tree.rootNode,\r\n        symbols,\r\n        imports,\r\n        exports,\r\n        errors: []\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        tree: null,\r\n        symbols: [],\r\n        imports: [],\r\n        exports: [],\r\n        errors: [{\r\n          message: error instanceof Error ? error.message : String(error),\r\n          line: 0,\r\n          column: 0,\r\n          severity: 'error'\r\n        }]\r\n      };\r\n    }\r\n  }\r\n\r\n  // ==================== Symbol Extraction (TypeScript) ====================\r\n\r\n  private extractTypeScriptSymbols(ast: any, _content: string): SymbolInfo[] {\r\n    const symbols: SymbolInfo[] = [];\r\n\r\n    const visit = (node: any, scope = 'global') => {\r\n      if (!node) return;\r\n\r\n      const getPosition = (pos: any) => ({\r\n        row: pos.line - 1,\r\n        column: pos.column\r\n      });\r\n\r\n      switch (node.type) {\r\n        case 'FunctionDeclaration':\r\n          if (node.id?.name) {\r\n            symbols.push({\r\n              name: node.id.name,\r\n              type: 'function',\r\n              startPosition: getPosition(node.loc.start),\r\n              endPosition: getPosition(node.loc.end),\r\n              scope,\r\n              isAsync: node.async,\r\n              parameters: node.params?.map((param: any) => ({\r\n                name: param.name || (param.left?.name) || 'unknown',\r\n                type: param.typeAnnotation?.typeAnnotation?.type,\r\n                optional: param.optional\r\n              })) || []\r\n            });\r\n          }\r\n          break;\r\n\r\n        case 'ClassDeclaration':\r\n          if (node.id?.name) {\r\n            symbols.push({\r\n              name: node.id.name,\r\n              type: 'class',\r\n              startPosition: getPosition(node.loc.start),\r\n              endPosition: getPosition(node.loc.end),\r\n              scope\r\n            });\r\n          }\r\n          // Visit class methods\r\n          node.body?.body?.forEach((member: any) => {\r\n            if (member.type === 'MethodDefinition' && member.key?.name) {\r\n              symbols.push({\r\n                name: member.key.name,\r\n                type: 'method',\r\n                startPosition: getPosition(member.loc.start),\r\n                endPosition: getPosition(member.loc.end),\r\n                scope: `${node.id?.name || 'unknown'}.${member.key.name}`,\r\n                accessibility: member.accessibility,\r\n                isStatic: member.static,\r\n                isAsync: member.value?.async\r\n              });\r\n            }\r\n          });\r\n          break;\r\n\r\n        case 'VariableDeclaration':\r\n          node.declarations?.forEach((decl: any) => {\r\n            if (decl.id?.name) {\r\n              symbols.push({\r\n                name: decl.id.name,\r\n                type: 'variable',\r\n                startPosition: getPosition(decl.loc.start),\r\n                endPosition: getPosition(decl.loc.end),\r\n                scope\r\n              });\r\n            }\r\n          });\r\n          break;\r\n\r\n        case 'TSInterfaceDeclaration':\r\n          if (node.id?.name) {\r\n            symbols.push({\r\n              name: node.id.name,\r\n              type: 'interface',\r\n              startPosition: getPosition(node.loc.start),\r\n              endPosition: getPosition(node.loc.end),\r\n              scope\r\n            });\r\n          }\r\n          break;\r\n\r\n        case 'TSEnumDeclaration':\r\n          if (node.id?.name) {\r\n            symbols.push({\r\n              name: node.id.name,\r\n              type: 'enum',\r\n              startPosition: getPosition(node.loc.start),\r\n              endPosition: getPosition(node.loc.end),\r\n              scope\r\n            });\r\n          }\r\n          break;\r\n\r\n        case 'TSTypeAliasDeclaration':\r\n          if (node.id?.name) {\r\n            symbols.push({\r\n              name: node.id.name,\r\n              type: 'type',\r\n              startPosition: getPosition(node.loc.start),\r\n              endPosition: getPosition(node.loc.end),\r\n              scope\r\n            });\r\n          }\r\n          break;\r\n      }\r\n\r\n      // Recursively visit children\r\n      for (const key in node) {\r\n        if (key !== 'parent' && key !== 'loc' && key !== 'range') {\r\n          const child = node[key];\r\n          if (Array.isArray(child)) {\r\n            child.forEach(grandchild => {\r\n              if (grandchild && typeof grandchild === 'object') {\r\n                visit(grandchild, scope);\r\n              }\r\n            });\r\n          } else if (child && typeof child === 'object') {\r\n            visit(child, scope);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    visit(ast);\r\n    return symbols;\r\n  }\r\n\r\n  private extractTypeScriptImports(ast: any): ImportInfo[] {\r\n    const imports: ImportInfo[] = [];\r\n\r\n    const visit = (node: any) => {\r\n      if (node.type === 'ImportDeclaration') {\r\n        const specifiers: any[] = [];\r\n\r\n        node.specifiers?.forEach((spec: any) => {\r\n          switch (spec.type) {\r\n            case 'ImportDefaultSpecifier':\r\n              specifiers.push({\r\n                name: spec.local.name,\r\n                isDefault: true\r\n              });\r\n              break;\r\n            case 'ImportNamespaceSpecifier':\r\n              specifiers.push({\r\n                name: spec.local.name,\r\n                isNamespace: true\r\n              });\r\n              break;\r\n            case 'ImportSpecifier':\r\n              specifiers.push({\r\n                name: spec.imported.name,\r\n                alias: spec.local.name !== spec.imported.name ? spec.local.name : undefined\r\n              });\r\n              break;\r\n          }\r\n        });\r\n\r\n        imports.push({\r\n          source: node.source.value,\r\n          specifiers,\r\n          isTypeOnly: node.importKind === 'type',\r\n          startPosition: {\r\n            row: node.loc.start.line - 1,\r\n            column: node.loc.start.column\r\n          }\r\n        });\r\n      }\r\n\r\n      // Recursively visit children\r\n      for (const key in node) {\r\n        if (key !== 'parent' && key !== 'loc' && key !== 'range') {\r\n          const child = node[key];\r\n          if (Array.isArray(child)) {\r\n            child.forEach(grandchild => {\r\n              if (grandchild && typeof grandchild === 'object') {\r\n                visit(grandchild);\r\n              }\r\n            });\r\n          } else if (child && typeof child === 'object') {\r\n            visit(child);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    visit(ast);\r\n    return imports;\r\n  }\r\n\r\n  private extractTypeScriptExports(ast: any): ExportInfo[] {\r\n    const exports: ExportInfo[] = [];\r\n\r\n    const visit = (node: any) => {\r\n      switch (node.type) {\r\n        case 'ExportNamedDeclaration':\r\n          if (node.declaration) {\r\n            // Export declaration (export function foo() {})\r\n            if (node.declaration.id?.name) {\r\n              exports.push({\r\n                name: node.declaration.id.name,\r\n                type: this.getDeclarationType(node.declaration.type),\r\n                startPosition: {\r\n                  row: node.loc.start.line - 1,\r\n                  column: node.loc.start.column\r\n                }\r\n              });\r\n            }\r\n          } else if (node.specifiers) {\r\n            // Export specifiers (export { foo, bar })\r\n            node.specifiers.forEach((spec: any) => {\r\n              exports.push({\r\n                name: spec.exported.name,\r\n                type: 'variable',\r\n                startPosition: {\r\n                  row: node.loc.start.line - 1,\r\n                  column: node.loc.start.column\r\n                },\r\n                source: node.source?.value\r\n              });\r\n            });\r\n          }\r\n          break;\r\n\r\n        case 'ExportDefaultDeclaration':\r\n          const name = node.declaration?.id?.name || 'default';\r\n          exports.push({\r\n            name,\r\n            type: this.getDeclarationType(node.declaration?.type) || 'default',\r\n            startPosition: {\r\n              row: node.loc.start.line - 1,\r\n              column: node.loc.start.column\r\n            },\r\n            isDefault: true\r\n          });\r\n          break;\r\n      }\r\n\r\n      // Recursively visit children\r\n      for (const key in node) {\r\n        if (key !== 'parent' && key !== 'loc' && key !== 'range') {\r\n          const child = node[key];\r\n          if (Array.isArray(child)) {\r\n            child.forEach(grandchild => {\r\n              if (grandchild && typeof grandchild === 'object') {\r\n                visit(grandchild);\r\n              }\r\n            });\r\n          } else if (child && typeof child === 'object') {\r\n            visit(child);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    visit(ast);\r\n    return exports;\r\n  }\r\n\r\n  // ==================== Symbol Extraction (Tree-sitter) ====================\r\n\r\n  private extractTreeSitterSymbols(node: any, _content: string, _language: string): SymbolInfo[] {\r\n    const symbols: SymbolInfo[] = [];\r\n\r\n    const visit = (node: any, scope = 'global') => {\r\n      const startPos = { row: node.startPosition.row, column: node.startPosition.column };\r\n      const endPos = { row: node.endPosition.row, column: node.endPosition.column };\r\n\r\n      switch (node.type) {\r\n        case 'function_declaration':\r\n        case 'function_definition':\r\n          const funcName = this.extractNodeName(node, 'name') || this.extractNodeName(node, 'identifier');\r\n          if (funcName) {\r\n            symbols.push({\r\n              name: funcName,\r\n              type: 'function',\r\n              startPosition: startPos,\r\n              endPosition: endPos,\r\n              scope\r\n            });\r\n          }\r\n          break;\r\n\r\n        case 'class_declaration':\r\n        case 'class_definition':\r\n          const className = this.extractNodeName(node, 'name') || this.extractNodeName(node, 'identifier');\r\n          if (className) {\r\n            symbols.push({\r\n              name: className,\r\n              type: 'class',\r\n              startPosition: startPos,\r\n              endPosition: endPos,\r\n              scope\r\n            });\r\n          }\r\n          break;\r\n\r\n        case 'variable_declaration':\r\n        case 'lexical_declaration':\r\n          node.children?.forEach((child: any) => {\r\n            if (child.type === 'variable_declarator') {\r\n              const varName = this.extractNodeName(child, 'name') || this.extractNodeName(child, 'identifier');\r\n              if (varName) {\r\n                symbols.push({\r\n                  name: varName,\r\n                  type: 'variable',\r\n                  startPosition: { row: child.startPosition.row, column: child.startPosition.column },\r\n                  endPosition: { row: child.endPosition.row, column: child.endPosition.column },\r\n                  scope\r\n                });\r\n              }\r\n            }\r\n          });\r\n          break;\r\n      }\r\n\r\n      // Recursively visit children\r\n      node.children?.forEach((child: any) => visit(child, scope));\r\n    };\r\n\r\n    visit(node);\r\n    return symbols;\r\n  }\r\n\r\n  private extractTreeSitterImports(node: any, content: string, _language: string): ImportInfo[] {\r\n    const imports: ImportInfo[] = [];\r\n\r\n    const visit = (node: any) => {\r\n      if (node.type === 'import_statement' || node.type === 'import_from_statement') {\r\n        const sourceNode = node.children?.find((child: any) =>\r\n          child.type === 'string' || child.type === 'string_literal'\r\n        );\r\n\r\n        if (sourceNode) {\r\n          const source = content.slice(sourceNode.startIndex + 1, sourceNode.endIndex - 1);\r\n\r\n          imports.push({\r\n            source,\r\n            specifiers: [],\r\n            startPosition: {\r\n              row: node.startPosition.row,\r\n              column: node.startPosition.column\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      node.children?.forEach((child: any) => visit(child));\r\n    };\r\n\r\n    visit(node);\r\n    return imports;\r\n  }\r\n\r\n  private extractTreeSitterExports(node: any, _content: string, _language: string): ExportInfo[] {\r\n    const exports: ExportInfo[] = [];\r\n\r\n    const visit = (node: any) => {\r\n      if (node.type === 'export_statement') {\r\n        const name = this.extractNodeName(node, 'name') || 'unknown';\r\n        exports.push({\r\n          name,\r\n          type: 'variable',\r\n          startPosition: {\r\n            row: node.startPosition.row,\r\n            column: node.startPosition.column\r\n          }\r\n        });\r\n      }\r\n\r\n      node.children?.forEach((child: any) => visit(child));\r\n    };\r\n\r\n    visit(node);\r\n    return exports;\r\n  }\r\n\r\n  // ==================== Symbol Indexing ====================\r\n\r\n  private indexSymbols(filePath: string, symbols: SymbolInfo[]): void {\r\n    for (const symbol of symbols) {\r\n      // Index by symbol name\r\n      const existing = this.symbolIndex.get(symbol.name) || [];\r\n\r\n      // Remove old entries for this file\r\n      const filtered = existing.filter(ref => ref.filePath !== filePath);\r\n\r\n      // Add new entry\r\n      const symbolRef: SymbolReference = {\r\n        symbol,\r\n        filePath,\r\n        usages: [] // Will be populated by buildCrossReferences\r\n      };\r\n\r\n      filtered.push(symbolRef);\r\n      this.symbolIndex.set(symbol.name, filtered);\r\n    }\r\n  }\r\n\r\n  private indexDependencies(filePath: string, imports: ImportInfo[]): void {\r\n    const dependencies = new Set<string>();\r\n\r\n    for (const importInfo of imports) {\r\n      // Only track internal dependencies (relative imports)\r\n      if (importInfo.source.startsWith('.')) {\r\n        const resolvedPath = this.resolveImportPath(importInfo.source, filePath);\r\n        if (resolvedPath) {\r\n          dependencies.add(resolvedPath);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.dependencyGraph.set(filePath, dependencies);\r\n\r\n    // Update reverse dependencies\r\n    for (const dependency of dependencies) {\r\n      const dependents = this.reverseDependencies.get(dependency) || new Set();\r\n      dependents.add(filePath);\r\n      this.reverseDependencies.set(dependency, dependents);\r\n    }\r\n  }\r\n\r\n  private resolveImportPath(importPath: string, currentFile: string): string | null {\r\n    const currentDir = path.dirname(currentFile);\r\n    const basePath = path.resolve(currentDir, importPath);\r\n\r\n    // Try different extensions\r\n    const extensions = ['.ts', '.tsx', '.js', '.jsx', '.json'];\r\n\r\n    for (const ext of extensions) {\r\n      const fullPath = basePath + ext;\r\n      if (ops.existsSync(fullPath)) {\r\n        return fullPath;\r\n      }\r\n    }\r\n\r\n    // Try index files\r\n    for (const ext of extensions) {\r\n      const indexPath = path.join(basePath, `index${ext}`);\r\n      if (ops.existsSync(indexPath)) {\r\n        return indexPath;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  // ==================== Cross-Reference Building ====================\r\n\r\n  private buildCrossReferences(): void {\r\n    this.crossReferences.clear();\r\n\r\n    for (const [symbolName, symbolRefs] of this.symbolIndex) {\r\n      // Find the definition (usually the first occurrence)\r\n      const definition = symbolRefs.find(ref =>\r\n        ref.symbol.startPosition.row >= 0\r\n      );\r\n\r\n      if (!definition) continue;\r\n\r\n      const crossRef: CrossReference = {\r\n        symbolName,\r\n        definitionFile: definition.filePath,\r\n        definitionLocation: {\r\n          line: definition.symbol.startPosition.row,\r\n          column: definition.symbol.startPosition.column\r\n        },\r\n        references: []\r\n      };\r\n\r\n      // Find all usages across files\r\n      for (const ref of symbolRefs) {\r\n        // Add definition as a reference\r\n        if (ref.filePath === definition.filePath) {\r\n          crossRef.references.push({\r\n            file: ref.filePath,\r\n            line: ref.symbol.startPosition.row,\r\n            column: ref.symbol.startPosition.column,\r\n            type: 'definition'\r\n          });\r\n        }\r\n\r\n        // Find usages in file content\r\n        try {\r\n          const content = ops.readFileSync(ref.filePath, 'utf-8');\r\n          const lines = content.split('\\n');\r\n\r\n          for (let i = 0; i < lines.length; i++) {\r\n            const line = lines[i];\r\n            const regex = new RegExp(`\\\\b${symbolName}\\\\b`, 'g');\r\n            let match;\r\n\r\n            while ((match = regex.exec(line)) !== null) {\r\n              // Skip if this is the definition itself\r\n              if (ref.filePath === definition.filePath &&\r\n                i === definition.symbol.startPosition.row) {\r\n                continue;\r\n              }\r\n\r\n              let usageType: SymbolUsage['type'] = 'reference';\r\n\r\n              if (line.includes('import') && line.includes(symbolName)) {\r\n                usageType = 'import';\r\n              } else if (line.includes('export') && line.includes(symbolName)) {\r\n                usageType = 'export';\r\n              } else if (line.includes(symbolName + '(')) {\r\n                usageType = 'call';\r\n              }\r\n\r\n              crossRef.references.push({\r\n                file: ref.filePath,\r\n                line: i,\r\n                column: match.index,\r\n                type: usageType\r\n              });\r\n            }\r\n          }\r\n        } catch {\r\n          // Skip if file can't be read\r\n        }\r\n      }\r\n\r\n      this.crossReferences.set(symbolName, crossRef);\r\n    }\r\n  }\r\n\r\n  // ==================== File Watching ====================\r\n\r\n  private startFileWatcher(): void {\r\n    console.log('   Starting file watcher...');\r\n\r\n    this.watcher = chokidar.watch(this.filePatterns, {\r\n      cwd: this.rootPath,\r\n      ignored: this.excludePatterns,\r\n      persistent: true,\r\n      ignoreInitial: true, // Don't fire events for existing files\r\n      awaitWriteFinish: {\r\n        stabilityThreshold: 200,\r\n        pollInterval: 100\r\n      }\r\n    });\r\n\r\n    this.watcher\r\n      .on('add', (relPath: string) => {\r\n        const absPath = path.resolve(this.rootPath, relPath);\r\n        this.scheduleFileUpdate(absPath, 'add');\r\n      })\r\n      .on('change', (relPath: string) => {\r\n        const absPath = path.resolve(this.rootPath, relPath);\r\n        this.scheduleFileUpdate(absPath, 'change');\r\n      })\r\n      .on('unlink', (relPath: string) => {\r\n        const absPath = path.resolve(this.rootPath, relPath);\r\n        this.handleFileDelete(absPath);\r\n      })\r\n      .on('error', (err: unknown) => {\r\n        console.error('File watcher error:', err);\r\n      });\r\n  }\r\n\r\n  private scheduleFileUpdate(filePath: string, event: 'add' | 'change'): void {\r\n    // Debounce updates to avoid excessive reindexing\r\n    const existing = this.pendingUpdates.get(filePath);\r\n    if (existing) {\r\n      clearTimeout(existing);\r\n    }\r\n\r\n    const timeout = setTimeout(async () => {\r\n      this.pendingUpdates.delete(filePath);\r\n      await this.handleFileUpdate(filePath, event);\r\n    }, this.updateDebounceMs);\r\n\r\n    this.pendingUpdates.set(filePath, timeout);\r\n  }\r\n\r\n  private async handleFileUpdate(filePath: string, _event: 'add' | 'change'): Promise<void> {\r\n    if (this.isIndexing) {\r\n      // Skip updates during initial indexing\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Get affected symbols before reindexing\r\n      const oldSymbols = this.getFileSymbols(filePath);\r\n\r\n      // Reindex the file\r\n      await this.indexFile(filePath);\r\n\r\n      // Rebuild cross-references for affected symbols\r\n      const newSymbols = this.getFileSymbols(filePath);\r\n      const affectedSymbols = new Set([\r\n        ...oldSymbols.map(s => s.name),\r\n        ...newSymbols.map(s => s.name)\r\n      ]);\r\n\r\n      // Rebuild cross-references only for affected symbols\r\n      for (const symbolName of affectedSymbols) {\r\n        const refs = this.symbolIndex.get(symbolName);\r\n        if (refs) {\r\n          this.rebuildSymbolCrossReference(symbolName, refs);\r\n        }\r\n      }\r\n\r\n      // Update statistics\r\n      this.updateStatistics();\r\n\r\n      console.log(`   Updated: ${path.relative(this.rootPath, filePath)}`);\r\n    } catch (error) {\r\n      console.error(`Failed to update ${filePath}:`, error);\r\n    }\r\n  }\r\n\r\n  private handleFileDelete(filePath: string): void {\r\n    // Remove from all data structures\r\n    this.fileAsts.delete(filePath);\r\n    this.fileMetadata.delete(filePath);\r\n    this.parseErrors.delete(filePath);\r\n\r\n    // Remove symbols\r\n    const symbols = this.getFileSymbols(filePath);\r\n    for (const symbol of symbols) {\r\n      const refs = this.symbolIndex.get(symbol.name);\r\n      if (refs) {\r\n        const filtered = refs.filter(ref => ref.filePath !== filePath);\r\n        if (filtered.length > 0) {\r\n          this.symbolIndex.set(symbol.name, filtered);\r\n        } else {\r\n          this.symbolIndex.delete(symbol.name);\r\n        }\r\n      }\r\n      this.crossReferences.delete(symbol.name);\r\n    }\r\n\r\n    // Remove from dependency graph\r\n    this.dependencyGraph.delete(filePath);\r\n    this.reverseDependencies.delete(filePath);\r\n\r\n    // Remove from reverse dependencies\r\n    for (const [file, dependents] of this.reverseDependencies) {\r\n      if (dependents.has(filePath)) {\r\n        dependents.delete(filePath);\r\n        if (dependents.size === 0) {\r\n          this.reverseDependencies.delete(file);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.updateStatistics();\r\n    console.log(`   Deleted: ${path.relative(this.rootPath, filePath)}`);\r\n  }\r\n\r\n  private rebuildSymbolCrossReference(symbolName: string, refs: SymbolReference[]): void {\r\n    const definition = refs.find(ref =>\r\n      ref.symbol.startPosition.row >= 0\r\n    );\r\n\r\n    if (!definition) return;\r\n\r\n    const crossRef: CrossReference = {\r\n      symbolName,\r\n      definitionFile: definition.filePath,\r\n      definitionLocation: {\r\n        line: definition.symbol.startPosition.row,\r\n        column: definition.symbol.startPosition.column\r\n      },\r\n      references: []\r\n    };\r\n\r\n    // Simplified cross-reference rebuilding (full implementation similar to buildCrossReferences)\r\n    this.crossReferences.set(symbolName, crossRef);\r\n  }\r\n\r\n  // ==================== Public Query API ====================\r\n\r\n  getAST(filePath: string): any | undefined {\r\n    return this.fileAsts.get(filePath);\r\n  }\r\n\r\n  findSymbol(symbolName: string): SymbolReference[] {\r\n    return this.symbolIndex.get(symbolName) || [];\r\n  }\r\n\r\n  findSymbolByPattern(pattern: string, caseSensitive: boolean = false): SymbolReference[] {\r\n    const results: SymbolReference[] = [];\r\n    const regex = new RegExp(pattern, caseSensitive ? '' : 'i');\r\n\r\n    for (const [symbolName, refs] of this.symbolIndex) {\r\n      if (regex.test(symbolName)) {\r\n        results.push(...refs);\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  findReferences(symbolName: string): CrossReference | undefined {\r\n    return this.crossReferences.get(symbolName);\r\n  }\r\n\r\n  getDependencies(filePath: string): Set<string> {\r\n    return this.dependencyGraph.get(filePath) || new Set();\r\n  }\r\n\r\n  getDependents(filePath: string): Set<string> {\r\n    return this.reverseDependencies.get(filePath) || new Set();\r\n  }\r\n\r\n  getFileSymbols(filePath: string): SymbolInfo[] {\r\n    const symbols: SymbolInfo[] = [];\r\n\r\n    for (const refs of this.symbolIndex.values()) {\r\n      for (const ref of refs) {\r\n        if (ref.filePath === filePath) {\r\n          symbols.push(ref.symbol);\r\n        }\r\n      }\r\n    }\r\n\r\n    return symbols;\r\n  }\r\n\r\n  getFileMetadata(filePath: string): FileMetadata | undefined {\r\n    return this.fileMetadata.get(filePath);\r\n  }\r\n\r\n  getParseErrors(filePath?: string): Map<string, ParseError[]> | ParseError[] | undefined {\r\n    if (filePath) {\r\n      return this.parseErrors.get(filePath);\r\n    }\r\n    return new Map(this.parseErrors);\r\n  }\r\n\r\n  getAllFiles(): string[] {\r\n    return Array.from(this.fileMetadata.keys());\r\n  }\r\n\r\n  getAllSymbols(): Map<string, SymbolReference[]> {\r\n    return new Map(this.symbolIndex);\r\n  }\r\n\r\n  analyzeImpact(filePath: string, symbolName?: string): ImpactAnalysis {\r\n    const affectedFiles = new Set<string>();\r\n    const affectedSymbols = new Set<string>();\r\n    const circularDependencies: string[][] = [];\r\n    const warnings: string[] = [];\r\n\r\n    // If specific symbol provided, analyze its impact\r\n    if (symbolName) {\r\n      const crossRef = this.crossReferences.get(symbolName);\r\n      if (crossRef) {\r\n        for (const ref of crossRef.references) {\r\n          affectedFiles.add(ref.file);\r\n        }\r\n        affectedSymbols.add(symbolName);\r\n      }\r\n    } else {\r\n      // Analyze impact of changing the file\r\n      affectedFiles.add(filePath);\r\n\r\n      // Add all dependents\r\n      const dependents = this.getDependents(filePath);\r\n      for (const dependent of dependents) {\r\n        affectedFiles.add(dependent);\r\n      }\r\n\r\n      // Add all symbols in the file\r\n      const fileSymbols = this.getFileSymbols(filePath);\r\n      for (const symbol of fileSymbols) {\r\n        affectedSymbols.add(symbol.name);\r\n      }\r\n    }\r\n\r\n    // Detect circular dependencies\r\n    const visited = new Set<string>();\r\n    const path: string[] = [];\r\n\r\n    const dfs = (file: string) => {\r\n      if (path.includes(file)) {\r\n        const cycleStart = path.indexOf(file);\r\n        circularDependencies.push(path.slice(cycleStart).concat([file]));\r\n        return;\r\n      }\r\n\r\n      if (visited.has(file)) return;\r\n\r\n      visited.add(file);\r\n      path.push(file);\r\n\r\n      const deps = this.getDependencies(file);\r\n      for (const dep of deps) {\r\n        if (affectedFiles.has(dep)) {\r\n          dfs(dep);\r\n        }\r\n      }\r\n\r\n      path.pop();\r\n    };\r\n\r\n    dfs(filePath);\r\n\r\n    // Generate warnings\r\n    if (affectedFiles.size > 10) {\r\n      warnings.push('Large number of affected files');\r\n    }\r\n    if (circularDependencies.length > 0) {\r\n      warnings.push('Circular dependencies detected');\r\n    }\r\n    if (affectedSymbols.size > 20) {\r\n      warnings.push('Large number of affected symbols');\r\n    }\r\n\r\n    // Determine risk level\r\n    let riskLevel: 'low' | 'medium' | 'high' = 'low';\r\n    if (affectedFiles.size > 10 || circularDependencies.length > 0) {\r\n      riskLevel = 'high';\r\n    } else if (affectedFiles.size > 5 || affectedSymbols.size > 10) {\r\n      riskLevel = 'medium';\r\n    }\r\n\r\n    return {\r\n      affectedFiles,\r\n      affectedSymbols,\r\n      circularDependencies,\r\n      riskLevel,\r\n      warnings\r\n    };\r\n  }\r\n\r\n  getStatistics(): EngineStatistics {\r\n    return { ...this.statistics };\r\n  }\r\n\r\n  isReady(): boolean {\r\n    return this.isInitialized && !this.isIndexing;\r\n  }\r\n\r\n  // ==================== Utility Methods ====================\r\n\r\n  private detectLanguage(filePath: string): string {\r\n    const ext = path.extname(filePath).slice(1).toLowerCase();\r\n\r\n    switch (ext) {\r\n      case 'js':\r\n      case 'mjs':\r\n      case 'cjs':\r\n        return 'javascript';\r\n      case 'jsx':\r\n        return 'jsx';\r\n      case 'ts':\r\n        return 'typescript';\r\n      case 'tsx':\r\n        return 'tsx';\r\n      case 'py':\r\n      case 'pyw':\r\n        return 'python';\r\n      default:\r\n        return 'javascript';\r\n    }\r\n  }\r\n\r\n  private computeHash(content: string): string {\r\n    // Simple hash function for content\r\n    let hash = 0;\r\n    for (let i = 0; i < content.length; i++) {\r\n      const char = content.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32bit integer\r\n    }\r\n    return hash.toString(36);\r\n  }\r\n\r\n  private extractNodeName(node: any, nameField: string): string | null {\r\n    const nameNode = node.children?.find((child: any) => child.type === nameField);\r\n    return nameNode ? nameNode.text : null;\r\n  }\r\n\r\n  private getDeclarationType(nodeType: string): ExportInfo['type'] {\r\n    switch (nodeType) {\r\n      case 'FunctionDeclaration':\r\n        return 'function';\r\n      case 'ClassDeclaration':\r\n        return 'class';\r\n      case 'TSInterfaceDeclaration':\r\n        return 'interface';\r\n      case 'TSEnumDeclaration':\r\n        return 'enum';\r\n      case 'TSTypeAliasDeclaration':\r\n        return 'type';\r\n      default:\r\n        return 'variable';\r\n    }\r\n  }\r\n\r\n  private updateStatistics(): void {\r\n    const totalSymbols = Array.from(this.symbolIndex.values())\r\n      .reduce((sum, refs) => sum + refs.length, 0);\r\n\r\n    const totalDeps = Array.from(this.dependencyGraph.values())\r\n      .reduce((sum, deps) => sum + deps.size, 0);\r\n\r\n    const parseTimes = Array.from(this.fileMetadata.values())\r\n      .map(meta => meta.parseTime)\r\n      .filter(time => time > 0);\r\n\r\n    const avgParseTime = parseTimes.length > 0\r\n      ? parseTimes.reduce((sum, time) => sum + time, 0) / parseTimes.length\r\n      : 0;\r\n\r\n    this.statistics = {\r\n      totalFiles: this.fileMetadata.size,\r\n      indexedFiles: Array.from(this.fileMetadata.values()).filter(m => m.indexed).length,\r\n      totalSymbols,\r\n      totalDependencies: totalDeps,\r\n      memoryUsage: process.memoryUsage().heapUsed,\r\n      lastUpdateTime: Date.now(),\r\n      averageParseTime: Math.round(avgParseTime)\r\n    };\r\n  }\r\n\r\n  // ==================== Cleanup ====================\r\n\r\n  dispose(): void {\r\n    console.log('🧠 Disposing Code Intelligence Engine');\r\n\r\n    if (this.watcher) {\r\n      this.watcher.close();\r\n      this.watcher = null;\r\n    }\r\n\r\n    // Clear all pending updates\r\n    for (const timeout of this.pendingUpdates.values()) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.pendingUpdates.clear();\r\n\r\n    // Clear data structures\r\n    this.fileAsts.clear();\r\n    this.fileMetadata.clear();\r\n    this.symbolIndex.clear();\r\n    this.dependencyGraph.clear();\r\n    this.reverseDependencies.clear();\r\n    this.crossReferences.clear();\r\n    this.parseErrors.clear();\r\n\r\n    this.isInitialized = false;\r\n    console.log('   Engine disposed');\r\n  }\r\n}\r\n","import { get_encoding, encoding_for_model, Tiktoken } from 'tiktoken';\r\n\r\nexport class TokenCounter {\r\n  private encoder: Tiktoken;\r\n\r\n  constructor(model: string = 'gpt-4') {\r\n    try {\r\n      // Try to get encoding for specific model\r\n      this.encoder = encoding_for_model(model as any);\r\n    } catch {\r\n      // Fallback to cl100k_base (used by GPT-4 and most modern models)\r\n      this.encoder = get_encoding('cl100k_base');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Count tokens in a string\r\n   */\r\n  countTokens(text: string): number {\r\n    if (!text) return 0;\r\n    return this.encoder.encode(text).length;\r\n  }\r\n\r\n  /**\r\n   * Count tokens in messages array (for chat completions)\r\n   */\r\n  countMessageTokens(messages: Array<{ role: string; content: string | null; [key: string]: any }>): number {\r\n    let totalTokens = 0;\r\n    \r\n    for (const message of messages) {\r\n      // Every message follows <|start|>{role/name}\\n{content}<|end|\\>\\n\r\n      totalTokens += 3; // Base tokens per message\r\n      \r\n      if (message.content && typeof message.content === 'string') {\r\n        totalTokens += this.countTokens(message.content);\r\n      }\r\n      \r\n      if (message.role) {\r\n        totalTokens += this.countTokens(message.role);\r\n      }\r\n      \r\n      // Add extra tokens for tool calls if present\r\n      if (message.tool_calls) {\r\n        totalTokens += this.countTokens(JSON.stringify(message.tool_calls));\r\n      }\r\n    }\r\n    \r\n    totalTokens += 3; // Every reply is primed with <|start|>assistant<|message|>\r\n    \r\n    return totalTokens;\r\n  }\r\n\r\n  /**\r\n   * Estimate tokens for streaming content\r\n   * This is an approximation since we don't have the full response yet\r\n   */\r\n  estimateStreamingTokens(accumulatedContent: string): number {\r\n    return this.countTokens(accumulatedContent);\r\n  }\r\n\r\n  /**\r\n   * Clean up resources\r\n   */\r\n  dispose(): void {\r\n    this.encoder.free();\r\n  }\r\n}\r\n\r\n/**\r\n * Format token count for display (e.g., 1.2k for 1200)\r\n */\r\nexport function formatTokenCount(count: number): string {\r\n  if (count <= 999) {\r\n    return count.toString();\r\n  }\r\n  \r\n  if (count < 1_000_000) {\r\n    const k = count / 1000;\r\n    return k % 1 === 0 ? `${k}k` : `${k.toFixed(1)}k`;\r\n  }\r\n  \r\n  const m = count / 1_000_000;\r\n  return m % 1 === 0 ? `${m}m` : `${m.toFixed(1)}m`;\r\n}\r\n\r\n/**\r\n * Create a token counter instance\r\n */\r\nexport function createTokenCounter(model?: string): TokenCounter {\r\n  return new TokenCounter(model);\r\n}","import * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nexport function loadCustomInstructions(workingDirectory: string = process.cwd()): string | null {\r\n  try {\r\n    const instructionsPath = path.join(workingDirectory, '.grok', 'GROK.md');\r\n    \r\n    if (!fs.existsSync(instructionsPath)) {\r\n      return null;\r\n    }\r\n\r\n    const customInstructions = fs.readFileSync(instructionsPath, 'utf-8');\r\n    return customInstructions.trim();\r\n  } catch (error) {\r\n    console.warn('Failed to load custom instructions:', error);\r\n    return null;\r\n  }\r\n}","{\r\n  \"type\": \"module\",\r\n  \"name\": \"grok-cli-hurry-mode\",\r\n  \"version\": \"1.0.49\",\r\n  \"description\": \"An open-source AI agent that brings the power of Grok directly into your terminal.\",\r\n  \"main\": \"dist/index.js\",\r\n  \"module\": \"dist/index.js\",\r\n  \"types\": \"dist/index.d.ts\",\r\n  \"exports\": {\r\n    \".\": {\r\n      \"types\": \"./dist/index.d.ts\",\r\n      \"import\": \"./dist/index.js\"\r\n    }\r\n  },\r\n  \"bin\": {\r\n    \"grok\": \"dist/index.js\"\r\n  },\r\n  \"scripts\": {\r\n    \"build\": \"tsup\",\r\n    \"build:tsc\": \"tsc\",\r\n    \"dev\": \"npm run build && node dist/index.js\",\r\n    \"dev:node\": \"tsx src/index.ts\",\r\n    \"dev:watch\": \"npm run build && node --watch dist/index.js\",\r\n    \"start\": \"node dist/index.js\",\r\n    \"local\": \"npm run build && npm link && node dist/index.js\",\r\n    \"start:bun\": \"bun run dist/index.js\",\r\n    \"lint\": \"eslint . --ext .js,.jsx,.ts,.tsx\",\r\n    \"typecheck\": \"tsc --noEmit\",\r\n    \"install:bun\": \"bun install\",\r\n    \"preinstall\": \"echo '🤖 Installing Grok CLI...'\",\r\n    \"postinstall\": \"echo '==================================================' && echo '✅ Grok CLI installed successfully!' && echo '==================================================' && echo '🚀 Try: grok --help' && echo '💡 If \\\"command not found\\\", add to PATH:' && node -e \\\"const p=process.platform;const isMac=p==='darwin';const isLinux=p==='linux';if(isMac||isLinux){const shell=isMac?'zshrc':'bashrc';console.log((isMac?'🍎 Mac':'🐧 Linux')+': echo \\\\'export PATH=\\\\\\\"$(npm config get prefix)/bin:$PATH\\\\\\\"\\\\' >> ~/.'+shell+' && source ~/.'+shell);}\\\" && echo '📖 Docs: https://github.com/hinetapora/grok-cli-hurry-mode#installation' && echo '🔑 Set API key: export GROK_API_KEY=your_key_here' && echo '==================================================' && echo '🔧 Auto-setup PATH? Press Enter to add (or Ctrl+C to skip)' && read -t 10 && node -e \\\"const fs=require('fs');const p=process.platform;const isMac=p==='darwin';const isLinux=p==='linux';if(isMac||isLinux){const shellFile=isMac?'.zshrc':'.bashrc';const rcPath=process.env.HOME+'/'+shellFile;const pathCmd='export PATH=\\\\\\\"$(npm config get prefix)/bin:$PATH\\\\\\\"';try{const content=fs.readFileSync(rcPath,'utf8');if(!content.includes(pathCmd)){fs.appendFileSync(rcPath,'\\\\n'+pathCmd+'\\\\n');console.log('✅ Added to ~/'+shellFile+' - restart terminal');}else{console.log('ℹ️ Already in ~/'+shellFile);}}catch(e){console.log('⚠️ Could not modify ~/'+shellFile+' - add manually');}}\\\" && echo '🔍 Verifying: ' && grok --version 2>/dev/null || echo '⚠️ grok not in PATH yet - follow above steps'\",\r\n    \"prepare\": \"husky install\"\r\n  },\r\n  \"lint-staged\": {\r\n    \"*.{ts,tsx}\": [\r\n      \"eslint --fix\"\r\n    ]\r\n  },\r\n  \"keywords\": [\r\n    \"cli\",\r\n    \"agent\",\r\n    \"text-editor\",\r\n    \"grok\",\r\n    \"ai\"\r\n  ],\r\n  \"author\": \"grok_cli\",\r\n  \"license\": \"MIT\",\r\n  \"dependencies\": {\r\n    \"@modelcontextprotocol/sdk\": \"^1.17.0\",\r\n    \"@types/marked-terminal\": \"^6.1.1\",\r\n    \"@typescript-eslint/typescript-estree\": \"^8.46.0\",\r\n    \"axios\": \"^1.7.0\",\r\n    \"cfonts\": \"^3.3.0\",\r\n    \"chalk\": \"^5.3.0\",\r\n    \"chokidar\": \"^4.0.3\",\r\n    \"cli-highlight\": \"^2.1.11\",\r\n    \"commander\": \"^12.0.0\",\r\n    \"dotenv\": \"^16.4.0\",\r\n    \"enquirer\": \"^2.4.1\",\r\n    \"fs-extra\": \"^11.2.0\",\r\n    \"fuse.js\": \"^7.1.0\",\r\n    \"glob\": \"^11.0.3\",\r\n    \"ink\": \"^4.4.1\",\r\n    \"marked\": \"^15.0.12\",\r\n    \"marked-terminal\": \"^7.3.0\",\r\n    \"openai\": \"^5.10.1\",\r\n    \"react\": \"^18.3.1\",\r\n    \"ripgrep-node\": \"^1.0.0\",\r\n    \"terminal-image\": \"^4.0.0\",\r\n    \"tiktoken\": \"^1.0.21\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@eslint/js\": \"^9.37.0\",\r\n    \"@types/fs-extra\": \"^11.0.2\",\r\n    \"@types/node\": \"^20.8.0\",\r\n    \"@types/react\": \"^18.3.3\",\r\n    \"@typescript-eslint/eslint-plugin\": \"^8.37.0\",\r\n    \"@typescript-eslint/parser\": \"^8.37.0\",\r\n    \"esbuild\": \"^0.25.10\",\r\n    \"eslint\": \"^9.31.0\",\r\n    \"husky\": \"^9.1.7\",\r\n    \"lint-staged\": \"^16.2.4\",\r\n    \"tsup\": \"^8.5.0\",\r\n    \"tsx\": \"^4.0.0\",\r\n    \"typescript\": \"^5.9.3\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=18.0.0\"\r\n  },\r\n  \"preferGlobal\": true,\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/hinetapora/grok-cli-hurry-mode.git\"\r\n  },\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/hinetapora/grok-cli-hurry-mode/issues\"\r\n  },\r\n  \"homepage\": \"https://github.com/hinetapora/grok-cli-hurry-mode#readme\",\r\n  \"files\": [\r\n    \"dist/**/*\",\r\n    \"README.md\",\r\n    \"LICENSE\"\r\n  ],\r\n  \"publishConfig\": {\r\n    \"access\": \"public\",\r\n    \"registry\": \"https://registry.npmjs.org/\"\r\n  },\r\n  \"installConfig\": {\r\n    \"hoisting\": false\r\n  },\r\n  \"optionalDependencies\": {\r\n    \"tree-sitter\": \"^0.21.1\",\r\n    \"tree-sitter-javascript\": \"^0.21.2\",\r\n    \"tree-sitter-python\": \"^0.21.0\",\r\n    \"tree-sitter-typescript\": \"^0.21.2\"\r\n  },\r\n  \"trustedDependencies\": [\r\n    \"esbuild\",\r\n    \"tree-sitter\",\r\n    \"tree-sitter-javascript\",\r\n    \"tree-sitter-python\",\r\n    \"tree-sitter-typescript\"\r\n  ]\r\n}\r\n","/**\r\n * Text manipulation utilities for terminal input handling\r\n * Inspired by Gemini CLI's text processing capabilities\r\n */\r\n\r\nexport interface TextPosition {\r\n  index: number;\r\n  line: number;\r\n  column: number;\r\n}\r\n\r\nexport interface TextSelection {\r\n  start: number;\r\n  end: number;\r\n}\r\n\r\n/**\r\n * Check if a character is a word boundary\r\n */\r\nexport function isWordBoundary(char: string | undefined): boolean {\r\n  if (!char) return true;\r\n  return /\\s/.test(char) || /[^\\w]/.test(char);\r\n}\r\n\r\n/**\r\n * Find the start of the current word at the given position\r\n */\r\nexport function findWordStart(text: string, position: number): number {\r\n  if (position <= 0) return 0;\r\n  \r\n  let pos = position - 1;\r\n  while (pos > 0 && !isWordBoundary(text[pos])) {\r\n    pos--;\r\n  }\r\n  \r\n  // If we stopped at a word boundary, move forward to the actual word start\r\n  if (pos > 0 && isWordBoundary(text[pos])) {\r\n    pos++;\r\n  }\r\n  \r\n  return pos;\r\n}\r\n\r\n/**\r\n * Find the end of the current word at the given position\r\n */\r\nexport function findWordEnd(text: string, position: number): number {\r\n  if (position >= text.length) return text.length;\r\n  \r\n  let pos = position;\r\n  while (pos < text.length && !isWordBoundary(text[pos])) {\r\n    pos++;\r\n  }\r\n  \r\n  return pos;\r\n}\r\n\r\n/**\r\n * Move cursor to the previous word boundary\r\n */\r\nexport function moveToPreviousWord(text: string, position: number): number {\r\n  if (position <= 0) return 0;\r\n  \r\n  let pos = position - 1;\r\n  \r\n  // Skip whitespace\r\n  while (pos > 0 && isWordBoundary(text[pos])) {\r\n    pos--;\r\n  }\r\n  \r\n  // Find start of the word\r\n  while (pos > 0 && !isWordBoundary(text[pos - 1])) {\r\n    pos--;\r\n  }\r\n  \r\n  return pos;\r\n}\r\n\r\n/**\r\n * Move cursor to the next word boundary\r\n */\r\nexport function moveToNextWord(text: string, position: number): number {\r\n  if (position >= text.length) return text.length;\r\n  \r\n  let pos = position;\r\n  \r\n  // Skip current word\r\n  while (pos < text.length && !isWordBoundary(text[pos])) {\r\n    pos++;\r\n  }\r\n  \r\n  // Skip whitespace\r\n  while (pos < text.length && isWordBoundary(text[pos])) {\r\n    pos++;\r\n  }\r\n  \r\n  return pos;\r\n}\r\n\r\n/**\r\n * Delete the word before the cursor\r\n */\r\nexport function deleteWordBefore(text: string, position: number): { text: string; position: number } {\r\n  const wordStart = moveToPreviousWord(text, position);\r\n  const newText = text.slice(0, wordStart) + text.slice(position);\r\n  \r\n  return {\r\n    text: newText,\r\n    position: wordStart,\r\n  };\r\n}\r\n\r\n/**\r\n * Delete the word after the cursor\r\n */\r\nexport function deleteWordAfter(text: string, position: number): { text: string; position: number } {\r\n  const wordEnd = moveToNextWord(text, position);\r\n  const newText = text.slice(0, position) + text.slice(wordEnd);\r\n  \r\n  return {\r\n    text: newText,\r\n    position,\r\n  };\r\n}\r\n\r\n/**\r\n * Get the current line and column from text position\r\n */\r\nexport function getTextPosition(text: string, index: number): TextPosition {\r\n  const lines = text.slice(0, index).split('\\n');\r\n  return {\r\n    index,\r\n    line: lines.length - 1,\r\n    column: lines[lines.length - 1].length,\r\n  };\r\n}\r\n\r\n/**\r\n * Move to the beginning of the current line\r\n */\r\nexport function moveToLineStart(text: string, position: number): number {\r\n  const beforeCursor = text.slice(0, position);\r\n  const lastNewlineIndex = beforeCursor.lastIndexOf('\\n');\r\n  return lastNewlineIndex === -1 ? 0 : lastNewlineIndex + 1;\r\n}\r\n\r\n/**\r\n * Move to the end of the current line\r\n */\r\nexport function moveToLineEnd(text: string, position: number): number {\r\n  const afterCursor = text.slice(position);\r\n  const nextNewlineIndex = afterCursor.indexOf('\\n');\r\n  return nextNewlineIndex === -1 ? text.length : position + nextNewlineIndex;\r\n}\r\n\r\n/**\r\n * Handle proper Unicode-aware character deletion\r\n */\r\nexport function deleteCharBefore(text: string, position: number): { text: string; position: number } {\r\n  if (position <= 0) {\r\n    return { text, position };\r\n  }\r\n  \r\n  // Handle surrogate pairs and combining characters\r\n  let deleteCount = 1;\r\n  const charBefore = text.charAt(position - 1);\r\n  \r\n  // Check for high surrogate (first part of surrogate pair)\r\n  if (position >= 2) {\r\n    const charBeforeBefore = text.charAt(position - 2);\r\n    if (charBeforeBefore >= '\\uD800' && charBeforeBefore <= '\\uDBFF' && \r\n        charBefore >= '\\uDC00' && charBefore <= '\\uDFFF') {\r\n      deleteCount = 2;\r\n    }\r\n  }\r\n  \r\n  const newText = text.slice(0, position - deleteCount) + text.slice(position);\r\n  return {\r\n    text: newText,\r\n    position: position - deleteCount,\r\n  };\r\n}\r\n\r\n/**\r\n * Handle proper Unicode-aware character deletion forward\r\n */\r\nexport function deleteCharAfter(text: string, position: number): { text: string; position: number } {\r\n  if (position >= text.length) {\r\n    return { text, position };\r\n  }\r\n  \r\n  // Handle surrogate pairs and combining characters\r\n  let deleteCount = 1;\r\n  const charAfter = text.charAt(position);\r\n  \r\n  // Check for high surrogate (first part of surrogate pair)\r\n  if (position + 1 < text.length) {\r\n    const charAfterAfter = text.charAt(position + 1);\r\n    if (charAfter >= '\\uD800' && charAfter <= '\\uDBFF' && \r\n        charAfterAfter >= '\\uDC00' && charAfterAfter <= '\\uDFFF') {\r\n      deleteCount = 2;\r\n    }\r\n  }\r\n  \r\n  const newText = text.slice(0, position) + text.slice(position + deleteCount);\r\n  return {\r\n    text: newText,\r\n    position,\r\n  };\r\n}\r\n\r\n/**\r\n * Insert text at the given position with proper Unicode handling\r\n */\r\nexport function insertText(text: string, position: number, insert: string): { text: string; position: number } {\r\n  const newText = text.slice(0, position) + insert + text.slice(position);\r\n  return {\r\n    text: newText,\r\n    position: position + insert.length,\r\n  };\r\n}","import { useState, useCallback } from \"react\";\r\n\r\nexport interface InputHistoryHook {\r\n  addToHistory: (input: string) => void;\r\n  navigateHistory: (direction: \"up\" | \"down\") => string | null;\r\n  getCurrentHistoryIndex: () => number;\r\n  resetHistory: () => void;\r\n  isNavigatingHistory: () => boolean;\r\n  setOriginalInput: (input: string) => void;\r\n}\r\n\r\nexport function useInputHistory(): InputHistoryHook {\r\n  const [history, setHistory] = useState<string[]>([]);\r\n  const [currentIndex, setCurrentIndex] = useState(-1);\r\n  const [originalInput, setOriginalInput] = useState(\"\");\r\n\r\n  const addToHistory = useCallback((input: string) => {\r\n    if (input.trim() && !history.includes(input.trim())) {\r\n      setHistory(prev => [...prev, input.trim()]);\r\n    }\r\n    setCurrentIndex(-1);\r\n    setOriginalInput(\"\");\r\n  }, [history]);\r\n\r\n  const navigateHistory = useCallback((direction: \"up\" | \"down\"): string | null => {\r\n    if (history.length === 0) return null;\r\n\r\n    let newIndex: number;\r\n    \r\n    if (direction === \"up\") {\r\n      if (currentIndex === -1) {\r\n        newIndex = history.length - 1;\r\n      } else {\r\n        newIndex = Math.max(0, currentIndex - 1);\r\n      }\r\n    } else {\r\n      if (currentIndex === -1) {\r\n        return null;\r\n      } else if (currentIndex === history.length - 1) {\r\n        newIndex = -1;\r\n        return originalInput;\r\n      } else {\r\n        newIndex = Math.min(history.length - 1, currentIndex + 1);\r\n      }\r\n    }\r\n\r\n    setCurrentIndex(newIndex);\r\n    return newIndex === -1 ? originalInput : history[newIndex];\r\n  }, [history, currentIndex, originalInput]);\r\n\r\n  const getCurrentHistoryIndex = useCallback(() => currentIndex, [currentIndex]);\r\n  \r\n  const resetHistory = useCallback(() => {\r\n    setHistory([]);\r\n    setCurrentIndex(-1);\r\n    setOriginalInput(\"\");\r\n  }, []);\r\n\r\n  const isNavigatingHistory = useCallback(() => currentIndex !== -1, [currentIndex]);\r\n\r\n  const setOriginalInputCallback = useCallback((input: string) => {\r\n    if (currentIndex === -1) {\r\n      setOriginalInput(input);\r\n    }\r\n  }, [currentIndex]);\r\n\r\n  return {\r\n    addToHistory,\r\n    navigateHistory,\r\n    getCurrentHistoryIndex,\r\n    resetHistory,\r\n    isNavigatingHistory,\r\n    setOriginalInput: setOriginalInputCallback,\r\n  };\r\n}","import { useState, useCallback, useRef } from \"react\";\r\nimport {\r\n  deleteCharBefore,\r\n  deleteCharAfter,\r\n  deleteWordBefore,\r\n  deleteWordAfter,\r\n  insertText,\r\n  moveToLineStart,\r\n  moveToLineEnd,\r\n  moveToPreviousWord,\r\n  moveToNextWord,\r\n} from \"../utils/text-utils.js\";\r\nimport { useInputHistory } from \"./use-input-history.js\";\r\n\r\nexport interface Key {\r\n  name?: string;\r\n  ctrl?: boolean;\r\n  meta?: boolean;\r\n  shift?: boolean;\r\n  paste?: boolean;\r\n  sequence?: string;\r\n  upArrow?: boolean;\r\n  downArrow?: boolean;\r\n  leftArrow?: boolean;\r\n  rightArrow?: boolean;\r\n  return?: boolean;\r\n  escape?: boolean;\r\n  tab?: boolean;\r\n  backspace?: boolean;\r\n  delete?: boolean;\r\n}\r\n\r\nexport interface EnhancedInputHook {\r\n  input: string;\r\n  cursorPosition: number;\r\n  isMultiline: boolean;\r\n  setInput: (text: string) => void;\r\n  setCursorPosition: (position: number) => void;\r\n  clearInput: () => void;\r\n  insertAtCursor: (text: string) => void;\r\n  resetHistory: () => void;\r\n  handleInput: (inputChar: string, key: Key) => void;\r\n}\r\n\r\ninterface UseEnhancedInputProps {\r\n  onSubmit?: (text: string) => void;\r\n  onEscape?: () => void;\r\n  onSpecialKey?: (key: Key) => boolean; // Return true to prevent default handling\r\n  disabled?: boolean;\r\n  multiline?: boolean;\r\n}\r\n\r\nexport function useEnhancedInput({\r\n  onSubmit,\r\n  onEscape,\r\n  onSpecialKey,\r\n  disabled = false,\r\n  multiline = false,\r\n}: UseEnhancedInputProps = {}): EnhancedInputHook {\r\n  const [input, setInputState] = useState(\"\");\r\n  const [cursorPosition, setCursorPositionState] = useState(0);\r\n  const isMultilineRef = useRef(multiline);\r\n  \r\n  const {\r\n    addToHistory,\r\n    navigateHistory,\r\n    resetHistory,\r\n    setOriginalInput,\r\n    isNavigatingHistory,\r\n  } = useInputHistory();\r\n\r\n  const setInput = useCallback((text: string) => {\r\n    setInputState(text);\r\n    setCursorPositionState(Math.min(text.length, cursorPosition));\r\n    if (!isNavigatingHistory()) {\r\n      setOriginalInput(text);\r\n    }\r\n  }, [cursorPosition, isNavigatingHistory, setOriginalInput]);\r\n\r\n  const setCursorPosition = useCallback((position: number) => {\r\n    setCursorPositionState(Math.max(0, Math.min(input.length, position)));\r\n  }, [input.length]);\r\n\r\n  const clearInput = useCallback(() => {\r\n    setInputState(\"\");\r\n    setCursorPositionState(0);\r\n    setOriginalInput(\"\");\r\n  }, [setOriginalInput]);\r\n\r\n  const insertAtCursor = useCallback((text: string) => {\r\n    const result = insertText(input, cursorPosition, text);\r\n    setInputState(result.text);\r\n    setCursorPositionState(result.position);\r\n    setOriginalInput(result.text);\r\n  }, [input, cursorPosition, setOriginalInput]);\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    if (input.trim()) {\r\n      addToHistory(input);\r\n      onSubmit?.(input);\r\n      clearInput();\r\n    }\r\n  }, [input, addToHistory, onSubmit, clearInput]);\r\n\r\n  const handleInput = useCallback((inputChar: string, key: Key) => {\r\n    if (disabled) return;\r\n\r\n    // Handle Ctrl+C - check multiple ways it could be detected\r\n    if ((key.ctrl && inputChar === \"c\") || inputChar === \"\\x03\") {\r\n      setInputState(\"\");\r\n      setCursorPositionState(0);\r\n      setOriginalInput(\"\");\r\n      return;\r\n    }\r\n\r\n    // Allow special key handler to override default behavior\r\n    if (onSpecialKey?.(key)) {\r\n      return;\r\n    }\r\n\r\n    // Handle Escape\r\n    if (key.escape) {\r\n      onEscape?.();\r\n      return;\r\n    }\r\n\r\n    // Handle Enter/Return\r\n    if (key.return) {\r\n      if (multiline && key.shift) {\r\n        // Shift+Enter in multiline mode inserts newline\r\n        const result = insertText(input, cursorPosition, \"\\n\");\r\n        setInputState(result.text);\r\n        setCursorPositionState(result.position);\r\n        setOriginalInput(result.text);\r\n      } else {\r\n        handleSubmit();\r\n      }\r\n      return;\r\n    }\r\n\r\n    // Handle history navigation\r\n    if ((key.upArrow || key.name === 'up') && !key.ctrl && !key.meta) {\r\n      const historyInput = navigateHistory(\"up\");\r\n      if (historyInput !== null) {\r\n        setInputState(historyInput);\r\n        setCursorPositionState(historyInput.length);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if ((key.downArrow || key.name === 'down') && !key.ctrl && !key.meta) {\r\n      const historyInput = navigateHistory(\"down\");\r\n      if (historyInput !== null) {\r\n        setInputState(historyInput);\r\n        setCursorPositionState(historyInput.length);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // Handle cursor movement - ignore meta flag for arrows as it's unreliable in terminals\r\n    // Only do word movement if ctrl is pressed AND no arrow escape sequence is in inputChar\r\n    if ((key.leftArrow || key.name === 'left') && key.ctrl && !inputChar.includes('[')) {\r\n      const newPos = moveToPreviousWord(input, cursorPosition);\r\n      setCursorPositionState(newPos);\r\n      return;\r\n    }\r\n\r\n    if ((key.rightArrow || key.name === 'right') && key.ctrl && !inputChar.includes('[')) {\r\n      const newPos = moveToNextWord(input, cursorPosition);\r\n      setCursorPositionState(newPos);\r\n      return;\r\n    }\r\n\r\n    // Handle regular cursor movement - single character (ignore meta flag)\r\n    if (key.leftArrow || key.name === 'left') {\r\n      const newPos = Math.max(0, cursorPosition - 1);\r\n      setCursorPositionState(newPos);\r\n      return;\r\n    }\r\n\r\n    if (key.rightArrow || key.name === 'right') {\r\n      const newPos = Math.min(input.length, cursorPosition + 1);\r\n      setCursorPositionState(newPos);\r\n      return;\r\n    }\r\n\r\n    // Handle Home/End keys or Ctrl+A/E\r\n    if ((key.ctrl && inputChar === \"a\") || key.name === \"home\") {\r\n      setCursorPositionState(0); // Simple start of input\r\n      return;\r\n    }\r\n\r\n    if ((key.ctrl && inputChar === \"e\") || key.name === \"end\") {\r\n      setCursorPositionState(input.length); // Simple end of input\r\n      return;\r\n    }\r\n\r\n    // Handle deletion - check multiple ways backspace might be detected\r\n    // Backspace can be detected in different ways depending on terminal\r\n    // In some terminals, backspace shows up as delete:true with empty inputChar\r\n    const isBackspace = key.backspace || \r\n                       key.name === 'backspace' || \r\n                       inputChar === '\\b' || \r\n                       inputChar === '\\x7f' ||\r\n                       (key.delete && inputChar === '' && !key.shift);\r\n                       \r\n    if (isBackspace) {\r\n      if (key.ctrl || key.meta) {\r\n        // Ctrl/Cmd + Backspace: Delete word before cursor\r\n        const result = deleteWordBefore(input, cursorPosition);\r\n        setInputState(result.text);\r\n        setCursorPositionState(result.position);\r\n        setOriginalInput(result.text);\r\n      } else {\r\n        // Regular backspace\r\n        const result = deleteCharBefore(input, cursorPosition);\r\n        setInputState(result.text);\r\n        setCursorPositionState(result.position);\r\n        setOriginalInput(result.text);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // Handle forward delete (Del key) - but not if it was already handled as backspace above\r\n    if ((key.delete && inputChar !== '') || (key.ctrl && inputChar === \"d\")) {\r\n      if (key.ctrl || key.meta) {\r\n        // Ctrl/Cmd + Delete: Delete word after cursor\r\n        const result = deleteWordAfter(input, cursorPosition);\r\n        setInputState(result.text);\r\n        setCursorPositionState(result.position);\r\n        setOriginalInput(result.text);\r\n      } else {\r\n        // Regular delete\r\n        const result = deleteCharAfter(input, cursorPosition);\r\n        setInputState(result.text);\r\n        setCursorPositionState(result.position);\r\n        setOriginalInput(result.text);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // Handle Ctrl+K: Delete from cursor to end of line\r\n    if (key.ctrl && inputChar === \"k\") {\r\n      const lineEnd = moveToLineEnd(input, cursorPosition);\r\n      const newText = input.slice(0, cursorPosition) + input.slice(lineEnd);\r\n      setInputState(newText);\r\n      setOriginalInput(newText);\r\n      return;\r\n    }\r\n\r\n    // Handle Ctrl+U: Delete from cursor to start of line\r\n    if (key.ctrl && inputChar === \"u\") {\r\n      const lineStart = moveToLineStart(input, cursorPosition);\r\n      const newText = input.slice(0, lineStart) + input.slice(cursorPosition);\r\n      setInputState(newText);\r\n      setCursorPositionState(lineStart);\r\n      setOriginalInput(newText);\r\n      return;\r\n    }\r\n\r\n    // Handle Ctrl+W: Delete word before cursor\r\n    if (key.ctrl && inputChar === \"w\") {\r\n      const result = deleteWordBefore(input, cursorPosition);\r\n      setInputState(result.text);\r\n      setCursorPositionState(result.position);\r\n      setOriginalInput(result.text);\r\n      return;\r\n    }\r\n\r\n    // Handle Ctrl+X: Clear entire input\r\n    if (key.ctrl && inputChar === \"x\") {\r\n      setInputState(\"\");\r\n      setCursorPositionState(0);\r\n      setOriginalInput(\"\");\r\n      return;\r\n    }\r\n\r\n    // Handle regular character input\r\n    if (inputChar && !key.ctrl && !key.meta) {\r\n      const result = insertText(input, cursorPosition, inputChar);\r\n      setInputState(result.text);\r\n      setCursorPositionState(result.position);\r\n      setOriginalInput(result.text);\r\n    }\r\n  }, [disabled, onSpecialKey, input, cursorPosition, multiline, handleSubmit, navigateHistory, setOriginalInput]);\r\n\r\n  return {\r\n    input,\r\n    cursorPosition,\r\n    isMultiline: isMultilineRef.current,\r\n    setInput,\r\n    setCursorPosition,\r\n    clearInput,\r\n    insertAtCursor,\r\n    resetHistory,\r\n    handleInput,\r\n  };\r\n}","import React, { useMemo } from \"react\";\r\nimport { Box, Text } from \"ink\";\r\n\r\ninterface CommandSuggestion {\r\n  command: string;\r\n  description: string;\r\n}\r\n\r\ninterface CommandSuggestionsProps {\r\n  suggestions: CommandSuggestion[];\r\n  input: string;\r\n  selectedIndex: number;\r\n  isVisible: boolean;\r\n}\r\n\r\nexport const MAX_SUGGESTIONS = 8;\r\n\r\nexport function filterCommandSuggestions<T extends { command: string }>(\r\n  suggestions: T[],\r\n  input: string\r\n): T[] {\r\n  const lowerInput = input.toLowerCase();\r\n  return suggestions\r\n    .filter((s) => s.command.toLowerCase().startsWith(lowerInput))\r\n    .slice(0, MAX_SUGGESTIONS);\r\n}\r\n\r\nexport function CommandSuggestions({\r\n  suggestions,\r\n  input,\r\n  selectedIndex,\r\n  isVisible,\r\n}: CommandSuggestionsProps) {\r\n  if (!isVisible) return null;\r\n\r\n  const filteredSuggestions = useMemo(\r\n    () => filterCommandSuggestions(suggestions, input),\r\n    [suggestions, input]\r\n  );\r\n\r\n  return (\r\n    <Box marginTop={1} flexDirection=\"column\">\r\n      {filteredSuggestions.map((suggestion, index) => (\r\n        <Box key={index} paddingLeft={1}>\r\n          <Text\r\n            color={index === selectedIndex ? \"black\" : \"white\"}\r\n            backgroundColor={index === selectedIndex ? \"cyan\" : undefined}\r\n          >\r\n            {suggestion.command}\r\n          </Text>\r\n          <Box marginLeft={1}>\r\n            <Text color=\"gray\">{suggestion.description}</Text>\r\n          </Box>\r\n        </Box>\r\n      ))}\r\n      <Box marginTop={1}>\r\n        <Text color=\"gray\" dimColor>\r\n          ↑↓ navigate • Enter/Tab select • Esc cancel\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}","import { getSettingsManager } from './settings-manager.js';\r\nimport type { UserSettings, ProjectSettings } from './settings-manager.js';\r\n\r\nexport interface ModelOption {\r\n  model: string;\r\n}\r\n\r\nexport type ModelConfig = string;\r\n\r\n// Re-export interfaces for backward compatibility\r\nexport { UserSettings, ProjectSettings };\r\n\r\n/**\r\n * Get the effective current model\r\n * Priority: project current model > user default model > system default\r\n */\r\nexport function getCurrentModel(): string {\r\n  const manager = getSettingsManager();\r\n  return manager.getCurrentModel();\r\n}\r\n\r\n/**\r\n * Load model configuration\r\n * Priority: user-settings.json models > default hardcoded\r\n */\r\nexport function loadModelConfig(): ModelOption[] {\r\n  const manager = getSettingsManager();\r\n  const models = manager.getAvailableModels();\r\n\r\n  return models.map(model => ({\r\n    model: model.trim()\r\n  }));\r\n}\r\n\r\n/**\r\n * Get default models list\r\n */\r\nexport function getDefaultModels(): string[] {\r\n  const manager = getSettingsManager();\r\n  return manager.getAvailableModels();\r\n}\r\n\r\n/**\r\n * Update the current model in project settings\r\n */\r\nexport function updateCurrentModel(modelName: string): void {\r\n  const manager = getSettingsManager();\r\n  manager.setCurrentModel(modelName);\r\n}\r\n\r\n/**\r\n * Update the user's default model preference\r\n */\r\nexport function updateDefaultModel(modelName: string): void {\r\n  const manager = getSettingsManager();\r\n  manager.updateUserSetting('defaultModel', modelName);\r\n}\r\n","import * as ops from 'fs-extra';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { existsSync } from 'fs';\r\n\r\nexport interface ClaudeMdParser {\r\n  parseClaude(rootPath: string): Promise<{ exists: boolean; content: string; hasDocumentationSection: boolean }>;\r\n  updateClaude(rootPath: string, documentationSection: string): Promise<{ success: boolean; message: string }>;\r\n  generateDocumentationSection(): string;\r\n}\r\n\r\nexport class ClaudeMdParserImpl implements ClaudeMdParser {\r\n  \r\n  async parseClaude(rootPath: string): Promise<{ exists: boolean; content: string; hasDocumentationSection: boolean }> {\r\n    const claudePath = path.join(rootPath, 'CLAUDE.md');\r\n    \r\n    if (!existsSync(claudePath)) {\r\n      return {\r\n        exists: false,\r\n        content: '',\r\n        hasDocumentationSection: false\r\n      };\r\n    }\r\n\r\n    try {\r\n      const content = await ops.promises.readFile(claudePath, 'utf-8');\r\n      const hasDocumentationSection = content.includes('Documentation System Workflow') || \r\n                                     content.includes('.agent documentation system');\r\n\r\n      return {\r\n        exists: true,\r\n        content,\r\n        hasDocumentationSection\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        exists: false,\r\n        content: '',\r\n        hasDocumentationSection: false\r\n      };\r\n    }\r\n  }\r\n\r\n  async updateClaude(rootPath: string, documentationSection: string): Promise<{ success: boolean; message: string }> {\r\n    const claudePath = path.join(rootPath, 'CLAUDE.md');\r\n    \r\n    try {\r\n      const { exists, content, hasDocumentationSection } = await this.parseClaude(rootPath);\r\n\r\n      if (hasDocumentationSection) {\r\n        return {\r\n          success: true,\r\n          message: '✅ CLAUDE.md already contains documentation system instructions'\r\n        };\r\n      }\r\n\r\n      let newContent: string;\r\n\r\n      if (exists) {\r\n        // Append to existing CLAUDE.md\r\n        newContent = content + '\\n\\n' + documentationSection;\r\n      } else {\r\n        // Create new CLAUDE.md with basic header\r\n        newContent = `# CLAUDE.md\r\n\r\nThis document provides context and instructions for Claude Code when working with this project.\r\n\r\n${documentationSection}`;\r\n      }\r\n\r\n      await ops.promises.writeFile(claudePath, newContent);\r\n\r\n      return {\r\n        success: true,\r\n        message: exists \r\n          ? '✅ Updated existing CLAUDE.md with documentation system instructions'\r\n          : '✅ Created CLAUDE.md with documentation system instructions'\r\n      };\r\n\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        message: `Failed to update CLAUDE.md: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  generateDocumentationSection(): string {\r\n    return `## 📚 Documentation System Workflow\r\n\r\n### Before Planning Features:\r\n1. **Read \\`.agent/README.md\\`** for project overview\r\n2. **Check \\`.agent/system/\\`** for architecture context\r\n3. **Review \\`.agent/tasks/\\`** for related work\r\n4. **Scan \\`.agent/sop/\\`** for established patterns\r\n\r\n### During Implementation:\r\n- Store PRDs in \\`.agent/tasks/\\` before coding\r\n- Reference architecture docs for consistency\r\n- Follow established patterns from SOPs\r\n- Use cross-references between .agent docs\r\n\r\n### After Implementation:\r\n- Run \\`/update-agent-docs\\` to capture changes\r\n- Update \\`.agent/system/\\` if architecture changed\r\n- Add new SOPs for repeatable processes\r\n- Link related tasks and documents\r\n\r\n### Documentation Rules:\r\n- Keep system docs as single source of truth\r\n- Use relative links between .agent documents  \r\n- Maintain concise, actionable content\r\n- Update cross-references when adding new docs\r\n\r\n### Token Optimization:\r\n- Read .agent docs hierarchically (README → critical-state → relevant docs)\r\n- Expect ~600 tokens for full context vs 3000+ without system\r\n- Use .agent structure to avoid redundant codebase scanning\r\n- Reference existing documentation rather than recreating context\r\n\r\n---\r\n*This section was added by the Grok CLI documentation system*`;\r\n  }\r\n}\r\n\r\nexport const claudeMdParser = new ClaudeMdParserImpl();","import * as ops from 'fs-extra';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { existsSync } from 'fs';\r\nimport { claudeMdParser } from './claude-md-parser.js';\r\n\r\nexport interface AgentSystemConfig {\r\n  projectName: string;\r\n  projectType: 'grok-cli' | 'external';\r\n  rootPath: string;\r\n}\r\n\r\nexport class AgentSystemGenerator {\r\n  private config: AgentSystemConfig;\r\n\r\n  constructor(config: AgentSystemConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  async generateAgentSystem(): Promise<{ success: boolean; message: string; filesCreated: string[] }> {\r\n    const agentPath = path.join(this.config.rootPath, '.agent');\r\n    const filesCreated: string[] = [];\r\n\r\n    try {\r\n      // Check if .agent already exists\r\n      if (existsSync(agentPath)) {\r\n        return {\r\n          success: false,\r\n          message: '.agent directory already exists. Use --rebuild to recreate.',\r\n          filesCreated: []\r\n        };\r\n      }\r\n\r\n      // Create .agent directory structure\r\n      await ops.mkdir(agentPath, { recursive: true });\r\n      await ops.mkdir(path.join(agentPath, 'system'), { recursive: true });\r\n      await ops.mkdir(path.join(agentPath, 'tasks'), { recursive: true });\r\n      await ops.mkdir(path.join(agentPath, 'sop'), { recursive: true });\r\n      await ops.mkdir(path.join(agentPath, 'incidents'), { recursive: true });\r\n      await ops.mkdir(path.join(agentPath, 'guardrails'), { recursive: true });\r\n      await ops.mkdir(path.join(agentPath, 'commands'), { recursive: true });\r\n\r\n      // Generate README.md (index file)\r\n      const readmeContent = this.generateReadmeContent();\r\n      await ops.promises.writeFile(path.join(agentPath, 'README.md'), readmeContent);\r\n      filesCreated.push('.agent/README.md');\r\n\r\n      // Generate system documentation\r\n      const systemFiles = await this.generateSystemDocs(agentPath);\r\n      filesCreated.push(...systemFiles);\r\n\r\n      // Generate initial SOP\r\n      const sopFiles = await this.generateInitialSOPs(agentPath);\r\n      filesCreated.push(...sopFiles);\r\n\r\n      // Generate example task/PRD\r\n      const taskFiles = await this.generateExampleTask(agentPath);\r\n      filesCreated.push(...taskFiles);\r\n\r\n      // Generate command documentation\r\n      const commandFiles = await this.generateCommandDocs(agentPath);\r\n      filesCreated.push(...commandFiles);\r\n\r\n      // Update CLAUDE.md with documentation workflow\r\n      const documentationSection = claudeMdParser.generateDocumentationSection();\r\n      const claudeResult = await claudeMdParser.updateClaude(this.config.rootPath, documentationSection);\r\n      \r\n      let claudeMessage = '';\r\n      if (claudeResult.success) {\r\n        claudeMessage = `\\n\\n${claudeResult.message}`;\r\n        if (!claudeResult.message.includes('already contains')) {\r\n          filesCreated.push('CLAUDE.md');\r\n        }\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        message: `✅ Agent documentation system created successfully!\\n\\nFiles created:\\n${filesCreated.map(f => `  - ${f}`).join('\\n')}${claudeMessage}`,\r\n        filesCreated\r\n      };\r\n\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        message: `Failed to create agent system: ${error.message}`,\r\n        filesCreated\r\n      };\r\n    }\r\n  }\r\n\r\n  private generateReadmeContent(): string {\r\n    return `# 📚 .agent Documentation System\r\n\r\n## Overview\r\nThis directory contains AI agent documentation for ${this.config.projectName}. This system helps AI agents understand the project context efficiently without scanning the entire codebase.\r\n\r\n## 📁 Directory Structure\r\n\r\n### 📋 system/\r\nCore project information and architecture:\r\n- **architecture.md** - Project structure and design patterns\r\n- **api-schema.md** - API endpoints and data schemas  \r\n- **database-schema.md** - Data models and database structure\r\n- **critical-state.md** - Current system state snapshot\r\n\r\n### 📝 tasks/\r\nProduct requirement documents and feature specifications:\r\n- Store PRDs before implementation\r\n- Reference related architecture and dependencies\r\n- Track implementation progress\r\n\r\n### 📖 sop/\r\nStandard operating procedures and workflows:\r\n- Development patterns and conventions\r\n- Deployment and maintenance procedures\r\n- Code review and testing guidelines\r\n\r\n### 🚨 incidents/\r\nDocumented failures with root cause analysis:\r\n- Error patterns and their fixes\r\n- Recovery procedures\r\n- Prevention strategies\r\n\r\n### 🛡️ guardrails/\r\nEnforceable rules to prevent recurring mistakes:\r\n- Naming conventions\r\n- Configuration constraints\r\n- Implementation patterns\r\n\r\n### ⚙️ commands/\r\nDocumentation for documentation system commands:\r\n- Usage guides for /init-agent, /update-agent-docs, etc.\r\n- Integration workflows\r\n\r\n## 🎯 Usage Guidelines\r\n\r\n### For AI Agents\r\n1. **Always read README.md first** - Get project overview (this file)\r\n2. **Check system/critical-state.md** - Understand current architecture\r\n3. **Review relevant tasks/** - Check for related work or conflicts\r\n4. **Follow sop/** patterns - Use established conventions\r\n5. **Check guardrails/** - Avoid known failure patterns\r\n\r\n### For Updates\r\n- Run \\`/update-agent-docs\\` after significant changes\r\n- Add new PRDs to tasks/ before implementation\r\n- Update system docs when architecture changes\r\n- Document new patterns in sop/\r\n\r\n## 🔗 Cross-References\r\n- Main project documentation: ../README.md\r\n- Configuration: ../.grok/settings.json\r\n- Build instructions: ../package.json\r\n\r\n---\r\n*Generated by Grok CLI Documentation System*\r\n*Last updated: ${new Date().toISOString().split('T')[0]}*\r\n`;\r\n  }\r\n\r\n  private async generateSystemDocs(agentPath: string): Promise<string[]> {\r\n    const systemPath = path.join(agentPath, 'system');\r\n    const files: string[] = [];\r\n\r\n    // Architecture overview\r\n    const archContent = this.config.projectType === 'grok-cli' \r\n      ? this.generateGrokArchitecture() \r\n      : this.generateExternalArchitecture();\r\n    \r\n    await ops.promises.writeFile(path.join(systemPath, 'architecture.md'), archContent);\r\n    files.push('.agent/system/architecture.md');\r\n\r\n    // Critical state snapshot\r\n    const criticalStateContent = this.generateCriticalState();\r\n    await ops.promises.writeFile(path.join(systemPath, 'critical-state.md'), criticalStateContent);\r\n    files.push('.agent/system/critical-state.md');\r\n\r\n    // API schema (if applicable)\r\n    const apiContent = this.generateApiSchema();\r\n    await ops.promises.writeFile(path.join(systemPath, 'api-schema.md'), apiContent);\r\n    files.push('.agent/system/api-schema.md');\r\n\r\n    return files;\r\n  }\r\n\r\n  private generateGrokArchitecture(): string {\r\n    return `# 🏗️ Grok CLI Architecture\r\n\r\n## Project Type\r\n**CLI Application** - Conversational AI tool with terminal interface\r\n\r\n## Technology Stack\r\n- **Language**: TypeScript (ES Modules)\r\n- **Runtime**: Node.js (Bun recommended)\r\n- **UI**: Ink (React for terminal)\r\n- **Build**: TypeScript compiler + tsup for dual builds\r\n- **Package Manager**: Bun/NPM\r\n\r\n## Core Architecture\r\n\r\n### 🧠 Agent System (\\`src/agent/\\`)\r\n- **GrokAgent**: Central orchestration with streaming, tool execution\r\n- **Conversation Management**: Chat history and context handling\r\n- **Model Integration**: X.AI Grok models via OpenAI-compatible API\r\n\r\n### 🛠️ Tool System (\\`src/tools/\\`)\r\n- **Modular Design**: Independent tools for specific operations\r\n- **Core Tools**: File operations, bash execution, search\r\n- **Advanced Tools**: Multi-file editing, code analysis, operation history\r\n- **Documentation Tools**: NEW - Agent system generation and maintenance\r\n\r\n### 🖥️ UI Components (\\`src/ui/\\`)\r\n- **Chat Interface**: Streaming responses with tool execution display\r\n- **Input Handling**: Enhanced terminal input with history and shortcuts\r\n- **Component Library**: Reusable Ink components for consistent UX\r\n\r\n### 🔌 MCP Integration (\\`src/mcp/\\`)\r\n- **Model Context Protocol**: Extensible server integration\r\n- **Supported Servers**: Linear, GitHub, custom servers\r\n- **Transport Types**: stdio, HTTP, SSE\r\n\r\n### ⚙️ Configuration (\\`src/utils/\\`)\r\n- **Settings Management**: User and project-level config\r\n- **Model Configuration**: Support for multiple AI models\r\n- **File Locations**: ~/.grok/ for user, .grok/ for project\r\n\r\n## Build & Distribution\r\n- **Development**: \\`bun run dev\\` for live reload\r\n- **Production**: \\`npm run build\\` → dist/ directory\r\n- **Installation**: NPM global package\r\n\r\n## Extension Points\r\n- **Tool System**: Add new tools in src/tools/\r\n- **MCP Servers**: Configure external service integration\r\n- **UI Components**: Extend terminal interface capabilities\r\n- **Commands**: Add slash commands in input handler\r\n\r\n## Current Capabilities\r\n✅ File operations (read, write, edit, multi-file)\r\n✅ Bash command execution\r\n✅ Code analysis and refactoring\r\n✅ Search and replace operations\r\n✅ MCP server integration\r\n✅ Operation history and undo/redo\r\n✅ Project-specific configuration\r\n\r\n## Planned Enhancements\r\n🔲 Documentation generation system\r\n🔲 Subagent framework for context efficiency\r\n🔲 Self-healing guardrails\r\n🔲 Advanced code intelligence\r\n🔲 CI/CD integration\r\n\r\n*Updated: ${new Date().toISOString().split('T')[0]}*\r\n`;\r\n  }\r\n\r\n  private generateExternalArchitecture(): string {\r\n    return `# 🏗️ Project Architecture\r\n\r\n## Project Overview\r\nExternal project documented using Grok CLI's .agent system.\r\n\r\n## Technology Stack\r\n*To be analyzed and documented*\r\n\r\n## Core Components\r\n*To be identified during project analysis*\r\n\r\n## Current State\r\n- Project type: External\r\n- Documentation system: Initialized\r\n- Architecture analysis: Pending\r\n\r\n## Next Steps\r\n1. Run project analysis to identify:\r\n   - Technology stack and frameworks\r\n   - Core components and modules\r\n   - Build and deployment processes\r\n   - Dependencies and configurations\r\n\r\n2. Update this file with findings\r\n3. Create specific documentation for key components\r\n\r\n*This is a template - update after project analysis*\r\n*Updated: ${new Date().toISOString().split('T')[0]}*\r\n`;\r\n  }\r\n\r\n  private generateCriticalState(): string {\r\n    const timestamp = new Date().toISOString();\r\n    \r\n    if (this.config.projectType === 'grok-cli') {\r\n      return `# 🔧 Current System State\r\n\r\n## Architecture Overview\r\n- **Type**: CLI application with React/Ink UI\r\n- **Language**: TypeScript (ESM modules)\r\n- **Build**: TypeScript compiler + tsup dual build (CJS/ESM)\r\n- **Package**: NPM global installation\r\n- **Runtime**: Node.js (Bun recommended)\r\n\r\n## Core Components\r\n- **Commands**: Slash-based in src/commands/ (limited - only MCP command currently)\r\n- **Tools**: Modular tools in src/tools/ (extensive tool system)\r\n- **UI**: Ink components in src/ui/\r\n- **Settings**: File-based .grok/settings.json + ~/.grok/user-settings.json\r\n- **Input**: Enhanced terminal input with history in src/hooks/\r\n\r\n## Command System\r\n- **Slash Commands**: Handled in useInputHandler.ts\r\n- **Current Commands**: /help, /clear, /models, /commit-and-push, /exit\r\n- **Command Registration**: Direct implementation in input handler\r\n- **Extension Pattern**: Add to handleDirectCommand function\r\n\r\n## Authentication & Storage\r\n- **Auth**: Environment variable GROK_API_KEY or user settings\r\n- **Storage**: Local file system only\r\n- **Database**: None (settings via JSON files)\r\n- **MCP**: Optional server integration\r\n\r\n## Current Capabilities\r\n- ✅ File operations (read, write, edit, multi-file)\r\n- ✅ Bash command execution with output capture\r\n- ✅ Code analysis (AST parsing, refactoring)\r\n- ✅ Search functionality (ripgrep-based)\r\n- ✅ Operation history and undo/redo\r\n- ✅ MCP server integration\r\n- ✅ Todo management system\r\n- ❌ No documentation generation system (yet)\r\n- ❌ No cloud storage integration\r\n- ❌ No built-in authentication system\r\n\r\n## Build Configuration\r\n- **TypeScript**: ESM modules with dual CJS/ESM output\r\n- **Dependencies**: Ink, React, commander, chalk, ripgrep\r\n- **Scripts**: dev, build, start, lint, typecheck\r\n\r\n## Known Limitations\r\n- Command system not centralized (handled in input hook)\r\n- No formal command registration system\r\n- Limited built-in documentation capabilities\r\n\r\n## Recent Changes\r\n- Fixed React import issues for ESM compatibility\r\n- Implemented dual-build system with tsup\r\n- Reverted to working TypeScript build\r\n\r\nLast Updated: ${timestamp}\r\nUpdated By: Agent System Generator during /init-agent\r\n`;\r\n    } else {\r\n      return `# 🔧 Current System State\r\n\r\n## Project Analysis\r\n- **Project Type**: External project\r\n- **Documentation Status**: Initialized\r\n- **Analysis Status**: Pending\r\n\r\n## Discovered Components\r\n*To be populated during analysis*\r\n\r\n## Current Capabilities\r\n*To be identified*\r\n\r\n## Configuration\r\n*To be documented*\r\n\r\n## Dependencies\r\n*To be analyzed*\r\n\r\nLast Updated: ${timestamp}\r\nUpdated By: Agent System Generator during /init-agent\r\n*This file will be updated as the project is analyzed*\r\n`;\r\n    }\r\n  }\r\n\r\n  private generateApiSchema(): string {\r\n    if (this.config.projectType === 'grok-cli') {\r\n      return `# 🔌 API Schema\r\n\r\n## Grok API Integration\r\n\r\n### Base Configuration\r\n\\`\\`\\`typescript\r\n{\r\n  baseURL: \"https://api.x.ai/v1\",\r\n  defaultModel: \"grok-code-fast-1\",\r\n  apiKey: process.env.GROK_API_KEY\r\n}\r\n\\`\\`\\`\r\n\r\n### Available Models\r\n- **grok-4-latest**: Latest Grok model with enhanced capabilities\r\n- **grok-code-fast-1**: Optimized for code generation (default)\r\n- **grok-3-fast**: Fast general-purpose model\r\n\r\n### Tool Integration Schema\r\nTools follow OpenAI function calling format:\r\n\r\n\\`\\`\\`typescript\r\ninterface ToolCall {\r\n  id: string;\r\n  type: \"function\";\r\n  function: {\r\n    name: string;\r\n    arguments: string; // JSON stringified\r\n  };\r\n}\r\n\r\ninterface ToolResult {\r\n  success: boolean;\r\n  output?: string;\r\n  error?: string;\r\n}\r\n\\`\\`\\`\r\n\r\n### MCP Server Schema\r\nModel Context Protocol integration:\r\n\r\n\\`\\`\\`typescript\r\ninterface MCPServerConfig {\r\n  name: string;\r\n  transport: {\r\n    type: 'stdio' | 'http' | 'sse' | 'streamable_http';\r\n    command?: string;\r\n    args?: string[];\r\n    url?: string;\r\n    env?: Record<string, string>;\r\n    headers?: Record<string, string>;\r\n  };\r\n}\r\n\\`\\`\\`\r\n\r\n## Internal APIs\r\n\r\n### Agent Interface\r\n\\`\\`\\`typescript\r\ninterface GrokAgent {\r\n  processUserMessageStream(input: string): AsyncGenerator<StreamChunk>;\r\n  executeBashCommand(command: string): Promise<ToolResult>;\r\n  setModel(model: string): void;\r\n  getCurrentModel(): string;\r\n}\r\n\\`\\`\\`\r\n\r\n### Tool Interface\r\n\\`\\`\\`typescript\r\ninterface Tool {\r\n  name: string;\r\n  description: string;\r\n  parameters: JSONSchema7;\r\n  execute(args: any): Promise<ToolResult>;\r\n}\r\n\\`\\`\\`\r\n\r\n*Updated: ${new Date().toISOString().split('T')[0]}*\r\n`;\r\n    } else {\r\n      return `# 🔌 API Schema\r\n\r\n## Project APIs\r\n*To be documented after project analysis*\r\n\r\n## External Dependencies\r\n*To be identified*\r\n\r\n## Data Models\r\n*To be documented*\r\n\r\n*This file will be updated as APIs are discovered and analyzed*\r\n*Updated: ${new Date().toISOString().split('T')[0]}*\r\n`;\r\n    }\r\n  }\r\n\r\n  private async generateInitialSOPs(agentPath: string): Promise<string[]> {\r\n    const sopPath = path.join(agentPath, 'sop');\r\n    const files: string[] = [];\r\n\r\n    // Documentation workflow SOP\r\n    const docWorkflowContent = `# 📚 Documentation Workflow SOP\r\n\r\n## When to Update Documentation\r\n\r\n### Trigger Events\r\n1. **Architecture Changes**: New components, modified structure\r\n2. **New Features**: Added functionality or tools\r\n3. **Configuration Changes**: Settings, build process, dependencies\r\n4. **After Major Commits**: Significant code changes\r\n5. **Failed Operations**: Document lessons learned\r\n\r\n### Update Process\r\n\r\n#### 1. Before Implementation\r\n- [ ] Read .agent/README.md for project overview\r\n- [ ] Check .agent/system/critical-state.md for current architecture  \r\n- [ ] Review .agent/tasks/ for related work or conflicts\r\n- [ ] Scan .agent/sop/ for established patterns\r\n- [ ] Check .agent/guardrails/ for constraints\r\n\r\n#### 2. During Implementation\r\n- [ ] Store PRDs in .agent/tasks/ before coding\r\n- [ ] Reference architecture docs for consistency\r\n- [ ] Follow established patterns from SOPs\r\n- [ ] Use cross-references between .agent docs\r\n\r\n#### 3. After Implementation\r\n- [ ] Run \\`/update-agent-docs\\` to capture changes\r\n- [ ] Update .agent/system/ if architecture changed\r\n- [ ] Add new SOPs for repeatable processes\r\n- [ ] Link related tasks and documents\r\n- [ ] Test documentation updates for accuracy\r\n\r\n## Documentation Standards\r\n\r\n### File Organization\r\n- **system/**: Core architecture and state\r\n- **tasks/**: PRDs and feature specifications\r\n- **sop/**: Procedures and workflows\r\n- **incidents/**: Failure documentation\r\n- **guardrails/**: Prevention rules\r\n\r\n### Writing Guidelines\r\n- **Conciseness**: Keep sections under 300 tokens\r\n- **Cross-linking**: Use relative links between docs\r\n- **Consistency**: Follow established markdown patterns\r\n- **Freshness**: Include update timestamps\r\n- **Relevance**: Focus on actionable information\r\n\r\n### Template Usage\r\n- Use consistent headings and structure\r\n- Include metadata (updated date, updated by)\r\n- Reference related documents\r\n- Maintain clear navigation\r\n\r\n## Automation\r\n- Auto-update triggers configured in .grok/settings.json\r\n- Smart prompts after key file changes\r\n- Token threshold reminders\r\n- Integration with git commit hooks\r\n\r\n*Updated: ${new Date().toISOString().split('T')[0]}*\r\n`;\r\n\r\n    await ops.promises.writeFile(path.join(sopPath, 'documentation-workflow.md'), docWorkflowContent);\r\n    files.push('.agent/sop/documentation-workflow.md');\r\n\r\n    // Adding new command SOP (Grok CLI specific)\r\n    if (this.config.projectType === 'grok-cli') {\r\n      const newCommandContent = `# ⚙️ Adding New Commands SOP\r\n\r\n## Command System Architecture\r\n\r\n### Current Implementation\r\n- Commands handled in \\`src/hooks/use-input-handler.ts\\`\r\n- Direct implementation in \\`handleDirectCommand\\` function\r\n- No centralized command registry (yet)\r\n\r\n### Command Types\r\n\r\n#### 1. Slash Commands\r\nBuilt-in commands starting with \\`/\\`:\r\n- Implementation: Add to \\`handleDirectCommand\\` function\r\n- Pattern: \\`if (trimmedInput === \"/your-command\") { ... }\\`\r\n- Registration: Update \\`commandSuggestions\\` array\r\n\r\n#### 2. Direct Bash Commands  \r\nImmediate execution commands:\r\n- Pattern: Add to \\`directBashCommands\\` array\r\n- Execution: Automatic bash execution\r\n\r\n#### 3. Natural Language\r\nAI-processed commands:\r\n- Fallback: Processed by \\`processUserMessage\\`\r\n- Tool selection: Automatic based on AI analysis\r\n\r\n### Implementation Steps\r\n\r\n#### 1. Add Slash Command\r\n\\`\\`\\`typescript\r\n// In commandSuggestions array\r\n{ command: \"/your-command\", description: \"Your command description\" }\r\n\r\n// In handleDirectCommand function  \r\nif (trimmedInput === \"/your-command\") {\r\n  // Implementation logic\r\n  const result = await someOperation();\r\n  \r\n  const entry: ChatEntry = {\r\n    type: \"assistant\",\r\n    content: result,\r\n    timestamp: new Date(),\r\n  };\r\n  setChatHistory((prev) => [...prev, entry]);\r\n  clearInput();\r\n  return true;\r\n}\r\n\\`\\`\\`\r\n\r\n#### 2. Add Tool-Based Command\r\nCreate tool in \\`src/tools/\\`, then reference in command handler.\r\n\r\n#### 3. Update Documentation\r\n- Add command to /help output\r\n- Document in .agent/commands/\r\n- Update this SOP if pattern changes\r\n\r\n### Best Practices\r\n- **Consistent UX**: Follow existing command patterns\r\n- **Error Handling**: Provide clear feedback\r\n- **Tool Integration**: Leverage existing tool system\r\n- **State Management**: Update chat history appropriately\r\n- **Input Cleanup**: Always call \\`clearInput()\\`\r\n\r\n### Future Improvements\r\n- Centralized command registry system\r\n- Dynamic command loading\r\n- Plugin-based command architecture\r\n\r\n*Updated: ${new Date().toISOString().split('T')[0]}*\r\n`;\r\n\r\n      await ops.promises.writeFile(path.join(sopPath, 'adding-new-command.md'), newCommandContent);\r\n      files.push('.agent/sop/adding-new-command.md');\r\n    }\r\n\r\n    return files;\r\n  }\r\n\r\n  private async generateExampleTask(agentPath: string): Promise<string[]> {\r\n    const tasksPath = path.join(agentPath, 'tasks');\r\n    const files: string[] = [];\r\n\r\n    const exampleContent = this.config.projectType === 'grok-cli'\r\n      ? this.generateGrokExampleTask()\r\n      : this.generateExternalExampleTask();\r\n\r\n    await ops.promises.writeFile(path.join(tasksPath, 'example-prd.md'), exampleContent);\r\n    files.push('.agent/tasks/example-prd.md');\r\n\r\n    return files;\r\n  }\r\n\r\n  private generateGrokExampleTask(): string {\r\n    return `# 📋 Example PRD: Documentation System Enhancement\r\n\r\n## Objective\r\nAdd comprehensive documentation generation capabilities to Grok CLI.\r\n\r\n## Background\r\nGrok CLI needs better documentation tools to help users document both the CLI itself and their projects efficiently.\r\n\r\n## Requirements\r\n\r\n### Must Have\r\n- [ ] \\`/init-agent\\` command for .agent system creation\r\n- [ ] \\`/docs\\` interactive menu for documentation options\r\n- [ ] \\`/readme\\` command for README generation\r\n- [ ] Integration with existing command system\r\n\r\n### Should Have  \r\n- [ ] \\`/api-docs\\` for API documentation\r\n- [ ] \\`/comments\\` for code comment generation\r\n- [ ] Auto-update system for documentation maintenance\r\n\r\n### Could Have\r\n- [ ] Custom templates for different project types\r\n- [ ] Documentation quality scoring\r\n- [ ] Integration with external documentation tools\r\n\r\n## Technical Approach\r\n\r\n### Architecture Impact\r\n- New tool directory: \\`src/tools/documentation/\\`\r\n- Command integration: Update \\`use-input-handler.ts\\`\r\n- New dependencies: Minimal (leverage existing tools)\r\n\r\n### Implementation Strategy\r\n1. **Phase 1**: Agent system generator tool\r\n2. **Phase 2**: Core documentation commands\r\n3. **Phase 3**: Advanced features and automation\r\n\r\n### Compatibility\r\n- Must not break existing functionality\r\n- Should follow established command patterns\r\n- Integrate with current tool system architecture\r\n\r\n## Success Criteria\r\n- [ ] Users can run \\`/init-agent\\` and get functional documentation\r\n- [ ] Commands are discoverable and intuitive\r\n- [ ] Generated documentation is high quality\r\n- [ ] System integrates seamlessly with existing workflow\r\n\r\n## Dependencies\r\n- Existing AST parser tool\r\n- Current search functionality  \r\n- File operation tools\r\n- Command system in input handler\r\n\r\n## Risks & Mitigation\r\n- **Risk**: Command system complexity\r\n- **Mitigation**: Follow existing patterns, minimal changes\r\n\r\n## Timeline\r\n- **Week 1-2**: Foundation and agent system\r\n- **Week 3-4**: Core documentation commands\r\n- **Week 5-6**: Advanced features and polish\r\n\r\n---\r\n*This is an example PRD showing the format and level of detail expected*\r\n*Created: ${new Date().toISOString().split('T')[0]}*\r\n*Status: Example/Template*\r\n`;\r\n  }\r\n\r\n  private generateExternalExampleTask(): string {\r\n    return `# 📋 Example PRD Template\r\n\r\n## Objective\r\n*Describe what you want to build or improve*\r\n\r\n## Background\r\n*Provide context about why this is needed*\r\n\r\n## Requirements\r\n\r\n### Must Have\r\n- [ ] *Critical features that must be implemented*\r\n\r\n### Should Have\r\n- [ ] *Important features that add significant value*\r\n\r\n### Could Have\r\n- [ ] *Nice-to-have features for future consideration*\r\n\r\n## Technical Approach\r\n\r\n### Architecture Impact\r\n*How will this change the system architecture?*\r\n\r\n### Implementation Strategy\r\n*High-level approach and phases*\r\n\r\n### Dependencies\r\n*What existing systems or external dependencies are required?*\r\n\r\n## Success Criteria\r\n- [ ] *How will you know this is successful?*\r\n\r\n## Risks & Mitigation\r\n- **Risk**: *Potential issues*\r\n- **Mitigation**: *How to address them*\r\n\r\n## Timeline\r\n*Estimated implementation timeline*\r\n\r\n---\r\n*This is a template - replace with actual PRD content*\r\n*Created: ${new Date().toISOString().split('T')[0]}*\r\n*Status: Template*\r\n`;\r\n  }\r\n\r\n  private async generateCommandDocs(agentPath: string): Promise<string[]> {\r\n    const commandsPath = path.join(agentPath, 'commands');\r\n    const files: string[] = [];\r\n\r\n    // /init-agent documentation\r\n    const initAgentContent = `# 📖 /init-agent Command\r\n\r\n## Purpose\r\nInitialize the .agent documentation system for AI-first project understanding.\r\n\r\n## Usage\r\n\\`\\`\\`bash\r\n/init-agent\r\n\\`\\`\\`\r\n\r\n## What It Does\r\n\r\n### 1. Directory Creation\r\nCreates \\`.agent/\\` folder structure:\r\n- \\`system/\\` - Architecture and current state\r\n- \\`tasks/\\` - PRDs and feature specifications  \r\n- \\`sop/\\` - Standard operating procedures\r\n- \\`incidents/\\` - Failure documentation\r\n- \\`guardrails/\\` - Prevention rules\r\n- \\`commands/\\` - Command documentation\r\n\r\n### 2. Initial Documentation\r\n- **README.md**: Navigation and overview\r\n- **system/architecture.md**: Project structure\r\n- **system/critical-state.md**: Current system snapshot\r\n- **system/api-schema.md**: APIs and interfaces\r\n- **sop/documentation-workflow.md**: Update procedures\r\n\r\n### 3. Integration\r\n- Updates or creates CLAUDE.md with workflow instructions\r\n- Configures documentation system for the project type\r\n- Sets up foundation for other documentation commands\r\n\r\n## Project Types\r\n\r\n### Grok CLI (Internal)\r\n- Documents Grok CLI's own architecture\r\n- Includes command system patterns\r\n- References existing tool structure\r\n\r\n### External Project\r\n- Generic project documentation template\r\n- Prepares for project analysis\r\n- Creates foundation for custom documentation\r\n\r\n## Files Created\r\nAfter running \\`/init-agent\\`, you'll have:\r\n- \\`.agent/README.md\\` - Main index\r\n- \\`.agent/system/\\` - 3 core architecture files\r\n- \\`.agent/sop/\\` - Documentation procedures\r\n- \\`.agent/tasks/example-prd.md\\` - PRD template\r\n- \\`.agent/commands/\\` - Command documentation\r\n\r\n## Next Steps\r\nAfter initialization:\r\n1. Review generated documentation\r\n2. Customize templates for your project\r\n3. Run \\`/update-agent-docs\\` after changes\r\n4. Add PRDs to \\`tasks/\\` before implementation\r\n\r\n## Error Handling\r\n- Checks for existing \\`.agent/\\` directory\r\n- Provides clear error messages\r\n- Safe operation (won't overwrite)\r\n\r\n*Updated: ${new Date().toISOString().split('T')[0]}*\r\n`;\r\n\r\n    await ops.promises.writeFile(path.join(commandsPath, 'init-agent.md'), initAgentContent);\r\n    files.push('.agent/commands/init-agent.md');\r\n\r\n    return files;\r\n  }\r\n\r\n  async rebuildAgentSystem(): Promise<{ success: boolean; message: string; filesCreated: string[] }> {\r\n    const agentPath = path.join(this.config.rootPath, '.agent');\r\n    \r\n    try {\r\n      // Remove existing .agent directory if it exists\r\n      if (existsSync(agentPath)) {\r\n        await ops.rm(agentPath, { recursive: true, force: true });\r\n      }\r\n\r\n      // Generate new system\r\n      return await this.generateAgentSystem();\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        message: `Failed to rebuild agent system: ${error.message}`,\r\n        filesCreated: []\r\n      };\r\n    }\r\n  }\r\n}","export interface DocsMenuOption {\r\n  key: string;\r\n  title: string;\r\n  description: string;\r\n  command: string;\r\n}\r\n\r\nexport const DOCS_MENU_OPTIONS: DocsMenuOption[] = [\r\n  {\r\n    key: \"1\",\r\n    title: \"Generate README\",\r\n    description: \"Create comprehensive README.md from project structure\",\r\n    command: \"/readme\"\r\n  },\r\n  {\r\n    key: \"2\", \r\n    title: \"Generate API Documentation\",\r\n    description: \"Extract and document functions, classes, modules\",\r\n    command: \"/api-docs\"\r\n  },\r\n  {\r\n    key: \"3\",\r\n    title: \"Add Code Comments\", \r\n    description: \"Add intelligent comments to existing code\",\r\n    command: \"/comments\"\r\n  },\r\n  {\r\n    key: \"4\",\r\n    title: \"Generate Changelog\",\r\n    description: \"Generate CHANGELOG.md from git history\", \r\n    command: \"/changelog\"\r\n  },\r\n  {\r\n    key: \"5\",\r\n    title: \"Initialize .agent System\",\r\n    description: \"Set up AI-first documentation structure\",\r\n    command: \"/init-agent\"\r\n  },\r\n  {\r\n    key: \"6\", \r\n    title: \"Update .agent Documentation\",\r\n    description: \"Sync docs with recent code changes\",\r\n    command: \"/update-agent-docs\"\r\n  }\r\n];\r\n\r\nexport function generateDocsMenuText(): string {\r\n  return `📚 **Documentation Menu**\r\n\r\nChoose a documentation task:\r\n\r\n${DOCS_MENU_OPTIONS.map(option => \r\n  `**${option.key}.** ${option.title}\r\n   ${option.description}\r\n   → \\`${option.command}\\`\r\n`).join('\\n')}\r\n\r\n**0.** Exit Menu\r\n\r\nType a number to select an option, or type any command directly.`;\r\n}\r\n\r\nexport function findDocsMenuOption(input: string): DocsMenuOption | null {\r\n  const trimmed = input.trim();\r\n  return DOCS_MENU_OPTIONS.find(option => option.key === trimmed) || null;\r\n}","import * as ops from 'fs-extra';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { existsSync } from 'fs';\r\n\r\nexport interface ReadmeConfig {\r\n  projectName: string;\r\n  rootPath: string;\r\n  updateExisting: boolean;\r\n  template: 'default' | 'api' | 'cli' | 'library';\r\n}\r\n\r\nexport interface ProjectAnalysis {\r\n  packageJson?: any;\r\n  hasTypeScript: boolean;\r\n  hasReact: boolean;\r\n  hasTests: boolean;\r\n  hasDocs: boolean;\r\n  buildScripts: string[];\r\n  dependencies: string[];\r\n  devDependencies: string[];\r\n  mainFiles: string[];\r\n  framework?: string;\r\n}\r\n\r\nexport class ReadmeGenerator {\r\n  private config: ReadmeConfig;\r\n\r\n  constructor(config: ReadmeConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  async generateReadme(): Promise<{ success: boolean; message: string; content?: string }> {\r\n    try {\r\n      // Analyze project structure\r\n      const analysis = await this.analyzeProject();\r\n      \r\n      // Check if README exists\r\n      const readmePath = path.join(this.config.rootPath, 'README.md');\r\n      const readmeExists = existsSync(readmePath);\r\n\r\n      if (readmeExists && !this.config.updateExisting) {\r\n        return {\r\n          success: false,\r\n          message: 'README.md already exists. Use --update flag to overwrite.'\r\n        };\r\n      }\r\n\r\n      // Generate content based on analysis\r\n      const content = this.generateReadmeContent(analysis);\r\n\r\n      // Write file\r\n      await ops.promises.writeFile(readmePath, content);\r\n\r\n      return {\r\n        success: true,\r\n        message: readmeExists \r\n          ? '✅ Updated existing README.md with comprehensive documentation'\r\n          : '✅ Created new README.md with project documentation',\r\n        content\r\n      };\r\n\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        message: `Failed to generate README: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  private async analyzeProject(): Promise<ProjectAnalysis> {\r\n    const analysis: ProjectAnalysis = {\r\n      hasTypeScript: false,\r\n      hasReact: false,\r\n      hasTests: false,\r\n      hasDocs: false,\r\n      buildScripts: [],\r\n      dependencies: [],\r\n      devDependencies: [],\r\n      mainFiles: []\r\n    };\r\n\r\n    try {\r\n      // Check package.json\r\n      const packagePath = path.join(this.config.rootPath, 'package.json');\r\n      if (existsSync(packagePath)) {\r\n        const packageContent = await ops.promises.readFile(packagePath, 'utf-8');\r\n        analysis.packageJson = JSON.parse(packageContent);\r\n        \r\n        // Extract dependencies\r\n        analysis.dependencies = Object.keys(analysis.packageJson.dependencies || {});\r\n        analysis.devDependencies = Object.keys(analysis.packageJson.devDependencies || {});\r\n        \r\n        // Detect technologies\r\n        analysis.hasReact = analysis.dependencies.includes('react') || analysis.devDependencies.includes('react');\r\n        analysis.hasTypeScript = analysis.devDependencies.includes('typescript') || existsSync(path.join(this.config.rootPath, 'tsconfig.json'));\r\n        \r\n        // Extract build scripts\r\n        const scripts = analysis.packageJson.scripts || {};\r\n        analysis.buildScripts = Object.keys(scripts).filter(script => \r\n          ['build', 'dev', 'start', 'test', 'lint', 'typecheck'].includes(script)\r\n        );\r\n\r\n        // Detect framework\r\n        if (analysis.dependencies.includes('next')) analysis.framework = 'Next.js';\r\n        else if (analysis.dependencies.includes('express')) analysis.framework = 'Express.js';\r\n        else if (analysis.dependencies.includes('ink')) analysis.framework = 'Ink (Terminal)';\r\n        else if (analysis.hasReact) analysis.framework = 'React';\r\n      }\r\n\r\n      // Check for common files\r\n      const commonFiles = ['src/', 'lib/', 'docs/', 'test/', 'tests/', '__tests__/'];\r\n      for (const file of commonFiles) {\r\n        if (existsSync(path.join(this.config.rootPath, file))) {\r\n          if (file.includes('test')) analysis.hasTests = true;\r\n          if (file.includes('docs')) analysis.hasDocs = true;\r\n          analysis.mainFiles.push(file);\r\n        }\r\n      }\r\n\r\n      return analysis;\r\n    } catch (error) {\r\n      return analysis;\r\n    }\r\n  }\r\n\r\n  private generateReadmeContent(analysis: ProjectAnalysis): string {\r\n    const pkg = analysis.packageJson;\r\n    const projectName = this.config.projectName || pkg?.name || 'Project';\r\n    \r\n    let content = `# ${projectName}\\n\\n`;\r\n\r\n    // Description\r\n    if (pkg?.description) {\r\n      content += `${pkg.description}\\n\\n`;\r\n    } else {\r\n      content += `A ${analysis.framework || 'JavaScript'} project.\\n\\n`;\r\n    }\r\n\r\n    // Badges (if package.json exists)\r\n    if (pkg) {\r\n      content += this.generateBadges(analysis);\r\n    }\r\n\r\n    // Table of Contents\r\n    content += `## 📋 Table of Contents\\n\\n`;\r\n    content += `- [Installation](#installation)\\n`;\r\n    content += `- [Usage](#usage)\\n`;\r\n    if (analysis.buildScripts.length > 0) content += `- [Development](#development)\\n`;\r\n    if (analysis.hasTests) content += `- [Testing](#testing)\\n`;\r\n    if (pkg?.scripts?.build) content += `- [Building](#building)\\n`;\r\n    content += `- [Configuration](#configuration)\\n`;\r\n    content += `- [Contributing](#contributing)\\n`;\r\n    content += `- [License](#license)\\n\\n`;\r\n\r\n    // Installation\r\n    content += `## 🚀 Installation\\n\\n`;\r\n    if (pkg?.bin) {\r\n      content += `### Global Installation\\n\\`\\`\\`bash\\nnpm install -g ${pkg.name}\\n\\`\\`\\`\\n\\n`;\r\n    }\r\n    content += `### Local Installation\\n\\`\\`\\`bash\\n`;\r\n    content += `# Clone the repository\\ngit clone <repository-url>\\n`;\r\n    content += `cd ${pkg?.name || projectName.toLowerCase()}\\n\\n`;\r\n    content += `# Install dependencies\\nnpm install\\n\\`\\`\\`\\n\\n`;\r\n\r\n    // Usage\r\n    content += `## 💻 Usage\\n\\n`;\r\n    if (pkg?.bin) {\r\n      const binName = Object.keys(pkg.bin)[0];\r\n      content += `### Command Line\\n\\`\\`\\`bash\\n${binName} [options]\\n\\`\\`\\`\\n\\n`;\r\n    }\r\n    if (analysis.framework === 'Express.js') {\r\n      content += `### API Server\\n\\`\\`\\`bash\\nnpm start\\n\\`\\`\\`\\n\\nThe server will start on \\`http://localhost:3000\\`\\n\\n`;\r\n    } else if (analysis.hasReact) {\r\n      content += `### Development Server\\n\\`\\`\\`bash\\nnpm run dev\\n\\`\\`\\`\\n\\nOpen [http://localhost:3000](http://localhost:3000) in your browser.\\n\\n`;\r\n    }\r\n\r\n    // Development section\r\n    if (analysis.buildScripts.length > 0) {\r\n      content += `## 🛠️ Development\\n\\n`;\r\n      content += `### Available Scripts\\n\\n`;\r\n      \r\n      analysis.buildScripts.forEach(script => {\r\n        const description = this.getScriptDescription(script);\r\n        content += `- \\`npm run ${script}\\` - ${description}\\n`;\r\n      });\r\n      content += '\\n';\r\n    }\r\n\r\n    // Testing\r\n    if (analysis.hasTests) {\r\n      content += `## 🧪 Testing\\n\\n`;\r\n      content += `\\`\\`\\`bash\\nnpm test\\n\\`\\`\\`\\n\\n`;\r\n      if (analysis.buildScripts.includes('test:watch')) {\r\n        content += `### Watch Mode\\n\\`\\`\\`bash\\nnpm run test:watch\\n\\`\\`\\`\\n\\n`;\r\n      }\r\n    }\r\n\r\n    // Building\r\n    if (pkg?.scripts?.build) {\r\n      content += `## 📦 Building\\n\\n`;\r\n      content += `\\`\\`\\`bash\\nnpm run build\\n\\`\\`\\`\\n\\n`;\r\n      if (analysis.hasTypeScript) {\r\n        content += `This will compile TypeScript files and output to the \\`dist/\\` directory.\\n\\n`;\r\n      }\r\n    }\r\n\r\n    // Technology Stack\r\n    if (analysis.dependencies.length > 0) {\r\n      content += `## 🔧 Technology Stack\\n\\n`;\r\n      if (analysis.framework) content += `- **Framework**: ${analysis.framework}\\n`;\r\n      if (analysis.hasTypeScript) content += `- **Language**: TypeScript\\n`;\r\n      \r\n      const keyDeps = analysis.dependencies.filter(dep => \r\n        ['react', 'express', 'next', 'ink', 'commander', 'chalk'].includes(dep)\r\n      );\r\n      if (keyDeps.length > 0) {\r\n        content += `- **Key Dependencies**: ${keyDeps.join(', ')}\\n`;\r\n      }\r\n      content += '\\n';\r\n    }\r\n\r\n    // Configuration\r\n    content += `## ⚙️ Configuration\\n\\n`;\r\n    if (existsSync(path.join(this.config.rootPath, '.env.example'))) {\r\n      content += `Copy \\`.env.example\\` to \\`.env\\` and configure your environment variables:\\n\\n`;\r\n      content += `\\`\\`\\`bash\\ncp .env.example .env\\n\\`\\`\\`\\n\\n`;\r\n    }\r\n    if (analysis.hasTypeScript) {\r\n      content += `### TypeScript Configuration\\nTypeScript is configured via \\`tsconfig.json\\`.\\n\\n`;\r\n    }\r\n\r\n    // API Documentation (if applicable)\r\n    if (analysis.framework === 'Express.js' || pkg?.main?.includes('api')) {\r\n      content += `## 📖 API Documentation\\n\\n`;\r\n      content += `API documentation is available at \\`/docs\\` when running the server.\\n\\n`;\r\n    }\r\n\r\n    // Contributing\r\n    content += `## 🤝 Contributing\\n\\n`;\r\n    content += `1. Fork the repository\\n`;\r\n    content += `2. Create a feature branch (\\`git checkout -b feature/amazing-feature\\`)\\n`;\r\n    content += `3. Commit your changes (\\`git commit -m 'Add amazing feature'\\`)\\n`;\r\n    content += `4. Push to the branch (\\`git push origin feature/amazing-feature\\`)\\n`;\r\n    content += `5. Open a Pull Request\\n\\n`;\r\n\r\n    // License\r\n    content += `## 📄 License\\n\\n`;\r\n    if (pkg?.license) {\r\n      content += `This project is licensed under the ${pkg.license} License.\\n\\n`;\r\n    } else {\r\n      content += `This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\\n\\n`;\r\n    }\r\n\r\n    // Generated footer\r\n    content += `---\\n*Generated by Grok CLI Documentation System*\\n`;\r\n    content += `*Last updated: ${new Date().toISOString().split('T')[0]}*`;\r\n\r\n    return content;\r\n  }\r\n\r\n  private generateBadges(analysis: ProjectAnalysis): string {\r\n    let badges = '';\r\n    \r\n    if (analysis.packageJson?.version) {\r\n      badges += `![Version](https://img.shields.io/badge/version-${analysis.packageJson.version}-blue.svg)\\n`;\r\n    }\r\n    \r\n    if (analysis.hasTypeScript) {\r\n      badges += `![TypeScript](https://img.shields.io/badge/TypeScript-007ACC?logo=typescript&logoColor=white)\\n`;\r\n    }\r\n    \r\n    if (analysis.hasReact) {\r\n      badges += `![React](https://img.shields.io/badge/React-20232A?logo=react&logoColor=61DAFB)\\n`;\r\n    }\r\n    \r\n    if (analysis.packageJson?.license) {\r\n      badges += `![License](https://img.shields.io/badge/license-${analysis.packageJson.license}-green.svg)\\n`;\r\n    }\r\n\r\n    return badges ? badges + '\\n' : '';\r\n  }\r\n\r\n  private getScriptDescription(script: string): string {\r\n    const descriptions: Record<string, string> = {\r\n      'dev': 'Start development server',\r\n      'build': 'Build for production',\r\n      'start': 'Start production server',\r\n      'test': 'Run test suite',\r\n      'lint': 'Run linter',\r\n      'typecheck': 'Run TypeScript type checking',\r\n      'format': 'Format code with prettier'\r\n    };\r\n    return descriptions[script] || `Run ${script} script`;\r\n  }\r\n}","import * as ops from 'fs-extra';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { existsSync } from 'fs';\r\n\r\nexport interface CommentsConfig {\r\n  filePath: string;\r\n  commentType: 'functions' | 'classes' | 'all';\r\n  style: 'jsdoc' | 'inline' | 'auto';\r\n}\r\n\r\nexport interface CodeAnalysis {\r\n  language: string;\r\n  functions: FunctionInfo[];\r\n  classes: ClassInfo[];\r\n  interfaces: InterfaceInfo[];\r\n  hasExistingComments: boolean;\r\n}\r\n\r\nexport interface FunctionInfo {\r\n  name: string;\r\n  line: number;\r\n  parameters: string[];\r\n  returnType?: string;\r\n  isAsync: boolean;\r\n  isExported: boolean;\r\n}\r\n\r\nexport interface ClassInfo {\r\n  name: string;\r\n  line: number;\r\n  methods: FunctionInfo[];\r\n  properties: PropertyInfo[];\r\n  isExported: boolean;\r\n}\r\n\r\nexport interface InterfaceInfo {\r\n  name: string;\r\n  line: number;\r\n  properties: PropertyInfo[];\r\n}\r\n\r\nexport interface PropertyInfo {\r\n  name: string;\r\n  type?: string;\r\n  optional: boolean;\r\n}\r\n\r\nexport class CommentsGenerator {\r\n  private config: CommentsConfig;\r\n\r\n  constructor(config: CommentsConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  async generateComments(): Promise<{ success: boolean; message: string; modifiedContent?: string }> {\r\n    try {\r\n      if (!existsSync(this.config.filePath)) {\r\n        return {\r\n          success: false,\r\n          message: 'File not found'\r\n        };\r\n      }\r\n\r\n      const content = await ops.promises.readFile(this.config.filePath, 'utf-8');\r\n      const analysis = this.analyzeCode(content);\r\n      \r\n      if (analysis.hasExistingComments) {\r\n        return {\r\n          success: false,\r\n          message: 'File already has extensive comments. Use --force to override.'\r\n        };\r\n      }\r\n\r\n      const modifiedContent = this.addComments(content, analysis);\r\n      \r\n      // Create backup\r\n      const backupPath = this.config.filePath + '.backup';\r\n      await ops.promises.writeFile(backupPath, content);\r\n      \r\n      // Write modified content\r\n      await ops.promises.writeFile(this.config.filePath, modifiedContent);\r\n\r\n      const commentCount = this.countAddedComments(analysis);\r\n      \r\n      return {\r\n        success: true,\r\n        message: `✅ Added ${commentCount} comments to ${path.basename(this.config.filePath)}\\n📁 Backup created: ${path.basename(backupPath)}`,\r\n        modifiedContent\r\n      };\r\n\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        message: `Failed to add comments: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  private analyzeCode(content: string): CodeAnalysis {\r\n    const lines = content.split('\\n');\r\n    const language = this.detectLanguage();\r\n    \r\n    const analysis: CodeAnalysis = {\r\n      language,\r\n      functions: [],\r\n      classes: [],\r\n      interfaces: [],\r\n      hasExistingComments: this.hasExtensiveComments(content)\r\n    };\r\n\r\n    // Simple regex-based parsing (could be enhanced with AST)\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i].trim();\r\n      \r\n      // Detect functions\r\n      const funcMatch = line.match(/(?:export\\s+)?(?:async\\s+)?function\\s+(\\w+)\\s*\\(([^)]*)\\)/);\r\n      if (funcMatch) {\r\n        const [, name, params] = funcMatch;\r\n        analysis.functions.push({\r\n          name,\r\n          line: i + 1,\r\n          parameters: params.split(',').map(p => p.trim()).filter(Boolean),\r\n          isAsync: line.includes('async'),\r\n          isExported: line.includes('export')\r\n        });\r\n      }\r\n\r\n      // Detect arrow functions\r\n      const arrowMatch = line.match(/(?:export\\s+)?(?:const|let|var)\\s+(\\w+)\\s*=\\s*(?:async\\s+)?\\([^)]*\\)\\s*=>/);\r\n      if (arrowMatch) {\r\n        const [, name] = arrowMatch;\r\n        analysis.functions.push({\r\n          name,\r\n          line: i + 1,\r\n          parameters: [],\r\n          isAsync: line.includes('async'),\r\n          isExported: line.includes('export')\r\n        });\r\n      }\r\n\r\n      // Detect classes\r\n      const classMatch = line.match(/(?:export\\s+)?class\\s+(\\w+)/);\r\n      if (classMatch) {\r\n        const [, name] = classMatch;\r\n        analysis.classes.push({\r\n          name,\r\n          line: i + 1,\r\n          methods: [],\r\n          properties: [],\r\n          isExported: line.includes('export')\r\n        });\r\n      }\r\n\r\n      // Detect interfaces (TypeScript)\r\n      const interfaceMatch = line.match(/(?:export\\s+)?interface\\s+(\\w+)/);\r\n      if (interfaceMatch) {\r\n        const [, name] = interfaceMatch;\r\n        analysis.interfaces.push({\r\n          name,\r\n          line: i + 1,\r\n          properties: []\r\n        });\r\n      }\r\n    }\r\n\r\n    return analysis;\r\n  }\r\n\r\n  private detectLanguage(): string {\r\n    const ext = path.extname(this.config.filePath);\r\n    switch (ext) {\r\n      case '.ts': case '.tsx': return 'typescript';\r\n      case '.js': case '.jsx': return 'javascript';\r\n      case '.py': return 'python';\r\n      case '.java': return 'java';\r\n      case '.cpp': case '.cc': case '.cxx': return 'cpp';\r\n      default: return 'unknown';\r\n    }\r\n  }\r\n\r\n  private hasExtensiveComments(content: string): boolean {\r\n    const lines = content.split('\\n');\r\n    const commentLines = lines.filter(line => {\r\n      const trimmed = line.trim();\r\n      return trimmed.startsWith('//') || \r\n             trimmed.startsWith('/*') || \r\n             trimmed.startsWith('*') ||\r\n             trimmed.startsWith('#') ||\r\n             trimmed.includes('/**');\r\n    });\r\n    \r\n    // Consider \"extensive\" if more than 20% of lines are comments\r\n    return commentLines.length / lines.length > 0.2;\r\n  }\r\n\r\n  private addComments(content: string, analysis: CodeAnalysis): string {\r\n    const lines = content.split('\\n');\r\n    let modifiedLines = [...lines];\r\n    let insertOffset = 0;\r\n\r\n    // Add comments to functions\r\n    if (this.config.commentType === 'functions' || this.config.commentType === 'all') {\r\n      for (const func of analysis.functions) {\r\n        const commentLines = this.generateFunctionComment(func, analysis.language);\r\n        const insertIndex = func.line - 1 + insertOffset;\r\n        \r\n        // Insert comment lines before function\r\n        modifiedLines.splice(insertIndex, 0, ...commentLines);\r\n        insertOffset += commentLines.length;\r\n      }\r\n    }\r\n\r\n    // Add comments to classes\r\n    if (this.config.commentType === 'classes' || this.config.commentType === 'all') {\r\n      for (const cls of analysis.classes) {\r\n        const commentLines = this.generateClassComment(cls, analysis.language);\r\n        const insertIndex = cls.line - 1 + insertOffset;\r\n        \r\n        modifiedLines.splice(insertIndex, 0, ...commentLines);\r\n        insertOffset += commentLines.length;\r\n      }\r\n    }\r\n\r\n    return modifiedLines.join('\\n');\r\n  }\r\n\r\n  private generateFunctionComment(func: FunctionInfo, language: string): string[] {\r\n    const indent = this.getIndentation(func.line);\r\n    \r\n    if (language === 'typescript' || language === 'javascript') {\r\n      const lines = [\r\n        `${indent}/**`,\r\n        `${indent} * ${this.generateFunctionDescription(func)}`,\r\n      ];\r\n\r\n      if (func.parameters.length > 0) {\r\n        lines.push(`${indent} *`);\r\n        func.parameters.forEach(param => {\r\n          const cleanParam = param.split(':')[0].split('=')[0].trim();\r\n          lines.push(`${indent} * @param {any} ${cleanParam} - Parameter description`);\r\n        });\r\n      }\r\n\r\n      lines.push(`${indent} * @returns {${func.isAsync ? 'Promise<any>' : 'any'}} Return description`);\r\n      lines.push(`${indent} */`);\r\n      \r\n      return lines;\r\n    }\r\n\r\n    return [`${indent}// ${this.generateFunctionDescription(func)}`];\r\n  }\r\n\r\n  private generateClassComment(cls: ClassInfo, language: string): string[] {\r\n    const indent = this.getIndentation(cls.line);\r\n    \r\n    if (language === 'typescript' || language === 'javascript') {\r\n      return [\r\n        `${indent}/**`,\r\n        `${indent} * ${cls.name} class`,\r\n        `${indent} * `,\r\n        `${indent} * @class ${cls.name}`,\r\n        `${indent} */`\r\n      ];\r\n    }\r\n\r\n    return [`${indent}// ${cls.name} class`];\r\n  }\r\n\r\n  private generateFunctionDescription(func: FunctionInfo): string {\r\n    if (func.name === 'constructor') {\r\n      return 'Creates an instance of the class';\r\n    }\r\n    \r\n    // Generate smart descriptions based on function name\r\n    const name = func.name.toLowerCase();\r\n    \r\n    if (name.startsWith('get')) {\r\n      return `Gets ${name.substring(3).replace(/([A-Z])/g, ' $1').toLowerCase()}`;\r\n    }\r\n    if (name.startsWith('set')) {\r\n      return `Sets ${name.substring(3).replace(/([A-Z])/g, ' $1').toLowerCase()}`;\r\n    }\r\n    if (name.startsWith('create')) {\r\n      return `Creates a new ${name.substring(6).replace(/([A-Z])/g, ' $1').toLowerCase()}`;\r\n    }\r\n    if (name.startsWith('delete') || name.startsWith('remove')) {\r\n      const target = name.startsWith('delete') ? name.substring(6) : name.substring(6);\r\n      return `Deletes ${target.replace(/([A-Z])/g, ' $1').toLowerCase()}`;\r\n    }\r\n    if (name.startsWith('update')) {\r\n      return `Updates ${name.substring(6).replace(/([A-Z])/g, ' $1').toLowerCase()}`;\r\n    }\r\n    if (name.startsWith('is') || name.startsWith('has')) {\r\n      return `Checks if ${name.substring(2).replace(/([A-Z])/g, ' $1').toLowerCase()}`;\r\n    }\r\n    if (name.includes('handle')) {\r\n      return `Handles ${name.replace('handle', '').replace(/([A-Z])/g, ' $1').toLowerCase()}`;\r\n    }\r\n    \r\n    return `${func.name} function`;\r\n  }\r\n\r\n  private getIndentation(lineNumber: number): string {\r\n    // This would need access to the original line to detect indentation\r\n    // For now, return empty string - could be enhanced\r\n    return '';\r\n  }\r\n\r\n  private countAddedComments(analysis: CodeAnalysis): number {\r\n    let count = 0;\r\n    \r\n    if (this.config.commentType === 'functions' || this.config.commentType === 'all') {\r\n      count += analysis.functions.length;\r\n    }\r\n    \r\n    if (this.config.commentType === 'classes' || this.config.commentType === 'all') {\r\n      count += analysis.classes.length;\r\n    }\r\n    \r\n    return count;\r\n  }\r\n}","import * as ops from 'fs-extra';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { existsSync } from 'fs';\r\n\r\nexport interface ApiDocsConfig {\r\n  rootPath: string;\r\n  outputFormat: 'md' | 'html';\r\n  includePrivate: boolean;\r\n  scanPaths: string[];\r\n}\r\n\r\nexport interface ApiDocumentation {\r\n  modules: ModuleInfo[];\r\n  functions: FunctionInfo[];\r\n  classes: ClassInfo[];\r\n  interfaces: InterfaceInfo[];\r\n  types: TypeInfo[];\r\n}\r\n\r\nexport interface ModuleInfo {\r\n  name: string;\r\n  path: string;\r\n  description?: string;\r\n  exports: string[];\r\n}\r\n\r\nexport interface FunctionInfo {\r\n  name: string;\r\n  module: string;\r\n  signature: string;\r\n  parameters: ParameterInfo[];\r\n  returnType: string;\r\n  description?: string;\r\n  examples?: string[];\r\n  isAsync: boolean;\r\n  isExported: boolean;\r\n}\r\n\r\nexport interface ClassInfo {\r\n  name: string;\r\n  module: string;\r\n  description?: string;\r\n  constructor?: FunctionInfo;\r\n  methods: FunctionInfo[];\r\n  properties: PropertyInfo[];\r\n  extends?: string;\r\n  implements?: string[];\r\n  isExported: boolean;\r\n}\r\n\r\nexport interface InterfaceInfo {\r\n  name: string;\r\n  module: string;\r\n  description?: string;\r\n  properties: PropertyInfo[];\r\n  extends?: string[];\r\n  isExported: boolean;\r\n}\r\n\r\nexport interface TypeInfo {\r\n  name: string;\r\n  module: string;\r\n  definition: string;\r\n  description?: string;\r\n  isExported: boolean;\r\n}\r\n\r\nexport interface ParameterInfo {\r\n  name: string;\r\n  type: string;\r\n  optional: boolean;\r\n  defaultValue?: string;\r\n  description?: string;\r\n}\r\n\r\nexport interface PropertyInfo {\r\n  name: string;\r\n  type: string;\r\n  optional: boolean;\r\n  readonly: boolean;\r\n  description?: string;\r\n}\r\n\r\nexport class ApiDocsGenerator {\r\n  private config: ApiDocsConfig;\r\n\r\n  constructor(config: ApiDocsConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  async generateApiDocs(): Promise<{ success: boolean; message: string; outputPath?: string }> {\r\n    try {\r\n      // Scan for API files\r\n      const documentation = await this.scanApiFiles();\r\n      \r\n      if (documentation.functions.length === 0 && documentation.classes.length === 0) {\r\n        return {\r\n          success: false,\r\n          message: 'No API documentation found. Make sure you have TypeScript/JavaScript files with exported functions or classes.'\r\n        };\r\n      }\r\n\r\n      // Generate documentation content\r\n      const content = this.config.outputFormat === 'md' \r\n        ? this.generateMarkdown(documentation)\r\n        : this.generateHtml(documentation);\r\n\r\n      // Write documentation file\r\n      const outputFileName = `api-docs.${this.config.outputFormat}`;\r\n      const outputPath = path.join(this.config.rootPath, outputFileName);\r\n      await ops.promises.writeFile(outputPath, content);\r\n\r\n      const stats = this.getDocumentationStats(documentation);\r\n\r\n      return {\r\n        success: true,\r\n        message: `✅ Generated API documentation: ${outputFileName}\\n\\n📊 **Documentation Stats:**\\n${stats}`,\r\n        outputPath\r\n      };\r\n\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        message: `Failed to generate API docs: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  private async scanApiFiles(): Promise<ApiDocumentation> {\r\n    const documentation: ApiDocumentation = {\r\n      modules: [],\r\n      functions: [],\r\n      classes: [],\r\n      interfaces: [],\r\n      types: []\r\n    };\r\n\r\n    // Default scan paths if not specified\r\n    const scanPaths = this.config.scanPaths.length > 0 \r\n      ? this.config.scanPaths \r\n      : ['src/', 'lib/', './'];\r\n\r\n    for (const scanPath of scanPaths) {\r\n      const fullPath = path.join(this.config.rootPath, scanPath);\r\n      if (existsSync(fullPath)) {\r\n        await this.scanDirectory(fullPath, documentation);\r\n      }\r\n    }\r\n\r\n    return documentation;\r\n  }\r\n\r\n  private async scanDirectory(dirPath: string, documentation: ApiDocumentation): Promise<void> {\r\n    try {\r\n      const entries = await ops.promises.readdir(dirPath, { withFileTypes: true });\r\n\r\n      for (const entry of entries) {\r\n        const fullPath = path.join(dirPath, entry.name);\r\n\r\n        if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {\r\n          await this.scanDirectory(fullPath, documentation);\r\n        } else if (entry.isFile() && this.isApiFile(entry.name)) {\r\n          await this.parseApiFile(fullPath, documentation);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Skip directories we can't read\r\n    }\r\n  }\r\n\r\n  private isApiFile(fileName: string): boolean {\r\n    const apiExtensions = ['.ts', '.js', '.tsx', '.jsx'];\r\n    const ext = path.extname(fileName);\r\n    return apiExtensions.includes(ext) && \r\n           !fileName.includes('.test.') && \r\n           !fileName.includes('.spec.') &&\r\n           !fileName.includes('.d.ts');\r\n  }\r\n\r\n  private async parseApiFile(filePath: string, documentation: ApiDocumentation): Promise<void> {\r\n    try {\r\n      const content = await ops.promises.readFile(filePath, 'utf-8');\r\n      const relativePath = path.relative(this.config.rootPath, filePath);\r\n      const moduleName = this.getModuleName(relativePath);\r\n\r\n      // Simple regex-based parsing (could be enhanced with TypeScript compiler API)\r\n      const lines = content.split('\\n');\r\n      const moduleInfo: ModuleInfo = {\r\n        name: moduleName,\r\n        path: relativePath,\r\n        exports: []\r\n      };\r\n\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const line = lines[i].trim();\r\n\r\n        // Parse exported functions\r\n        const funcMatch = line.match(/export\\s+(?:async\\s+)?function\\s+(\\w+)\\s*\\(([^)]*)\\)(?:\\s*:\\s*([^{]+))?/);\r\n        if (funcMatch) {\r\n          const [, name, params, returnType] = funcMatch;\r\n          const functionInfo: FunctionInfo = {\r\n            name,\r\n            module: moduleName,\r\n            signature: line,\r\n            parameters: this.parseParameters(params),\r\n            returnType: returnType?.trim() || 'any',\r\n            isAsync: line.includes('async'),\r\n            isExported: true,\r\n            description: this.extractPrecedingComment(lines, i)\r\n          };\r\n          documentation.functions.push(functionInfo);\r\n          moduleInfo.exports.push(name);\r\n        }\r\n\r\n        // Parse exported classes\r\n        const classMatch = line.match(/export\\s+class\\s+(\\w+)(?:\\s+extends\\s+(\\w+))?(?:\\s+implements\\s+([^{]+))?/);\r\n        if (classMatch) {\r\n          const [, name, extendsClass, implementsInterfaces] = classMatch;\r\n          const classInfo: ClassInfo = {\r\n            name,\r\n            module: moduleName,\r\n            description: this.extractPrecedingComment(lines, i),\r\n            methods: [],\r\n            properties: [],\r\n            extends: extendsClass,\r\n            implements: implementsInterfaces?.split(',').map(s => s.trim()),\r\n            isExported: true,\r\n            constructor: undefined\r\n          };\r\n          documentation.classes.push(classInfo);\r\n          moduleInfo.exports.push(name);\r\n        }\r\n\r\n        // Parse interfaces\r\n        const interfaceMatch = line.match(/export\\s+interface\\s+(\\w+)(?:\\s+extends\\s+([^{]+))?/);\r\n        if (interfaceMatch) {\r\n          const [, name, extendsInterfaces] = interfaceMatch;\r\n          const interfaceInfo: InterfaceInfo = {\r\n            name,\r\n            module: moduleName,\r\n            description: this.extractPrecedingComment(lines, i),\r\n            properties: [],\r\n            extends: extendsInterfaces?.split(',').map(s => s.trim()),\r\n            isExported: true\r\n          };\r\n          documentation.interfaces.push(interfaceInfo);\r\n          moduleInfo.exports.push(name);\r\n        }\r\n\r\n        // Parse type aliases\r\n        const typeMatch = line.match(/export\\s+type\\s+(\\w+)\\s*=\\s*([^;]+)/);\r\n        if (typeMatch) {\r\n          const [, name, definition] = typeMatch;\r\n          const typeInfo: TypeInfo = {\r\n            name,\r\n            module: moduleName,\r\n            definition: definition.trim(),\r\n            description: this.extractPrecedingComment(lines, i),\r\n            isExported: true\r\n          };\r\n          documentation.types.push(typeInfo);\r\n          moduleInfo.exports.push(name);\r\n        }\r\n      }\r\n\r\n      if (moduleInfo.exports.length > 0) {\r\n        documentation.modules.push(moduleInfo);\r\n      }\r\n\r\n    } catch (error) {\r\n      // Skip files we can't parse\r\n    }\r\n  }\r\n\r\n  private getModuleName(relativePath: string): string {\r\n    const withoutExt = relativePath.replace(/\\.[^/.]+$/, '');\r\n    return withoutExt.replace(/[/\\\\]/g, '.');\r\n  }\r\n\r\n  private parseParameters(paramsString: string): ParameterInfo[] {\r\n    if (!paramsString.trim()) return [];\r\n\r\n    return paramsString.split(',').map(param => {\r\n      const trimmed = param.trim();\r\n      const parts = trimmed.split(':');\r\n      const name = parts[0]?.trim() || '';\r\n      const type = parts[1]?.trim() || 'any';\r\n      \r\n      return {\r\n        name: name.replace(/[?=].*$/, ''), // Remove optional/default markers\r\n        type,\r\n        optional: name.includes('?') || name.includes('='),\r\n        defaultValue: name.includes('=') ? name.split('=')[1]?.trim() : undefined\r\n      };\r\n    });\r\n  }\r\n\r\n  private extractPrecedingComment(lines: string[], lineIndex: number): string | undefined {\r\n    // Look for JSDoc or single-line comments before the declaration\r\n    let i = lineIndex - 1;\r\n    const commentLines: string[] = [];\r\n\r\n    while (i >= 0) {\r\n      const line = lines[i].trim();\r\n      if (line.startsWith('/**') || line.startsWith('/*')) {\r\n        // JSDoc comment\r\n        const jsdocLines = [];\r\n        while (i >= 0 && !lines[i].includes('*/')) {\r\n          jsdocLines.unshift(lines[i].trim());\r\n          i--;\r\n        }\r\n        if (i >= 0) jsdocLines.unshift(lines[i].trim());\r\n        return jsdocLines.join('\\n').replace(/\\/\\*\\*?|\\*\\/|\\s*\\*\\s?/g, '').trim();\r\n      } else if (line.startsWith('//')) {\r\n        commentLines.unshift(line.replace(/^\\s*\\/\\/\\s?/, ''));\r\n        i--;\r\n      } else if (line === '') {\r\n        i--;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return commentLines.length > 0 ? commentLines.join(' ') : undefined;\r\n  }\r\n\r\n  private generateMarkdown(documentation: ApiDocumentation): string {\r\n    let content = `# API Documentation\\n\\n`;\r\n    content += `Generated on: ${new Date().toISOString().split('T')[0]}\\n\\n`;\r\n\r\n    // Table of Contents\r\n    content += `## 📋 Table of Contents\\n\\n`;\r\n    if (documentation.modules.length > 0) content += `- [Modules](#modules)\\n`;\r\n    if (documentation.functions.length > 0) content += `- [Functions](#functions)\\n`;\r\n    if (documentation.classes.length > 0) content += `- [Classes](#classes)\\n`;\r\n    if (documentation.interfaces.length > 0) content += `- [Interfaces](#interfaces)\\n`;\r\n    if (documentation.types.length > 0) content += `- [Types](#types)\\n`;\r\n    content += '\\n';\r\n\r\n    // Modules\r\n    if (documentation.modules.length > 0) {\r\n      content += `## 📦 Modules\\n\\n`;\r\n      documentation.modules.forEach(module => {\r\n        content += `### ${module.name}\\n\\n`;\r\n        content += `**Path:** \\`${module.path}\\`\\n\\n`;\r\n        if (module.description) content += `${module.description}\\n\\n`;\r\n        content += `**Exports:** ${module.exports.join(', ')}\\n\\n`;\r\n      });\r\n    }\r\n\r\n    // Functions\r\n    if (documentation.functions.length > 0) {\r\n      content += `## 🔧 Functions\\n\\n`;\r\n      documentation.functions.forEach(func => {\r\n        content += `### ${func.name}\\n\\n`;\r\n        if (func.description) content += `${func.description}\\n\\n`;\r\n        content += `**Module:** \\`${func.module}\\`\\n\\n`;\r\n        content += `**Signature:**\\n\\`\\`\\`typescript\\n${func.signature}\\n\\`\\`\\`\\n\\n`;\r\n        \r\n        if (func.parameters.length > 0) {\r\n          content += `**Parameters:**\\n`;\r\n          func.parameters.forEach(param => {\r\n            const optional = param.optional ? ' (optional)' : '';\r\n            const defaultVal = param.defaultValue ? ` = ${param.defaultValue}` : '';\r\n            content += `- \\`${param.name}\\`: \\`${param.type}\\`${optional}${defaultVal}\\n`;\r\n            if (param.description) content += `  - ${param.description}\\n`;\r\n          });\r\n          content += '\\n';\r\n        }\r\n        \r\n        content += `**Returns:** \\`${func.returnType}\\`\\n\\n`;\r\n        if (func.isAsync) content += `⚡ **Async function**\\n\\n`;\r\n      });\r\n    }\r\n\r\n    // Classes\r\n    if (documentation.classes.length > 0) {\r\n      content += `## 🏗️ Classes\\n\\n`;\r\n      documentation.classes.forEach(cls => {\r\n        content += `### ${cls.name}\\n\\n`;\r\n        if (cls.description) content += `${cls.description}\\n\\n`;\r\n        content += `**Module:** \\`${cls.module}\\`\\n\\n`;\r\n        if (cls.extends) content += `**Extends:** \\`${cls.extends}\\`\\n\\n`;\r\n        if (cls.implements && cls.implements.length > 0) {\r\n          content += `**Implements:** ${cls.implements.map(i => `\\`${i}\\``).join(', ')}\\n\\n`;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Interfaces\r\n    if (documentation.interfaces.length > 0) {\r\n      content += `## 📋 Interfaces\\n\\n`;\r\n      documentation.interfaces.forEach(iface => {\r\n        content += `### ${iface.name}\\n\\n`;\r\n        if (iface.description) content += `${iface.description}\\n\\n`;\r\n        content += `**Module:** \\`${iface.module}\\`\\n\\n`;\r\n        if (iface.extends && iface.extends.length > 0) {\r\n          content += `**Extends:** ${iface.extends.map(e => `\\`${e}\\``).join(', ')}\\n\\n`;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Types\r\n    if (documentation.types.length > 0) {\r\n      content += `## 🎯 Types\\n\\n`;\r\n      documentation.types.forEach(type => {\r\n        content += `### ${type.name}\\n\\n`;\r\n        if (type.description) content += `${type.description}\\n\\n`;\r\n        content += `**Module:** \\`${type.module}\\`\\n\\n`;\r\n        content += `**Definition:**\\n\\`\\`\\`typescript\\ntype ${type.name} = ${type.definition}\\n\\`\\`\\`\\n\\n`;\r\n      });\r\n    }\r\n\r\n    content += `---\\n*Generated by Grok CLI Documentation System*`;\r\n    return content;\r\n  }\r\n\r\n  private generateHtml(documentation: ApiDocumentation): string {\r\n    // Basic HTML template - could be enhanced with CSS\r\n    return `<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>API Documentation</title>\r\n    <style>\r\n        body { font-family: Arial, sans-serif; margin: 40px; }\r\n        h1, h2, h3 { color: #333; }\r\n        code { background: #f4f4f4; padding: 2px 4px; border-radius: 3px; }\r\n        pre { background: #f4f4f4; padding: 15px; border-radius: 5px; overflow-x: auto; }\r\n    </style>\r\n</head>\r\n<body>\r\n    <h1>API Documentation</h1>\r\n    <p>Generated on: ${new Date().toISOString().split('T')[0]}</p>\r\n    ${this.generateMarkdown(documentation).replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, '<pre><code>$2</code></pre>')}\r\n</body>\r\n</html>`;\r\n  }\r\n\r\n  private getDocumentationStats(documentation: ApiDocumentation): string {\r\n    return `- **Modules:** ${documentation.modules.length}\r\n- **Functions:** ${documentation.functions.length}\r\n- **Classes:** ${documentation.classes.length}\r\n- **Interfaces:** ${documentation.interfaces.length}\r\n- **Types:** ${documentation.types.length}`;\r\n  }\r\n}","import * as ops from 'fs-extra';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { existsSync } from 'fs';\r\n\r\nexport interface ChangelogConfig {\r\n  rootPath: string;\r\n  sinceVersion?: string;\r\n  commitCount?: number;\r\n  format: 'conventional' | 'simple';\r\n  includeBreaking: boolean;\r\n}\r\n\r\nexport interface CommitInfo {\r\n  hash: string;\r\n  date: string;\r\n  author: string;\r\n  message: string;\r\n  type?: string;\r\n  scope?: string;\r\n  breaking: boolean;\r\n  body?: string;\r\n}\r\n\r\nexport interface ChangelogSection {\r\n  title: string;\r\n  commits: CommitInfo[];\r\n}\r\n\r\nexport class ChangelogGenerator {\r\n  private config: ChangelogConfig;\r\n\r\n  constructor(config: ChangelogConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  async generateChangelog(): Promise<{ success: boolean; message: string; content?: string }> {\r\n    try {\r\n      // Check if we're in a git repository\r\n      const gitPath = path.join(this.config.rootPath, '.git');\r\n      if (!existsSync(gitPath)) {\r\n        return {\r\n          success: false,\r\n          message: 'Not a git repository. Changelog generation requires git history.'\r\n        };\r\n      }\r\n\r\n      // Get git commits\r\n      const commits = await this.getGitCommits();\r\n      \r\n      if (commits.length === 0) {\r\n        return {\r\n          success: false,\r\n          message: 'No git commits found.'\r\n        };\r\n      }\r\n\r\n      // Parse commits and organize by type\r\n      const sections = this.organizeCommits(commits);\r\n      \r\n      // Generate changelog content\r\n      const content = this.generateChangelogContent(sections);\r\n      \r\n      // Write to CHANGELOG.md\r\n      const changelogPath = path.join(this.config.rootPath, 'CHANGELOG.md');\r\n      const exists = existsSync(changelogPath);\r\n      \r\n      if (exists) {\r\n        // Prepend to existing changelog\r\n        const existingContent = await ops.promises.readFile(changelogPath, 'utf-8');\r\n        const newContent = content + '\\n\\n' + existingContent;\r\n        await ops.promises.writeFile(changelogPath, newContent);\r\n      } else {\r\n        // Create new changelog\r\n        const fullContent = this.generateChangelogHeader() + content;\r\n        await ops.promises.writeFile(changelogPath, fullContent);\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        message: exists \r\n          ? `✅ Updated CHANGELOG.md with ${commits.length} new entries`\r\n          : `✅ Created CHANGELOG.md with ${commits.length} entries`,\r\n        content\r\n      };\r\n\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        message: `Failed to generate changelog: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  private async getGitCommits(): Promise<CommitInfo[]> {\r\n    const { execSync } = require('child_process');\r\n    \r\n    try {\r\n      let gitCommand = 'git log --pretty=format:\"%H|%ad|%an|%s|%b\" --date=short';\r\n      \r\n      if (this.config.sinceVersion) {\r\n        gitCommand += ` ${this.config.sinceVersion}..HEAD`;\r\n      } else if (this.config.commitCount) {\r\n        gitCommand += ` -n ${this.config.commitCount}`;\r\n      } else {\r\n        gitCommand += ' -n 50'; // Default to last 50 commits\r\n      }\r\n\r\n      const output = execSync(gitCommand, { \r\n        cwd: this.config.rootPath,\r\n        encoding: 'utf-8'\r\n      });\r\n\r\n      const lines = output.trim().split('\\n').filter((line: string) => line.trim());\r\n      \r\n      return lines.map((line: string) => {\r\n        const [hash, date, author, message, ...bodyParts] = line.split('|');\r\n        const body = bodyParts.join('|').trim();\r\n        \r\n        return this.parseCommit({\r\n          hash: hash.substring(0, 7), // Short hash\r\n          date,\r\n          author,\r\n          message,\r\n          body: body || undefined,\r\n          breaking: false,\r\n          type: undefined,\r\n          scope: undefined\r\n        });\r\n      });\r\n    } catch (error) {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private parseCommit(commit: CommitInfo): CommitInfo {\r\n    if (this.config.format !== 'conventional') {\r\n      return commit;\r\n    }\r\n\r\n    // Parse conventional commit format: type(scope): description\r\n    const conventionalMatch = commit.message.match(/^(\\w+)(?:\\(([^)]+)\\))?: (.+)/);\r\n    \r\n    if (conventionalMatch) {\r\n      const [, type, scope, description] = conventionalMatch;\r\n      commit.type = type;\r\n      commit.scope = scope;\r\n      commit.message = description;\r\n    }\r\n\r\n    // Check for breaking changes\r\n    commit.breaking = commit.message.includes('BREAKING CHANGE') || \r\n                     commit.message.includes('!:') ||\r\n                     Boolean(commit.body && commit.body.includes('BREAKING CHANGE'));\r\n\r\n    return commit;\r\n  }\r\n\r\n  private organizeCommits(commits: CommitInfo[]): ChangelogSection[] {\r\n    if (this.config.format === 'conventional') {\r\n      return this.organizeConventionalCommits(commits);\r\n    } else {\r\n      return this.organizeSimpleCommits(commits);\r\n    }\r\n  }\r\n\r\n  private organizeConventionalCommits(commits: CommitInfo[]): ChangelogSection[] {\r\n    const sections: ChangelogSection[] = [];\r\n    \r\n    // Breaking changes (always first)\r\n    const breaking = commits.filter(c => c.breaking);\r\n    if (breaking.length > 0) {\r\n      sections.push({\r\n        title: '⚠️ BREAKING CHANGES',\r\n        commits: breaking\r\n      });\r\n    }\r\n\r\n    // Features\r\n    const features = commits.filter(c => c.type === 'feat' && !c.breaking);\r\n    if (features.length > 0) {\r\n      sections.push({\r\n        title: '✨ Features',\r\n        commits: features\r\n      });\r\n    }\r\n\r\n    // Bug fixes\r\n    const fixes = commits.filter(c => c.type === 'fix' && !c.breaking);\r\n    if (fixes.length > 0) {\r\n      sections.push({\r\n        title: '🐛 Bug Fixes',\r\n        commits: fixes\r\n      });\r\n    }\r\n\r\n    // Documentation\r\n    const docs = commits.filter(c => c.type === 'docs');\r\n    if (docs.length > 0) {\r\n      sections.push({\r\n        title: '📚 Documentation',\r\n        commits: docs\r\n      });\r\n    }\r\n\r\n    // Performance improvements\r\n    const perf = commits.filter(c => c.type === 'perf');\r\n    if (perf.length > 0) {\r\n      sections.push({\r\n        title: '⚡ Performance',\r\n        commits: perf\r\n      });\r\n    }\r\n\r\n    // Refactoring\r\n    const refactor = commits.filter(c => c.type === 'refactor');\r\n    if (refactor.length > 0) {\r\n      sections.push({\r\n        title: '♻️ Code Refactoring',\r\n        commits: refactor\r\n      });\r\n    }\r\n\r\n    // Tests\r\n    const tests = commits.filter(c => c.type === 'test');\r\n    if (tests.length > 0) {\r\n      sections.push({\r\n        title: '✅ Tests',\r\n        commits: tests\r\n      });\r\n    }\r\n\r\n    // Build/CI\r\n    const build = commits.filter(c => ['build', 'ci', 'chore'].includes(c.type || ''));\r\n    if (build.length > 0) {\r\n      sections.push({\r\n        title: '🔧 Build & CI',\r\n        commits: build\r\n      });\r\n    }\r\n\r\n    // Other changes\r\n    const other = commits.filter(c => \r\n      !c.breaking && \r\n      !['feat', 'fix', 'docs', 'perf', 'refactor', 'test', 'build', 'ci', 'chore'].includes(c.type || '')\r\n    );\r\n    if (other.length > 0) {\r\n      sections.push({\r\n        title: '📝 Other Changes',\r\n        commits: other\r\n      });\r\n    }\r\n\r\n    return sections;\r\n  }\r\n\r\n  private organizeSimpleCommits(commits: CommitInfo[]): ChangelogSection[] {\r\n    return [{\r\n      title: '📝 Changes',\r\n      commits\r\n    }];\r\n  }\r\n\r\n  private generateChangelogHeader(): string {\r\n    return `# Changelog\r\n\r\nAll notable changes to this project will be documented in this file.\r\n\r\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\r\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\r\n\r\n`;\r\n  }\r\n\r\n  private generateChangelogContent(sections: ChangelogSection[]): string {\r\n    const version = this.generateVersionNumber();\r\n    const date = new Date().toISOString().split('T')[0];\r\n    \r\n    let content = `## [${version}] - ${date}\\n\\n`;\r\n\r\n    sections.forEach(section => {\r\n      if (section.commits.length > 0) {\r\n        content += `### ${section.title}\\n\\n`;\r\n        \r\n        section.commits.forEach(commit => {\r\n          const scope = commit.scope ? `**${commit.scope}**: ` : '';\r\n          const hash = `([${commit.hash}])`;\r\n          \r\n          if (this.config.format === 'conventional') {\r\n            content += `- ${scope}${commit.message} ${hash}\\n`;\r\n          } else {\r\n            content += `- ${commit.message} - ${commit.author} ${hash}\\n`;\r\n          }\r\n          \r\n          // Add breaking change details\r\n          if (commit.breaking && commit.body) {\r\n            const breakingDetails = this.extractBreakingChangeDetails(commit.body);\r\n            if (breakingDetails) {\r\n              content += `  - ⚠️ ${breakingDetails}\\n`;\r\n            }\r\n          }\r\n        });\r\n        \r\n        content += '\\n';\r\n      }\r\n    });\r\n\r\n    return content;\r\n  }\r\n\r\n  private generateVersionNumber(): string {\r\n    // Simple version generation - could be enhanced to read from package.json\r\n    // and increment based on commit types\r\n    const now = new Date();\r\n    return `${now.getFullYear()}.${now.getMonth() + 1}.${now.getDate()}`;\r\n  }\r\n\r\n  private extractBreakingChangeDetails(body: string): string | null {\r\n    const match = body.match(/BREAKING CHANGE:\\s*(.+)/);\r\n    return match ? match[1].trim() : null;\r\n  }\r\n}","import * as ops from 'fs-extra';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { existsSync } from 'fs';\r\n\r\nexport interface UpdateConfig {\r\n  rootPath: string;\r\n  updateTarget: 'all' | 'system' | 'tasks' | 'sop';\r\n  autoCommit: boolean;\r\n}\r\n\r\nexport interface ChangeAnalysis {\r\n  filesChanged: string[];\r\n  newFiles: string[];\r\n  deletedFiles: string[];\r\n  gitCommits: string[];\r\n  architectureChanges: boolean;\r\n  configChanges: boolean;\r\n  hasNewFeatures: boolean;\r\n}\r\n\r\nexport interface UpdateResult {\r\n  success: boolean;\r\n  message: string;\r\n  updatedFiles: string[];\r\n  suggestions: string[];\r\n}\r\n\r\nexport class UpdateAgentDocs {\r\n  private config: UpdateConfig;\r\n\r\n  constructor(config: UpdateConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  async updateDocs(): Promise<UpdateResult> {\r\n    try {\r\n      // Check if .agent system exists\r\n      const agentPath = path.join(this.config.rootPath, '.agent');\r\n      if (!existsSync(agentPath)) {\r\n        return {\r\n          success: false,\r\n          message: '❌ .agent documentation system not found. Run `/init-agent` first.',\r\n          updatedFiles: [],\r\n          suggestions: ['Run `/init-agent` to initialize the documentation system']\r\n        };\r\n      }\r\n\r\n      // Analyze recent changes\r\n      const analysis = await this.analyzeChanges();\r\n      \r\n      if (analysis.filesChanged.length === 0 && analysis.gitCommits.length === 0) {\r\n        return {\r\n          success: true,\r\n          message: '✅ No significant changes detected. Documentation is up to date.',\r\n          updatedFiles: [],\r\n          suggestions: []\r\n        };\r\n      }\r\n\r\n      // Update documentation based on analysis\r\n      const updatedFiles: string[] = [];\r\n      const suggestions: string[] = [];\r\n\r\n      // Update system documentation if needed\r\n      if (this.shouldUpdate('system') && (analysis.architectureChanges || analysis.configChanges)) {\r\n        const systemUpdates = await this.updateSystemDocs(analysis);\r\n        updatedFiles.push(...systemUpdates);\r\n      }\r\n\r\n      // Update critical state\r\n      const criticalStateUpdate = await this.updateCriticalState(analysis);\r\n      if (criticalStateUpdate) {\r\n        updatedFiles.push('.agent/system/critical-state.md');\r\n      }\r\n\r\n      // Generate suggestions for manual updates\r\n      suggestions.push(...this.generateSuggestions(analysis));\r\n\r\n      const message = this.generateUpdateMessage(analysis, updatedFiles);\r\n\r\n      return {\r\n        success: true,\r\n        message,\r\n        updatedFiles,\r\n        suggestions\r\n      };\r\n\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        message: `Failed to update agent docs: ${error.message}`,\r\n        updatedFiles: [],\r\n        suggestions: []\r\n      };\r\n    }\r\n  }\r\n\r\n  private async analyzeChanges(): Promise<ChangeAnalysis> {\r\n    const analysis: ChangeAnalysis = {\r\n      filesChanged: [],\r\n      newFiles: [],\r\n      deletedFiles: [],\r\n      gitCommits: [],\r\n      architectureChanges: false,\r\n      configChanges: false,\r\n      hasNewFeatures: false\r\n    };\r\n\r\n    try {\r\n      // Get git changes since last update\r\n      const { execSync } = require('child_process');\r\n      \r\n      // Get recent commits (last 10)\r\n      try {\r\n        const commits = execSync('git log --oneline -10', { \r\n          cwd: this.config.rootPath, \r\n          encoding: 'utf-8' \r\n        });\r\n        analysis.gitCommits = commits.trim().split('\\n').filter(Boolean);\r\n      } catch (error) {\r\n        // Not a git repo or no commits\r\n      }\r\n\r\n      // Get changed files since last commit\r\n      try {\r\n        const changedFiles = execSync('git diff --name-only HEAD~5..HEAD', {\r\n          cwd: this.config.rootPath,\r\n          encoding: 'utf-8'\r\n        });\r\n        analysis.filesChanged = changedFiles.trim().split('\\n').filter(Boolean);\r\n      } catch (error) {\r\n        // Use file system timestamps as fallback\r\n        analysis.filesChanged = await this.getRecentlyModifiedFiles();\r\n      }\r\n\r\n      // Analyze types of changes\r\n      analysis.architectureChanges = this.detectArchitectureChanges(analysis.filesChanged);\r\n      analysis.configChanges = this.detectConfigChanges(analysis.filesChanged);\r\n      analysis.hasNewFeatures = this.detectNewFeatures(analysis.gitCommits);\r\n\r\n      return analysis;\r\n    } catch (error) {\r\n      return analysis;\r\n    }\r\n  }\r\n\r\n  private async getRecentlyModifiedFiles(): Promise<string[]> {\r\n    // Fallback: get files modified in last 24 hours\r\n    const oneDayAgo = Date.now() - (24 * 60 * 60 * 1000);\r\n    const recentFiles: string[] = [];\r\n\r\n    const scanDir = async (dirPath: string): Promise<void> => {\r\n      try {\r\n        const entries = await ops.promises.readdir(dirPath, { withFileTypes: true });\r\n        \r\n        for (const entry of entries) {\r\n          const fullPath = path.join(dirPath, entry.name);\r\n          \r\n          if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {\r\n            await scanDir(fullPath);\r\n          } else if (entry.isFile()) {\r\n            const stats = await ops.promises.stat(fullPath);\r\n            if (stats.mtime.getTime() > oneDayAgo) {\r\n              recentFiles.push(path.relative(this.config.rootPath, fullPath));\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // Skip directories we can't read\r\n      }\r\n    };\r\n\r\n    await scanDir(this.config.rootPath);\r\n    return recentFiles;\r\n  }\r\n\r\n  private detectArchitectureChanges(filesChanged: string[]): boolean {\r\n    const architectureIndicators = [\r\n      'src/tools/', 'src/commands/', 'src/ui/', 'src/agent/',\r\n      'package.json', 'tsconfig.json', 'src/index.ts'\r\n    ];\r\n    \r\n    return filesChanged.some(file => \r\n      architectureIndicators.some(indicator => file.includes(indicator))\r\n    );\r\n  }\r\n\r\n  private detectConfigChanges(filesChanged: string[]): boolean {\r\n    const configFiles = [\r\n      'package.json', 'tsconfig.json', '.grok/', 'CLAUDE.md',\r\n      '.env', '.gitignore', 'README.md'\r\n    ];\r\n    \r\n    return filesChanged.some(file =>\r\n      configFiles.some(config => file.includes(config))\r\n    );\r\n  }\r\n\r\n  private detectNewFeatures(commits: string[]): boolean {\r\n    const featureKeywords = ['feat:', 'add:', 'new:', 'feature:', 'implement:'];\r\n    return commits.some(commit =>\r\n      featureKeywords.some(keyword => commit.toLowerCase().includes(keyword))\r\n    );\r\n  }\r\n\r\n  private shouldUpdate(target: string): boolean {\r\n    return this.config.updateTarget === 'all' || this.config.updateTarget === target;\r\n  }\r\n\r\n  private async updateSystemDocs(analysis: ChangeAnalysis): Promise<string[]> {\r\n    const updatedFiles: string[] = [];\r\n    const systemPath = path.join(this.config.rootPath, '.agent', 'system');\r\n\r\n    // Update architecture.md if architecture changed\r\n    if (analysis.architectureChanges) {\r\n      try {\r\n        const archPath = path.join(systemPath, 'architecture.md');\r\n        if (existsSync(archPath)) {\r\n          const content = await ops.promises.readFile(archPath, 'utf-8');\r\n          const updatedContent = await this.updateArchitectureDoc(content, analysis);\r\n          await ops.promises.writeFile(archPath, updatedContent);\r\n          updatedFiles.push('.agent/system/architecture.md');\r\n        }\r\n      } catch (error) {\r\n        // Continue with other updates\r\n      }\r\n    }\r\n\r\n    return updatedFiles;\r\n  }\r\n\r\n  private async updateCriticalState(analysis: ChangeAnalysis): Promise<boolean> {\r\n    try {\r\n      const criticalStatePath = path.join(this.config.rootPath, '.agent', 'system', 'critical-state.md');\r\n      \r\n      if (!existsSync(criticalStatePath)) {\r\n        return false;\r\n      }\r\n\r\n      const content = await ops.promises.readFile(criticalStatePath, 'utf-8');\r\n      \r\n      // Update timestamp and recent changes\r\n      const timestamp = new Date().toISOString();\r\n      const changesSummary = this.generateChangesSummary(analysis);\r\n      \r\n      let updatedContent = content.replace(\r\n        /Last Updated: .*/,\r\n        `Last Updated: ${timestamp}`\r\n      );\r\n\r\n      // Add recent changes section if significant changes detected\r\n      if (analysis.filesChanged.length > 0) {\r\n        const recentChangesSection = `\r\n\r\n## Recent Changes\r\n${changesSummary}`;\r\n\r\n        if (content.includes('## Recent Changes')) {\r\n          updatedContent = updatedContent.replace(\r\n            /## Recent Changes[\\s\\S]*?(?=##|$)/,\r\n            recentChangesSection\r\n          );\r\n        } else {\r\n          updatedContent = updatedContent.replace(\r\n            /Last Updated: .*/,\r\n            `Last Updated: ${timestamp}\\nUpdated By: /update-agent-docs after detecting changes${recentChangesSection}`\r\n          );\r\n        }\r\n      }\r\n\r\n      await ops.promises.writeFile(criticalStatePath, updatedContent);\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private async updateArchitectureDoc(content: string, analysis: ChangeAnalysis): Promise<string> {\r\n    // Simple update - add timestamp and recent changes note\r\n    const timestamp = new Date().toISOString().split('T')[0];\r\n    \r\n    return content.replace(\r\n      /\\*Updated: .*/,\r\n      `*Updated: ${timestamp} - Recent changes detected in: ${analysis.filesChanged.slice(0, 3).join(', ')}${analysis.filesChanged.length > 3 ? '...' : ''}*`\r\n    );\r\n  }\r\n\r\n  private generateChangesSummary(analysis: ChangeAnalysis): string {\r\n    const lines: string[] = [];\r\n    \r\n    if (analysis.gitCommits.length > 0) {\r\n      lines.push(`**Recent Commits (${analysis.gitCommits.length}):**`);\r\n      analysis.gitCommits.slice(0, 5).forEach(commit => {\r\n        lines.push(`- ${commit}`);\r\n      });\r\n      if (analysis.gitCommits.length > 5) {\r\n        lines.push(`- ... and ${analysis.gitCommits.length - 5} more`);\r\n      }\r\n    }\r\n\r\n    if (analysis.filesChanged.length > 0) {\r\n      lines.push(`\\n**Files Modified (${analysis.filesChanged.length}):**`);\r\n      analysis.filesChanged.slice(0, 10).forEach(file => {\r\n        lines.push(`- ${file}`);\r\n      });\r\n      if (analysis.filesChanged.length > 10) {\r\n        lines.push(`- ... and ${analysis.filesChanged.length - 10} more files`);\r\n      }\r\n    }\r\n\r\n    if (analysis.architectureChanges) {\r\n      lines.push('\\n**⚠️ Architecture changes detected**');\r\n    }\r\n    \r\n    if (analysis.configChanges) {\r\n      lines.push('**⚙️ Configuration changes detected**');\r\n    }\r\n\r\n    return lines.join('\\n');\r\n  }\r\n\r\n  private generateSuggestions(analysis: ChangeAnalysis): string[] {\r\n    const suggestions: string[] = [];\r\n\r\n    if (analysis.hasNewFeatures) {\r\n      suggestions.push('📝 Consider adding new features to .agent/tasks/ as PRDs');\r\n      suggestions.push('📖 Update README.md with new feature documentation');\r\n    }\r\n\r\n    if (analysis.architectureChanges) {\r\n      suggestions.push('🏗️ Review and update .agent/system/architecture.md manually');\r\n      suggestions.push('📋 Update API documentation if interfaces changed');\r\n    }\r\n\r\n    if (analysis.configChanges) {\r\n      suggestions.push('⚙️ Review configuration changes in .agent/system/');\r\n    }\r\n\r\n    if (analysis.filesChanged.length > 20) {\r\n      suggestions.push('🧹 Consider running /compact to optimize conversation history');\r\n    }\r\n\r\n    return suggestions;\r\n  }\r\n\r\n  private generateUpdateMessage(analysis: ChangeAnalysis, updatedFiles: string[]): string {\r\n    let message = `✅ **Agent Documentation Updated**\\n\\n`;\r\n\r\n    message += `📊 **Change Analysis:**\\n`;\r\n    message += `- Files changed: ${analysis.filesChanged.length}\\n`;\r\n    message += `- Recent commits: ${analysis.gitCommits.length}\\n`;\r\n    message += `- Architecture changes: ${analysis.architectureChanges ? '✅' : '❌'}\\n`;\r\n    message += `- Config changes: ${analysis.configChanges ? '✅' : '❌'}\\n\\n`;\r\n\r\n    if (updatedFiles.length > 0) {\r\n      message += `📝 **Updated Files:**\\n`;\r\n      updatedFiles.forEach(file => {\r\n        message += `- ${file}\\n`;\r\n      });\r\n      message += '\\n';\r\n    }\r\n\r\n    return message;\r\n  }\r\n}","export interface SubagentConfig {\r\n  type: 'docgen' | 'prd-assistant' | 'delta' | 'token-optimizer' | 'summarizer' | 'sentinel' | 'regression-hunter' | 'guardrail';\r\n  contextLimit: number;\r\n  timeout: number;\r\n  maxRetries: number;\r\n}\r\n\r\nexport interface SubagentTask {\r\n  id: string;\r\n  type: SubagentConfig['type'];\r\n  input: any;\r\n  priority: 'low' | 'medium' | 'high';\r\n  createdAt: number;\r\n}\r\n\r\nexport interface SubagentResult {\r\n  taskId: string;\r\n  type: SubagentConfig['type'];\r\n  success: boolean;\r\n  output?: any;\r\n  error?: string;\r\n  tokensUsed: number;\r\n  executionTime: number;\r\n  summary: string;\r\n}\r\n\r\nexport interface SubagentContext {\r\n  id: string;\r\n  type: SubagentConfig['type'];\r\n  prompt: string;\r\n  data: any;\r\n  startTime: number;\r\n  tokenBudget: number;\r\n}\r\n\r\nexport class SubagentFramework {\r\n  private activeTasks: Map<string, SubagentTask> = new Map();\r\n  private results: Map<string, SubagentResult> = new Map();\r\n  private configs: Map<SubagentConfig['type'], SubagentConfig> = new Map();\r\n\r\n  constructor() {\r\n    this.initializeConfigs();\r\n  }\r\n\r\n  private initializeConfigs(): void {\r\n    const defaultConfigs: Record<SubagentConfig['type'], SubagentConfig> = {\r\n      'docgen': {\r\n        type: 'docgen',\r\n        contextLimit: 2000,\r\n        timeout: 30000,\r\n        maxRetries: 2\r\n      },\r\n      'prd-assistant': {\r\n        type: 'prd-assistant',\r\n        contextLimit: 2000,\r\n        timeout: 20000,\r\n        maxRetries: 1\r\n      },\r\n      'delta': {\r\n        type: 'delta',\r\n        contextLimit: 1500,\r\n        timeout: 15000,\r\n        maxRetries: 1\r\n      },\r\n      'token-optimizer': {\r\n        type: 'token-optimizer',\r\n        contextLimit: 1000,\r\n        timeout: 10000,\r\n        maxRetries: 1\r\n      },\r\n      'summarizer': {\r\n        type: 'summarizer',\r\n        contextLimit: 2000,\r\n        timeout: 25000,\r\n        maxRetries: 2\r\n      },\r\n      'sentinel': {\r\n        type: 'sentinel',\r\n        contextLimit: 1000,\r\n        timeout: 10000,\r\n        maxRetries: 1\r\n      },\r\n      'regression-hunter': {\r\n        type: 'regression-hunter',\r\n        contextLimit: 1500,\r\n        timeout: 15000,\r\n        maxRetries: 1\r\n      },\r\n      'guardrail': {\r\n        type: 'guardrail',\r\n        contextLimit: 1000,\r\n        timeout: 10000,\r\n        maxRetries: 1\r\n      }\r\n    };\r\n\r\n    for (const [type, config] of Object.entries(defaultConfigs)) {\r\n      this.configs.set(type as SubagentConfig['type'], config);\r\n    }\r\n  }\r\n\r\n  async spawnSubagent(task: Omit<SubagentTask, 'id' | 'createdAt'>): Promise<string> {\r\n    const taskId = this.generateTaskId();\r\n    const fullTask: SubagentTask = {\r\n      ...task,\r\n      id: taskId,\r\n      createdAt: Date.now()\r\n    };\r\n\r\n    this.activeTasks.set(taskId, fullTask);\r\n\r\n    // Execute subagent in background (simulated)\r\n    this.executeSubagent(fullTask);\r\n\r\n    return taskId;\r\n  }\r\n\r\n  private async executeSubagent(task: SubagentTask): Promise<void> {\r\n    const config = this.configs.get(task.type);\r\n    if (!config) {\r\n      this.setResult(task.id, {\r\n        taskId: task.id,\r\n        type: task.type,\r\n        success: false,\r\n        error: 'Unknown subagent type',\r\n        tokensUsed: 0,\r\n        executionTime: 0,\r\n        summary: 'Failed to execute: unknown type'\r\n      });\r\n      return;\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Create isolated context for subagent\r\n      const context: SubagentContext = {\r\n        id: this.generateContextId(),\r\n        type: task.type,\r\n        prompt: this.generatePromptForType(task.type, task.input),\r\n        data: task.input,\r\n        startTime,\r\n        tokenBudget: config.contextLimit\r\n      };\r\n\r\n      // Simulate subagent execution\r\n      const result = await this.executeInIsolatedContext(context, config);\r\n      \r\n      this.setResult(task.id, {\r\n        taskId: task.id,\r\n        type: task.type,\r\n        success: true,\r\n        output: result.output,\r\n        tokensUsed: result.tokensUsed,\r\n        executionTime: Date.now() - startTime,\r\n        summary: result.summary\r\n      });\r\n\r\n    } catch (error: any) {\r\n      this.setResult(task.id, {\r\n        taskId: task.id,\r\n        type: task.type,\r\n        success: false,\r\n        error: error.message,\r\n        tokensUsed: 0,\r\n        executionTime: Date.now() - startTime,\r\n        summary: `Failed: ${error.message}`\r\n      });\r\n    }\r\n\r\n    // Clean up active task\r\n    this.activeTasks.delete(task.id);\r\n  }\r\n\r\n  private async executeInIsolatedContext(\r\n    context: SubagentContext, \r\n    config: SubagentConfig\r\n  ): Promise<{ output: any; tokensUsed: number; summary: string }> {\r\n    \r\n    // This is where we would integrate with the actual AI model\r\n    // For now, we'll simulate the execution based on the subagent type\r\n    \r\n    switch (context.type) {\r\n      case 'docgen':\r\n        return this.simulateDocGenAgent(context);\r\n      case 'prd-assistant':\r\n        return this.simulatePRDAssistantAgent(context);\r\n      case 'delta':\r\n        return this.simulateDeltaAgent(context);\r\n      case 'token-optimizer':\r\n        return this.simulateTokenOptimizerAgent(context);\r\n      case 'summarizer':\r\n        return this.simulateSummarizerAgent(context);\r\n      case 'sentinel':\r\n        return this.simulateSentinelAgent(context);\r\n      case 'regression-hunter':\r\n        return this.simulateRegressionHunterAgent(context);\r\n      case 'guardrail':\r\n        return this.simulateGuardrailAgent(context);\r\n      default:\r\n        throw new Error(`Unsupported subagent type: ${context.type}`);\r\n    }\r\n  }\r\n\r\n  private async simulateDocGenAgent(context: SubagentContext): Promise<{ output: any; tokensUsed: number; summary: string }> {\r\n    const { projectPath, docType } = context.data;\r\n    \r\n    // Simulate document generation\r\n    await this.delay(2000); // Simulate processing time\r\n    \r\n    return {\r\n      output: {\r\n        documentType: docType,\r\n        content: `# Generated ${docType}\\n\\nThis is a generated document for ${projectPath}.\\n\\n*Generated by DocGenAgent*`,\r\n        metadata: {\r\n          projectPath,\r\n          generatedAt: new Date().toISOString(),\r\n          wordCount: 150\r\n        }\r\n      },\r\n      tokensUsed: 1500,\r\n      summary: `Generated ${docType} documentation (150 words)`\r\n    };\r\n  }\r\n\r\n  private async simulatePRDAssistantAgent(context: SubagentContext): Promise<{ output: any; tokensUsed: number; summary: string }> {\r\n    const { prdPath, prdContent } = context.data;\r\n    \r\n    await this.delay(1500);\r\n    \r\n    return {\r\n      output: {\r\n        suggestions: [\r\n          'Consider existing MCP integration patterns',\r\n          'Reference user-settings.json structure',\r\n          'Check CLI command naming conventions'\r\n        ],\r\n        conflicts: [],\r\n        similarTasks: ['user-management-prd.md'],\r\n        architectureImpact: 'May need new tools/ folder'\r\n      },\r\n      tokensUsed: 1200,\r\n      summary: `Analyzed PRD: 3 suggestions, 1 similar task found`\r\n    };\r\n  }\r\n\r\n  private async simulateDeltaAgent(context: SubagentContext): Promise<{ output: any; tokensUsed: number; summary: string }> {\r\n    const { fromCommit, toCommit } = context.data;\r\n    \r\n    await this.delay(1000);\r\n    \r\n    return {\r\n      output: {\r\n        filesChanged: ['src/tools/documentation/', 'src/hooks/use-input-handler.ts'],\r\n        architectureChanges: true,\r\n        newFeatures: ['documentation system'],\r\n        impact: 'Major feature addition - documentation generation'\r\n      },\r\n      tokensUsed: 800,\r\n      summary: `Analyzed changes from ${fromCommit}: 2 files, architecture changes detected`\r\n    };\r\n  }\r\n\r\n  private async simulateTokenOptimizerAgent(context: SubagentContext): Promise<{ output: any; tokensUsed: number; summary: string }> {\r\n    const { currentTokens, targetReduction } = context.data;\r\n    \r\n    await this.delay(500);\r\n    \r\n    return {\r\n      output: {\r\n        currentUsage: currentTokens,\r\n        optimizedUsage: Math.floor(currentTokens * 0.3),\r\n        reduction: Math.floor(currentTokens * 0.7),\r\n        suggestions: [\r\n          'Compress conversation history',\r\n          'Archive old tool results',\r\n          'Summarize repeated patterns'\r\n        ]\r\n      },\r\n      tokensUsed: 300,\r\n      summary: `Token optimization: ${Math.floor(currentTokens * 0.7)} tokens can be saved (70% reduction)`\r\n    };\r\n  }\r\n\r\n  private async simulateSummarizerAgent(context: SubagentContext): Promise<{ output: any; tokensUsed: number; summary: string }> {\r\n    const { content, compressionTarget } = context.data;\r\n    \r\n    await this.delay(2500);\r\n    \r\n    const originalLength = content.length;\r\n    const targetLength = Math.floor(originalLength * (compressionTarget || 0.3));\r\n    \r\n    return {\r\n      output: {\r\n        originalLength,\r\n        compressedLength: targetLength,\r\n        compressionRatio: 1 - (compressionTarget || 0.3),\r\n        summary: content.substring(0, targetLength) + '...',\r\n        keyPoints: [\r\n          'Main objectives completed',\r\n          'Documentation system implemented',\r\n          'Multiple commands added'\r\n        ]\r\n      },\r\n      tokensUsed: 1800,\r\n      summary: `Compressed content from ${originalLength} to ${targetLength} chars (${Math.round((1 - (compressionTarget || 0.3)) * 100)}% reduction)`\r\n    };\r\n  }\r\n\r\n  private async simulateSentinelAgent(context: SubagentContext): Promise<{ output: any; tokensUsed: number; summary: string }> {\r\n    const { errorLogs, recentCommands } = context.data;\r\n    \r\n    await this.delay(800);\r\n    \r\n    return {\r\n      output: {\r\n        errorsDetected: 0,\r\n        patternsFound: [],\r\n        recommendations: ['System running normally'],\r\n        alertLevel: 'green'\r\n      },\r\n      tokensUsed: 400,\r\n      summary: 'System monitoring: No issues detected'\r\n    };\r\n  }\r\n\r\n  private async simulateRegressionHunterAgent(context: SubagentContext): Promise<{ output: any; tokensUsed: number; summary: string }> {\r\n    const { proposedChanges, knownFailures } = context.data;\r\n    \r\n    await this.delay(1200);\r\n    \r\n    return {\r\n      output: {\r\n        riskLevel: 'low',\r\n        potentialIssues: [],\r\n        recommendations: ['Changes appear safe to proceed'],\r\n        testsSuggested: []\r\n      },\r\n      tokensUsed: 900,\r\n      summary: 'Regression analysis: Low risk, no conflicts with known failures'\r\n    };\r\n  }\r\n\r\n  private async simulateGuardrailAgent(context: SubagentContext): Promise<{ output: any; tokensUsed: number; summary: string }> {\r\n    const { planDescription, rules } = context.data;\r\n    \r\n    await this.delay(600);\r\n    \r\n    return {\r\n      output: {\r\n        violationsFound: [],\r\n        warnings: [],\r\n        compliance: 'passed',\r\n        newRuleSuggestions: []\r\n      },\r\n      tokensUsed: 350,\r\n      summary: 'Guardrail check: All rules satisfied'\r\n    };\r\n  }\r\n\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  private generateTaskId(): string {\r\n    return `task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private generateContextId(): string {\r\n    return `ctx_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private generatePromptForType(type: SubagentConfig['type'], input: any): string {\r\n    const prompts: Record<SubagentConfig['type'], string> = {\r\n      'docgen': `Generate documentation for the provided project. Focus on clarity and completeness. Input: ${JSON.stringify(input)}`,\r\n      'prd-assistant': `Analyze this PRD for potential issues, suggestions, and conflicts with existing project context. Input: ${JSON.stringify(input)}`,\r\n      'delta': `Analyze the changes between commits and summarize the impact. Input: ${JSON.stringify(input)}`,\r\n      'token-optimizer': `Analyze token usage and suggest optimizations. Input: ${JSON.stringify(input)}`,\r\n      'summarizer': `Summarize and compress the provided content while preserving key information. Input: ${JSON.stringify(input)}`,\r\n      'sentinel': `Monitor for errors and patterns in the provided logs/commands. Input: ${JSON.stringify(input)}`,\r\n      'regression-hunter': `Check proposed changes against known failure patterns. Input: ${JSON.stringify(input)}`,\r\n      'guardrail': `Validate the plan against established rules and constraints. Input: ${JSON.stringify(input)}`\r\n    };\r\n\r\n    return prompts[type];\r\n  }\r\n\r\n  private setResult(taskId: string, result: SubagentResult): void {\r\n    this.results.set(taskId, result);\r\n  }\r\n\r\n  async getResult(taskId: string): Promise<SubagentResult | null> {\r\n    return this.results.get(taskId) || null;\r\n  }\r\n\r\n  async waitForResult(taskId: string, timeoutMs: number = 30000): Promise<SubagentResult> {\r\n    const startTime = Date.now();\r\n    \r\n    while (Date.now() - startTime < timeoutMs) {\r\n      const result = await this.getResult(taskId);\r\n      if (result) {\r\n        return result;\r\n      }\r\n      await this.delay(100); // Check every 100ms\r\n    }\r\n    \r\n    throw new Error(`Subagent task ${taskId} timed out after ${timeoutMs}ms`);\r\n  }\r\n\r\n  getActiveTaskCount(): number {\r\n    return this.activeTasks.size;\r\n  }\r\n\r\n  getCompletedTaskCount(): number {\r\n    return this.results.size;\r\n  }\r\n\r\n  getPerformanceMetrics(): {\r\n    totalTasks: number;\r\n    activeTasks: number;\r\n    completedTasks: number;\r\n    averageExecutionTime: number;\r\n    totalTokensUsed: number;\r\n  } {\r\n    const results = Array.from(this.results.values());\r\n    const avgExecTime = results.length > 0 \r\n      ? results.reduce((sum, r) => sum + r.executionTime, 0) / results.length \r\n      : 0;\r\n    const totalTokens = results.reduce((sum, r) => sum + r.tokensUsed, 0);\r\n\r\n    return {\r\n      totalTasks: this.activeTasks.size + this.results.size,\r\n      activeTasks: this.activeTasks.size,\r\n      completedTasks: this.results.size,\r\n      averageExecutionTime: Math.round(avgExecTime),\r\n      totalTokensUsed: totalTokens\r\n    };\r\n  }\r\n\r\n  clearOldResults(maxAge: number = 3600000): void { // 1 hour default\r\n    const now = Date.now();\r\n    for (const [taskId, result] of this.results.entries()) {\r\n      if (now - result.executionTime > maxAge) {\r\n        this.results.delete(taskId);\r\n      }\r\n    }\r\n  }\r\n}","import * as ops from 'fs-extra';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { existsSync } from 'fs';\r\n\r\nexport interface IncidentInfo {\r\n  id: string;\r\n  title: string;\r\n  date: string;\r\n  trigger: string;\r\n  rootCause: string;\r\n  fix: string;\r\n  impact: 'low' | 'medium' | 'high';\r\n  recurrenceCount: number;\r\n  relatedFiles: string[];\r\n  guardrailCreated?: string;\r\n}\r\n\r\nexport interface GuardrailRule {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  category: 'naming' | 'configuration' | 'architecture' | 'process';\r\n  severity: 'warning' | 'error';\r\n  pattern: string;\r\n  enabled: boolean;\r\n  createdFrom?: string; // incident ID\r\n  lastTriggered?: string;\r\n}\r\n\r\nexport interface SelfHealingConfig {\r\n  enabled: boolean;\r\n  onErrorPrompt: 'gentle' | 'persistent' | 'off';\r\n  enforceGuardrails: boolean;\r\n  simulateOnPlan: 'off' | 'smart' | 'always';\r\n}\r\n\r\nexport class SelfHealingSystem {\r\n  private rootPath: string;\r\n  private agentPath: string;\r\n  private config: SelfHealingConfig;\r\n\r\n  constructor(rootPath: string, config?: Partial<SelfHealingConfig>) {\r\n    this.rootPath = rootPath;\r\n    this.agentPath = path.join(rootPath, '.agent');\r\n    this.config = {\r\n      enabled: true,\r\n      onErrorPrompt: 'gentle',\r\n      enforceGuardrails: true,\r\n      simulateOnPlan: 'smart',\r\n      ...config\r\n    };\r\n  }\r\n\r\n  async captureIncident(error: any, context?: any): Promise<{ success: boolean; incidentId?: string; message: string }> {\r\n    try {\r\n      const incident = await this.analyzeAndCreateIncident(error, context);\r\n      const incidentPath = path.join(this.agentPath, 'incidents', `${incident.id}.md`);\r\n      \r\n      // Ensure incidents directory exists\r\n      await ops.mkdir(path.dirname(incidentPath), { recursive: true });\r\n      \r\n      // Write incident documentation\r\n      const incidentContent = this.generateIncidentContent(incident);\r\n      await ops.promises.writeFile(incidentPath, incidentContent);\r\n\r\n      // Try to create a guardrail\r\n      const guardrail = await this.generateGuardrailFromIncident(incident);\r\n      if (guardrail) {\r\n        await this.saveGuardrail(guardrail);\r\n        incident.guardrailCreated = guardrail.id;\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        incidentId: incident.id,\r\n        message: `✅ Incident documented: ${incident.title}\\n${guardrail ? `🛡️ Guardrail created: ${guardrail.name}` : ''}\\n📁 Saved to: .agent/incidents/${incident.id}.md`\r\n      };\r\n\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        message: `Failed to capture incident: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  private async analyzeAndCreateIncident(error: any, context?: any): Promise<IncidentInfo> {\r\n    const id = this.generateIncidentId();\r\n    const now = new Date();\r\n    \r\n    // Extract information from error\r\n    const errorMessage = error?.message || error?.toString() || 'Unknown error';\r\n    const title = this.extractErrorTitle(errorMessage);\r\n    const trigger = this.extractTrigger(error, context);\r\n    const rootCause = this.analyzeRootCause(error, context);\r\n    const fix = this.suggestFix(error, context);\r\n    const impact = this.assessImpact(error, context);\r\n    const relatedFiles = this.extractRelatedFiles(error, context);\r\n\r\n    // Check for previous occurrences\r\n    const recurrenceCount = await this.countPreviousOccurrences(title);\r\n\r\n    return {\r\n      id,\r\n      title,\r\n      date: now.toISOString(),\r\n      trigger,\r\n      rootCause,\r\n      fix,\r\n      impact,\r\n      recurrenceCount,\r\n      relatedFiles\r\n    };\r\n  }\r\n\r\n  private extractErrorTitle(errorMessage: string): string {\r\n    // Extract a clean title from error message\r\n    const cleaned = errorMessage\r\n      .replace(/^Error:\\s*/i, '')\r\n      .replace(/\\s+at\\s+.*$/, '')\r\n      .replace(/\\s+\\(.*\\)$/, '')\r\n      .substring(0, 100);\r\n    \r\n    return cleaned || 'Unknown Error';\r\n  }\r\n\r\n  private extractTrigger(error: any, context?: any): string {\r\n    if (context?.command) {\r\n      return `Command: ${context.command}`;\r\n    }\r\n    if (context?.operation) {\r\n      return `Operation: ${context.operation}`;\r\n    }\r\n    if (error?.stack) {\r\n      const stackLine = error.stack.split('\\n')[1];\r\n      return stackLine ? `Code: ${stackLine.trim()}` : 'Unknown trigger';\r\n    }\r\n    return 'Unknown trigger';\r\n  }\r\n\r\n  private analyzeRootCause(error: any, context?: any): string {\r\n    const errorMessage = error?.message || '';\r\n    \r\n    // Common patterns\r\n    if (errorMessage.includes('ENOENT') || errorMessage.includes('not found')) {\r\n      return 'File or resource not found';\r\n    }\r\n    if (errorMessage.includes('permission denied') || errorMessage.includes('EACCES')) {\r\n      return 'Permission denied - insufficient access rights';\r\n    }\r\n    if (errorMessage.includes('timeout')) {\r\n      return 'Operation timed out - possible network or performance issue';\r\n    }\r\n    if (errorMessage.includes('Cannot find module')) {\r\n      return 'Missing dependency or incorrect import path';\r\n    }\r\n    if (errorMessage.includes('syntax error') || errorMessage.includes('unexpected token')) {\r\n      return 'Code syntax error';\r\n    }\r\n    \r\n    return 'Root cause requires investigation';\r\n  }\r\n\r\n  private suggestFix(error: any, context?: any): string {\r\n    const errorMessage = error?.message || '';\r\n    \r\n    if (errorMessage.includes('ENOENT')) {\r\n      return 'Ensure the required file or directory exists before accessing it';\r\n    }\r\n    if (errorMessage.includes('permission denied')) {\r\n      return 'Check file permissions or run with appropriate privileges';\r\n    }\r\n    if (errorMessage.includes('Cannot find module')) {\r\n      return 'Install missing dependency or correct the import path';\r\n    }\r\n    if (errorMessage.includes('timeout')) {\r\n      return 'Increase timeout value or optimize the operation';\r\n    }\r\n    \r\n    return 'Investigate error details and apply appropriate fix';\r\n  }\r\n\r\n  private assessImpact(error: any, context?: any): 'low' | 'medium' | 'high' {\r\n    const errorMessage = error?.message || '';\r\n    \r\n    if (errorMessage.includes('fatal') || errorMessage.includes('critical')) {\r\n      return 'high';\r\n    }\r\n    if (context?.operation && ['build', 'deploy', 'init'].includes(context.operation)) {\r\n      return 'high';\r\n    }\r\n    if (errorMessage.includes('warning')) {\r\n      return 'low';\r\n    }\r\n    \r\n    return 'medium';\r\n  }\r\n\r\n  private extractRelatedFiles(error: any, context?: any): string[] {\r\n    const files: string[] = [];\r\n    \r\n    if (context?.files) {\r\n      files.push(...context.files);\r\n    }\r\n    \r\n    if (error?.stack) {\r\n      const stackLines = error.stack.split('\\n');\r\n      for (const line of stackLines) {\r\n        const fileMatch = line.match(/\\((.*?):\\d+:\\d+\\)/);\r\n        if (fileMatch && fileMatch[1]) {\r\n          files.push(fileMatch[1]);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return [...new Set(files)]; // Remove duplicates\r\n  }\r\n\r\n  private async countPreviousOccurrences(title: string): Promise<number> {\r\n    try {\r\n      const incidentsPath = path.join(this.agentPath, 'incidents');\r\n      if (!existsSync(incidentsPath)) {\r\n        return 0;\r\n      }\r\n\r\n      const files = await ops.promises.readdir(incidentsPath);\r\n      let count = 0;\r\n\r\n      for (const file of files) {\r\n        if (file.endsWith('.md')) {\r\n          const filePath = path.join(incidentsPath, file);\r\n          const content = await ops.promises.readFile(filePath, 'utf-8');\r\n          if (content.includes(title)) {\r\n            count++;\r\n          }\r\n        }\r\n      }\r\n\r\n      return Math.max(0, count - 1); // Subtract 1 for current incident\r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  private generateIncidentContent(incident: IncidentInfo): string {\r\n    return `# ${incident.title} - ${incident.date.split('T')[0]}\r\n\r\n## 📊 Incident Summary\r\n- **ID**: ${incident.id}\r\n- **Date**: ${incident.date}\r\n- **Impact**: ${incident.impact.toUpperCase()}\r\n- **Recurrence**: ${incident.recurrenceCount > 0 ? `${incident.recurrenceCount} previous occurrences` : 'First occurrence'}\r\n\r\n## 🔥 Trigger\r\n${incident.trigger}\r\n\r\n## 🔍 Root Cause\r\n${incident.rootCause}\r\n\r\n## ✅ Fix Applied\r\n${incident.fix}\r\n\r\n## 📁 Related Files\r\n${incident.relatedFiles.length > 0 ? incident.relatedFiles.map(f => `- ${f}`).join('\\n') : 'None identified'}\r\n\r\n## 🛡️ Prevention\r\n${incident.guardrailCreated ? `Guardrail created: ${incident.guardrailCreated}` : 'Manual prevention required'}\r\n\r\n## 📚 Related Documentation\r\n- [Self-Healing SOP](../sop/self-healing-workflow.md)\r\n- [Guardrails](../guardrails/)\r\n- [System Critical State](../system/critical-state.md)\r\n\r\n---\r\n*Generated by Grok CLI Self-Healing System*\r\n*Incident ID: ${incident.id}*\r\n`;\r\n  }\r\n\r\n  private async generateGuardrailFromIncident(incident: IncidentInfo): Promise<GuardrailRule | null> {\r\n    // Only create guardrails for recurring issues or high-impact incidents\r\n    if (incident.recurrenceCount === 0 && incident.impact !== 'high') {\r\n      return null;\r\n    }\r\n\r\n    const id = `guard_${incident.id}`;\r\n    const category = this.determineGuardrailCategory(incident);\r\n    const pattern = this.createGuardrailPattern(incident);\r\n\r\n    if (!pattern) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      id,\r\n      name: `Prevent: ${incident.title}`,\r\n      description: `Automatically generated from incident ${incident.id}. ${incident.rootCause}`,\r\n      category,\r\n      severity: incident.impact === 'high' ? 'error' : 'warning',\r\n      pattern,\r\n      enabled: true,\r\n      createdFrom: incident.id\r\n    };\r\n  }\r\n\r\n  private determineGuardrailCategory(incident: IncidentInfo): GuardrailRule['category'] {\r\n    if (incident.trigger.includes('file') || incident.trigger.includes('path')) {\r\n      return 'configuration';\r\n    }\r\n    if (incident.trigger.includes('command') || incident.trigger.includes('operation')) {\r\n      return 'process';\r\n    }\r\n    if (incident.relatedFiles.some(f => f.includes('src/') || f.includes('lib/'))) {\r\n      return 'architecture';\r\n    }\r\n    return 'process';\r\n  }\r\n\r\n  private createGuardrailPattern(incident: IncidentInfo): string | null {\r\n    // Create simple patterns based on common error types\r\n    const errorMessage = incident.trigger.toLowerCase();\r\n    \r\n    if (errorMessage.includes('enoent') || errorMessage.includes('not found')) {\r\n      return 'check_file_exists';\r\n    }\r\n    if (errorMessage.includes('permission')) {\r\n      return 'check_permissions';\r\n    }\r\n    if (errorMessage.includes('module')) {\r\n      return 'check_dependencies';\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  private async saveGuardrail(guardrail: GuardrailRule): Promise<void> {\r\n    const guardrailsPath = path.join(this.agentPath, 'guardrails');\r\n    await ops.mkdir(guardrailsPath, { recursive: true });\r\n    \r\n    const filePath = path.join(guardrailsPath, `${guardrail.id}.md`);\r\n    const content = this.generateGuardrailContent(guardrail);\r\n    await ops.promises.writeFile(filePath, content);\r\n  }\r\n\r\n  private generateGuardrailContent(guardrail: GuardrailRule): string {\r\n    return `# ${guardrail.name}\r\n\r\n## 📋 Rule Details\r\n- **ID**: ${guardrail.id}\r\n- **Category**: ${guardrail.category}\r\n- **Severity**: ${guardrail.severity}\r\n- **Status**: ${guardrail.enabled ? 'Enabled' : 'Disabled'}\r\n\r\n## 📝 Description\r\n${guardrail.description}\r\n\r\n## 🔍 Pattern\r\n\\`${guardrail.pattern}\\`\r\n\r\n## 🛠️ Implementation\r\nThis guardrail checks for the following conditions:\r\n- Pattern: ${guardrail.pattern}\r\n- Action: ${guardrail.severity === 'error' ? 'Block operation' : 'Show warning'}\r\n\r\n## 📚 Related\r\n${guardrail.createdFrom ? `- Created from incident: ${guardrail.createdFrom}` : ''}\r\n- Category: ${guardrail.category}\r\n\r\n---\r\n*Generated by Grok CLI Self-Healing System*\r\n`;\r\n  }\r\n\r\n  async checkGuardrails(operation: string, context?: any): Promise<{ violations: GuardrailRule[]; warnings: GuardrailRule[]; passed: boolean }> {\r\n    const violations: GuardrailRule[] = [];\r\n    const warnings: GuardrailRule[] = [];\r\n\r\n    try {\r\n      const guardrails = await this.loadAllGuardrails();\r\n      \r\n      for (const guardrail of guardrails) {\r\n        if (!guardrail.enabled) continue;\r\n\r\n        const violated = this.checkGuardrailPattern(guardrail.pattern, operation, context);\r\n        if (violated) {\r\n          if (guardrail.severity === 'error') {\r\n            violations.push(guardrail);\r\n          } else {\r\n            warnings.push(guardrail);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // If we can't load guardrails, allow operation to proceed\r\n    }\r\n\r\n    return {\r\n      violations,\r\n      warnings,\r\n      passed: violations.length === 0\r\n    };\r\n  }\r\n\r\n  private async loadAllGuardrails(): Promise<GuardrailRule[]> {\r\n    const guardrailsPath = path.join(this.agentPath, 'guardrails');\r\n    if (!existsSync(guardrailsPath)) {\r\n      return [];\r\n    }\r\n\r\n    const files = await ops.promises.readdir(guardrailsPath);\r\n    const guardrails: GuardrailRule[] = [];\r\n\r\n    for (const file of files) {\r\n      if (file.endsWith('.md')) {\r\n        try {\r\n          const content = await ops.promises.readFile(path.join(guardrailsPath, file), 'utf-8');\r\n          const guardrail = this.parseGuardrailFromContent(content);\r\n          if (guardrail) {\r\n            guardrails.push(guardrail);\r\n          }\r\n        } catch (error) {\r\n          // Skip files we can't parse\r\n        }\r\n      }\r\n    }\r\n\r\n    return guardrails;\r\n  }\r\n\r\n  private parseGuardrailFromContent(content: string): GuardrailRule | null {\r\n    try {\r\n      const idMatch = content.match(/\\*\\*ID\\*\\*:\\s*(.+)/);\r\n      const nameMatch = content.match(/^#\\s*(.+)/m);\r\n      const categoryMatch = content.match(/\\*\\*Category\\*\\*:\\s*(.+)/);\r\n      const severityMatch = content.match(/\\*\\*Severity\\*\\*:\\s*(.+)/);\r\n      const statusMatch = content.match(/\\*\\*Status\\*\\*:\\s*(.+)/);\r\n      const patternMatch = content.match(/`([^`]+)`/);\r\n      const descMatch = content.match(/## 📝 Description\\n(.+)/);\r\n\r\n      if (!idMatch || !nameMatch || !patternMatch) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        id: idMatch[1].trim(),\r\n        name: nameMatch[1].trim(),\r\n        description: descMatch ? descMatch[1].trim() : '',\r\n        category: (categoryMatch ? categoryMatch[1].trim() : 'process') as GuardrailRule['category'],\r\n        severity: (severityMatch ? severityMatch[1].trim() : 'warning') as GuardrailRule['severity'],\r\n        pattern: patternMatch[1],\r\n        enabled: statusMatch ? statusMatch[1].includes('Enabled') : true\r\n      };\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private checkGuardrailPattern(pattern: string, operation: string, context?: any): boolean {\r\n    // Simple pattern matching - could be enhanced\r\n    switch (pattern) {\r\n      case 'check_file_exists':\r\n        return context?.files && context.files.some((f: string) => !existsSync(f));\r\n      case 'check_permissions':\r\n        return false; // Would need actual permission check\r\n      case 'check_dependencies':\r\n        return false; // Would need dependency analysis\r\n      default:\r\n        return operation.toLowerCase().includes(pattern.toLowerCase());\r\n    }\r\n  }\r\n\r\n  private generateIncidentId(): string {\r\n    const timestamp = Date.now().toString(36);\r\n    const random = Math.random().toString(36).substr(2, 5);\r\n    return `incident_${timestamp}_${random}`;\r\n  }\r\n\r\n  async listIncidents(): Promise<IncidentInfo[]> {\r\n    const incidentsPath = path.join(this.agentPath, 'incidents');\r\n    if (!existsSync(incidentsPath)) {\r\n      return [];\r\n    }\r\n\r\n    const files = await ops.promises.readdir(incidentsPath);\r\n    const incidents: IncidentInfo[] = [];\r\n\r\n    for (const file of files) {\r\n      if (file.endsWith('.md')) {\r\n        try {\r\n          const content = await ops.promises.readFile(path.join(incidentsPath, file), 'utf-8');\r\n          const incident = this.parseIncidentFromContent(content);\r\n          if (incident) {\r\n            incidents.push(incident);\r\n          }\r\n        } catch (error) {\r\n          // Skip files we can't parse\r\n        }\r\n      }\r\n    }\r\n\r\n    return incidents.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\r\n  }\r\n\r\n  private parseIncidentFromContent(content: string): IncidentInfo | null {\r\n    // Basic parsing - could be enhanced\r\n    try {\r\n      const idMatch = content.match(/\\*\\*ID\\*\\*:\\s*(.+)/);\r\n      const titleMatch = content.match(/^#\\s*(.+)/m);\r\n      const dateMatch = content.match(/\\*\\*Date\\*\\*:\\s*(.+)/);\r\n      const impactMatch = content.match(/\\*\\*Impact\\*\\*:\\s*(.+)/);\r\n\r\n      if (!idMatch || !titleMatch) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        id: idMatch[1].trim(),\r\n        title: titleMatch[1].split(' - ')[0].trim(),\r\n        date: dateMatch ? dateMatch[1].trim() : '',\r\n        trigger: 'Unknown',\r\n        rootCause: 'Unknown',\r\n        fix: 'Unknown',\r\n        impact: (impactMatch ? impactMatch[1].toLowerCase().trim() : 'medium') as any,\r\n        recurrenceCount: 0,\r\n        relatedFiles: []\r\n      };\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  getConfig(): SelfHealingConfig {\r\n    return { ...this.config };\r\n  }\r\n}","import { useState, useMemo, useEffect } from \"react\";\r\nimport { useInput } from \"ink\";\r\nimport path from \"path\";\r\nimport { GrokAgent, ChatEntry } from \"../agent/grok-agent.js\";\r\nimport { GrokToolCall } from \"../grok/client.js\";\r\nimport { ToolResult } from \"../types/index.js\";\r\nimport { ConfirmationService } from \"../utils/confirmation-service.js\";\r\nimport { useEnhancedInput, Key } from \"./use-enhanced-input.js\";\r\n\r\nimport { filterCommandSuggestions } from \"../ui/components/command-suggestions.js\";\r\nimport { loadModelConfig, updateCurrentModel } from \"../utils/model-config.js\";\r\nimport { AgentSystemGenerator } from \"../tools/documentation/agent-system-generator.js\";\r\nimport { generateDocsMenuText, findDocsMenuOption } from \"../tools/documentation/docs-menu.js\";\r\nimport { ReadmeGenerator } from \"../tools/documentation/readme-generator.js\";\r\nimport { CommentsGenerator } from \"../tools/documentation/comments-generator.js\";\r\nimport { ApiDocsGenerator } from \"../tools/documentation/api-docs-generator.js\";\r\nimport { ChangelogGenerator } from \"../tools/documentation/changelog-generator.js\";\r\nimport { UpdateAgentDocs } from \"../tools/documentation/update-agent-docs.js\";\r\nimport { SubagentFramework } from \"../subagents/subagent-framework.js\";\r\nimport { SelfHealingSystem } from \"../tools/documentation/self-healing-system.js\";\r\n\r\ninterface UseInputHandlerProps {\r\n  agent: GrokAgent;\r\n  chatHistory: ChatEntry[];\r\n  setChatHistory: React.Dispatch<React.SetStateAction<ChatEntry[]>>;\r\n  setIsProcessing: (processing: boolean) => void;\r\n  setIsStreaming: (streaming: boolean) => void;\r\n  setTokenCount: (count: number) => void;\r\n  setProcessingTime: (time: number) => void;\r\n  processingStartTime: React.MutableRefObject<number>;\r\n  isProcessing: boolean;\r\n  isStreaming: boolean;\r\n  isConfirmationActive?: boolean;\r\n}\r\n\r\ninterface CommandSuggestion {\r\n  command: string;\r\n  description: string;\r\n}\r\n\r\ninterface ModelOption {\r\n  model: string;\r\n}\r\n\r\nexport function useInputHandler({\r\n  agent,\r\n  chatHistory,\r\n  setChatHistory,\r\n  setIsProcessing,\r\n  setIsStreaming,\r\n  setTokenCount,\r\n  setProcessingTime,\r\n  processingStartTime,\r\n  isProcessing,\r\n  isStreaming,\r\n  isConfirmationActive = false,\r\n}: UseInputHandlerProps) {\r\n  const [showCommandSuggestions, setShowCommandSuggestions] = useState(false);\r\n  const [selectedCommandIndex, setSelectedCommandIndex] = useState(0);\r\n  const [showModelSelection, setShowModelSelection] = useState(false);\r\n  const [selectedModelIndex, setSelectedModelIndex] = useState(0);\r\n  const [autoEditEnabled, setAutoEditEnabled] = useState(() => {\r\n    const confirmationService = ConfirmationService.getInstance();\r\n    const sessionFlags = confirmationService.getSessionFlags();\r\n    return sessionFlags.allOperations;\r\n  });\r\n\r\n  const handleSpecialKey = (key: Key): boolean => {\r\n    // Don't handle input if confirmation dialog is active\r\n    if (isConfirmationActive) {\r\n      return true; // Prevent default handling\r\n    }\r\n\r\n    // Handle shift+tab to toggle auto-edit mode\r\n    if (key.shift && key.tab) {\r\n      const newAutoEditState = !autoEditEnabled;\r\n      setAutoEditEnabled(newAutoEditState);\r\n\r\n      const confirmationService = ConfirmationService.getInstance();\r\n      if (newAutoEditState) {\r\n        // Enable auto-edit: set all operations to be accepted\r\n        confirmationService.setSessionFlag(\"allOperations\", true);\r\n      } else {\r\n        // Disable auto-edit: reset session flags\r\n        confirmationService.resetSession();\r\n      }\r\n      return true; // Handled\r\n    }\r\n\r\n    // Handle escape key for closing menus\r\n    if (key.escape) {\r\n      if (showCommandSuggestions) {\r\n        setShowCommandSuggestions(false);\r\n        setSelectedCommandIndex(0);\r\n        return true;\r\n      }\r\n      if (showModelSelection) {\r\n        setShowModelSelection(false);\r\n        setSelectedModelIndex(0);\r\n        return true;\r\n      }\r\n      if (isProcessing || isStreaming) {\r\n        agent.abortCurrentOperation();\r\n        setIsProcessing(false);\r\n        setIsStreaming(false);\r\n        setTokenCount(0);\r\n        setProcessingTime(0);\r\n        processingStartTime.current = 0;\r\n        return true;\r\n      }\r\n      return false; // Let default escape handling work\r\n    }\r\n\r\n    // Handle command suggestions navigation\r\n    if (showCommandSuggestions) {\r\n      const filteredSuggestions = filterCommandSuggestions(\r\n        commandSuggestions,\r\n        input\r\n      );\r\n\r\n      if (filteredSuggestions.length === 0) {\r\n        setShowCommandSuggestions(false);\r\n        setSelectedCommandIndex(0);\r\n        return false; // Continue processing\r\n      } else {\r\n        if (key.upArrow) {\r\n          setSelectedCommandIndex((prev) =>\r\n            prev === 0 ? filteredSuggestions.length - 1 : prev - 1\r\n          );\r\n          return true;\r\n        }\r\n        if (key.downArrow) {\r\n          setSelectedCommandIndex(\r\n            (prev) => (prev + 1) % filteredSuggestions.length\r\n          );\r\n          return true;\r\n        }\r\n        if (key.tab || key.return) {\r\n          const safeIndex = Math.min(\r\n            selectedCommandIndex,\r\n            filteredSuggestions.length - 1\r\n          );\r\n          const selectedCommand = filteredSuggestions[safeIndex];\r\n          const newInput = selectedCommand.command + \" \";\r\n          setInput(newInput);\r\n          setCursorPosition(newInput.length);\r\n          setShowCommandSuggestions(false);\r\n          setSelectedCommandIndex(0);\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Handle model selection navigation\r\n    if (showModelSelection) {\r\n      if (key.upArrow) {\r\n        setSelectedModelIndex((prev) =>\r\n          prev === 0 ? availableModels.length - 1 : prev - 1\r\n        );\r\n        return true;\r\n      }\r\n      if (key.downArrow) {\r\n        setSelectedModelIndex((prev) => (prev + 1) % availableModels.length);\r\n        return true;\r\n      }\r\n      if (key.tab || key.return) {\r\n        const selectedModel = availableModels[selectedModelIndex];\r\n        agent.setModel(selectedModel.model);\r\n        updateCurrentModel(selectedModel.model);\r\n        const confirmEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: `✓ Switched to model: ${selectedModel.model}`,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, confirmEntry]);\r\n        setShowModelSelection(false);\r\n        setSelectedModelIndex(0);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false; // Let default handling proceed\r\n  };\r\n\r\n  const handleInputSubmit = async (userInput: string) => {\r\n    if (userInput === \"exit\" || userInput === \"quit\") {\r\n      process.exit(0);\r\n      return;\r\n    }\r\n\r\n    if (userInput.trim()) {\r\n      const directCommandResult = await handleDirectCommand(userInput);\r\n      if (!directCommandResult) {\r\n        await processUserMessage(userInput);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (newInput: string) => {\r\n    // Update command suggestions based on input\r\n    if (newInput.startsWith(\"/\")) {\r\n      setShowCommandSuggestions(true);\r\n      setSelectedCommandIndex(0);\r\n    } else {\r\n      setShowCommandSuggestions(false);\r\n      setSelectedCommandIndex(0);\r\n    }\r\n  };\r\n\r\n  const {\r\n    input,\r\n    cursorPosition,\r\n    setInput,\r\n    setCursorPosition,\r\n    clearInput,\r\n    resetHistory,\r\n    handleInput,\r\n  } = useEnhancedInput({\r\n    onSubmit: handleInputSubmit,\r\n    onSpecialKey: handleSpecialKey,\r\n    disabled: isConfirmationActive,\r\n  });\r\n\r\n  // Hook up the actual input handling\r\n  useInput((inputChar: string, key: Key) => {\r\n    handleInput(inputChar, key);\r\n  });\r\n\r\n  // Update command suggestions when input changes\r\n  useEffect(() => {\r\n    handleInputChange(input);\r\n  }, [input]);\r\n\r\n  const commandSuggestions: CommandSuggestion[] = [\r\n    { command: \"/help\", description: \"Show help information\" },\r\n    { command: \"/clear\", description: \"Clear chat history\" },\r\n    { command: \"/models\", description: \"Switch Grok Model\" },\r\n    { command: \"/init-agent\", description: \"Initialize .agent documentation system\" },\r\n    { command: \"/docs\", description: \"Documentation generation menu\" },\r\n    { command: \"/readme\", description: \"Generate project README.md\" },\r\n    { command: \"/api-docs\", description: \"Generate API documentation\" },\r\n    { command: \"/changelog\", description: \"Generate changelog from git history\" },\r\n    { command: \"/update-agent-docs\", description: \"Update .agent docs with recent changes\" },\r\n    { command: \"/compact\", description: \"Compress conversation history\" },\r\n    { command: \"/heal\", description: \"Document and prevent failure recurrence\" },\r\n    { command: \"/guardrails\", description: \"Manage prevention rules\" },\r\n    { command: \"/comments\", description: \"Add code comments to files\" },\r\n    { command: \"/commit-and-push\", description: \"AI commit & push to remote\" },\r\n    { command: \"/exit\", description: \"Exit the application\" },\r\n  ];\r\n\r\n  // Load models from configuration with fallback to defaults\r\n  const availableModels: ModelOption[] = useMemo(() => {\r\n    return loadModelConfig(); // Return directly, interface already matches\r\n  }, []);\r\n\r\n  const handleDirectCommand = async (input: string): Promise<boolean> => {\r\n    const trimmedInput = input.trim();\r\n\r\n    if (trimmedInput === \"/clear\") {\r\n      // Reset chat history\r\n      setChatHistory([]);\r\n\r\n      // Reset processing states\r\n      setIsProcessing(false);\r\n      setIsStreaming(false);\r\n      setTokenCount(0);\r\n      setProcessingTime(0);\r\n      processingStartTime.current = 0;\r\n\r\n      // Reset confirmation service session flags\r\n      const confirmationService = ConfirmationService.getInstance();\r\n      confirmationService.resetSession();\r\n\r\n      clearInput();\r\n      resetHistory();\r\n      return true;\r\n    }\r\n\r\n    if (trimmedInput === \"/help\") {\r\n      const helpEntry: ChatEntry = {\r\n        type: \"assistant\",\r\n        content: `Grok CLI Help:\r\n\r\nBuilt-in Commands:\r\n  /clear      - Clear chat history\r\n  /help       - Show this help\r\n  /models     - Switch between available models\r\n  /exit       - Exit application\r\n  exit, quit  - Exit application\r\n\r\nDocumentation Commands:\r\n  /init-agent       - Initialize .agent documentation system\r\n  /docs             - Interactive documentation menu\r\n  /readme           - Generate comprehensive README.md\r\n  /api-docs         - Generate API documentation from code\r\n  /changelog        - Generate changelog from git history\r\n  /update-agent-docs- Update .agent docs with recent changes\r\n  /comments         - Add intelligent code comments\r\n\r\nSelf-Healing & Optimization:\r\n  /compact          - Compress conversation history intelligently\r\n  /heal             - Document failures and create prevention rules\r\n  /guardrails       - Manage automated prevention system\r\n\r\nGit Commands:\r\n  /commit-and-push - AI-generated commit + push to remote\r\n\r\nEnhanced Input Features:\r\n  ↑/↓ Arrow   - Navigate command history\r\n  Ctrl+C      - Clear input (press twice to exit)\r\n  Ctrl+←/→    - Move by word\r\n  Ctrl+A/E    - Move to line start/end\r\n  Ctrl+W      - Delete word before cursor\r\n  Ctrl+K      - Delete to end of line\r\n  Ctrl+U      - Delete to start of line\r\n  Shift+Tab   - Toggle auto-edit mode (bypass confirmations)\r\n\r\nDirect Commands (executed immediately):\r\n  ls [path]   - List directory contents\r\n  pwd         - Show current directory\r\n  cd <path>   - Change directory\r\n  cat <file>  - View file contents\r\n  mkdir <dir> - Create directory\r\n  touch <file>- Create empty file\r\n\r\nModel Configuration:\r\n  Edit ~/.grok/models.json to add custom models (Claude, GPT, Gemini, etc.)\r\n\r\nFor complex operations, just describe what you want in natural language.\r\nExamples:\r\n  \"edit package.json and add a new script\"\r\n  \"create a new React component called Header\"\r\n  \"show me all TypeScript files in this project\"`,\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, helpEntry]);\r\n      clearInput();\r\n      return true;\r\n    }\r\n\r\n    if (trimmedInput === \"/exit\") {\r\n      process.exit(0);\r\n      return true;\r\n    }\r\n\r\n    if (trimmedInput === \"/models\") {\r\n      setShowModelSelection(true);\r\n      setSelectedModelIndex(0);\r\n      clearInput();\r\n      return true;\r\n    }\r\n\r\n    if (trimmedInput.startsWith(\"/models \")) {\r\n      const modelArg = trimmedInput.split(\" \")[1];\r\n      const modelNames = availableModels.map((m) => m.model);\r\n\r\n      if (modelNames.includes(modelArg)) {\r\n        agent.setModel(modelArg);\r\n        updateCurrentModel(modelArg); // Update project current model\r\n        const confirmEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: `✓ Switched to model: ${modelArg}`,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, confirmEntry]);\r\n      } else {\r\n        const errorEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: `Invalid model: ${modelArg}\r\n\r\nAvailable models: ${modelNames.join(\", \")}`,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, errorEntry]);\r\n      }\r\n\r\n      clearInput();\r\n      return true;\r\n    }\r\n\r\n\r\n    if (trimmedInput === \"/commit-and-push\") {\r\n      const userEntry: ChatEntry = {\r\n        type: \"user\",\r\n        content: \"/commit-and-push\",\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, userEntry]);\r\n\r\n      setIsProcessing(true);\r\n      setIsStreaming(true);\r\n\r\n      try {\r\n        // First check if there are any changes at all\r\n        const initialStatusResult = await agent.executeBashCommand(\r\n          \"git status --porcelain\"\r\n        );\r\n\r\n        if (\r\n          !initialStatusResult.success ||\r\n          !initialStatusResult.output?.trim()\r\n        ) {\r\n          const noChangesEntry: ChatEntry = {\r\n            type: \"assistant\",\r\n            content: \"No changes to commit. Working directory is clean.\",\r\n            timestamp: new Date(),\r\n          };\r\n          setChatHistory((prev) => [...prev, noChangesEntry]);\r\n          setIsProcessing(false);\r\n          setIsStreaming(false);\r\n          setInput(\"\");\r\n          return true;\r\n        }\r\n\r\n        // Add all changes\r\n        const addResult = await agent.executeBashCommand(\"git add .\");\r\n\r\n        if (!addResult.success) {\r\n          const addErrorEntry: ChatEntry = {\r\n            type: \"assistant\",\r\n            content: `Failed to stage changes: ${\r\n              addResult.error || \"Unknown error\"\r\n            }`,\r\n            timestamp: new Date(),\r\n          };\r\n          setChatHistory((prev) => [...prev, addErrorEntry]);\r\n          setIsProcessing(false);\r\n          setIsStreaming(false);\r\n          setInput(\"\");\r\n          return true;\r\n        }\r\n\r\n        // Show that changes were staged\r\n        const addEntry: ChatEntry = {\r\n          type: \"tool_result\",\r\n          content: \"Changes staged successfully\",\r\n          timestamp: new Date(),\r\n          toolCall: {\r\n            id: `git_add_${Date.now()}`,\r\n            type: \"function\",\r\n            function: {\r\n              name: \"bash\",\r\n              arguments: JSON.stringify({ command: \"git add .\" }),\r\n            },\r\n          },\r\n          toolResult: addResult,\r\n        };\r\n        setChatHistory((prev) => [...prev, addEntry]);\r\n\r\n        // Get staged changes for commit message generation\r\n        const diffResult = await agent.executeBashCommand(\"git diff --cached\");\r\n\r\n        // Generate commit message using AI\r\n        const commitPrompt = `Generate a concise, professional git commit message for these changes:\r\n\r\nGit Status:\r\n${initialStatusResult.output}\r\n\r\nGit Diff (staged changes):\r\n${diffResult.output || \"No staged changes shown\"}\r\n\r\nFollow conventional commit format (feat:, fix:, docs:, etc.) and keep it under 72 characters.\r\nRespond with ONLY the commit message, no additional text.`;\r\n\r\n        let commitMessage = \"\";\r\n        let streamingEntry: ChatEntry | null = null;\r\n        let accumulatedCommitContent = \"\";\r\n        let lastCommitUpdateTime = Date.now();\r\n\r\n        for await (const chunk of agent.processUserMessageStream(\r\n          commitPrompt\r\n        )) {\r\n          if (chunk.type === \"content\" && chunk.content) {\r\n            accumulatedCommitContent += chunk.content;\r\n            const now = Date.now();\r\n            if (now - lastCommitUpdateTime >= 150) {\r\n              commitMessage += accumulatedCommitContent;\r\n              if (!streamingEntry) {\r\n                const newEntry = {\r\n                  type: \"assistant\" as const,\r\n                  content: `Generating commit message...\\n\\n${commitMessage}`,\r\n                  timestamp: new Date(),\r\n                  isStreaming: true,\r\n                };\r\n                setChatHistory((prev) => [...prev, newEntry]);\r\n                streamingEntry = newEntry;\r\n              } else {\r\n                setChatHistory((prev) =>\r\n                  prev.map((entry, idx) =>\r\n                    idx === prev.length - 1 && entry.isStreaming\r\n                      ? {\r\n                          ...entry,\r\n                          content: `Generating commit message...\\n\\n${commitMessage}`,\r\n                        }\r\n                      : entry\r\n                  )\r\n                );\r\n              }\r\n              accumulatedCommitContent = \"\";\r\n              lastCommitUpdateTime = now;\r\n            }\r\n          } else if (chunk.type === \"done\") {\r\n            if (streamingEntry) {\r\n              setChatHistory((prev) =>\r\n                prev.map((entry) =>\r\n                  entry.isStreaming\r\n                    ? {\r\n                        ...entry,\r\n                        content: `Generated commit message: \"${commitMessage.trim()}\"`,\r\n                        isStreaming: false,\r\n                      }\r\n                    : entry\r\n                )\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // Execute the commit\r\n        const cleanCommitMessage = commitMessage\r\n          .trim()\r\n          .replace(/^[\"']|[\"']$/g, \"\");\r\n        const commitCommand = `git commit -m \"${cleanCommitMessage}\"`;\r\n        const commitResult = await agent.executeBashCommand(commitCommand);\r\n\r\n        const commitEntry: ChatEntry = {\r\n          type: \"tool_result\",\r\n          content: commitResult.success\r\n            ? commitResult.output || \"Commit successful\"\r\n            : commitResult.error || \"Commit failed\",\r\n          timestamp: new Date(),\r\n          toolCall: {\r\n            id: `git_commit_${Date.now()}`,\r\n            type: \"function\",\r\n            function: {\r\n              name: \"bash\",\r\n              arguments: JSON.stringify({ command: commitCommand }),\r\n            },\r\n          },\r\n          toolResult: commitResult,\r\n        };\r\n        setChatHistory((prev) => [...prev, commitEntry]);\r\n\r\n        // If commit was successful, push to remote\r\n        if (commitResult.success) {\r\n          // First try regular push, if it fails try with upstream setup\r\n          let pushResult = await agent.executeBashCommand(\"git push\");\r\n          let pushCommand = \"git push\";\r\n\r\n          if (\r\n            !pushResult.success &&\r\n            pushResult.error?.includes(\"no upstream branch\")\r\n          ) {\r\n            pushCommand = \"git push -u origin HEAD\";\r\n            pushResult = await agent.executeBashCommand(pushCommand);\r\n          }\r\n\r\n          const pushEntry: ChatEntry = {\r\n            type: \"tool_result\",\r\n            content: pushResult.success\r\n              ? pushResult.output || \"Push successful\"\r\n              : pushResult.error || \"Push failed\",\r\n            timestamp: new Date(),\r\n            toolCall: {\r\n              id: `git_push_${Date.now()}`,\r\n              type: \"function\",\r\n              function: {\r\n                name: \"bash\",\r\n                arguments: JSON.stringify({ command: pushCommand }),\r\n              },\r\n            },\r\n            toolResult: pushResult,\r\n          };\r\n          setChatHistory((prev) => [...prev, pushEntry]);\r\n        }\r\n      } catch (error: any) {\r\n        const errorEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: `Error during commit and push: ${error.message}`,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, errorEntry]);\r\n      }\r\n\r\n      setIsProcessing(false);\r\n      setIsStreaming(false);\r\n      clearInput();\r\n      return true;\r\n    }\r\n\r\n    if (trimmedInput === \"/init-agent\") {\r\n      const userEntry: ChatEntry = {\r\n        type: \"user\",\r\n        content: \"/init-agent\",\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, userEntry]);\r\n\r\n      setIsProcessing(true);\r\n\r\n      try {\r\n        // Determine project type - assume external project for now, could detect Grok CLI\r\n        const isGrokCli = process.cwd().includes('grok-cli') || \r\n                         trimmedInput.includes('--grok');\r\n        \r\n        const projectType = isGrokCli ? 'grok-cli' : 'external';\r\n        const projectName = isGrokCli ? 'Grok CLI' : 'Current Project';\r\n\r\n        const generator = new AgentSystemGenerator({\r\n          projectName,\r\n          projectType,\r\n          rootPath: process.cwd()\r\n        });\r\n\r\n        const result = await generator.generateAgentSystem();\r\n\r\n        const resultEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: result.message,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, resultEntry]);\r\n\r\n        if (result.success) {\r\n          // Additional success message with next steps\r\n          const nextStepsEntry: ChatEntry = {\r\n            type: \"assistant\",\r\n            content: `📚 **Next Steps:**\r\n1. Review the generated documentation in \\`.agent/\\`\r\n2. Customize \\`system/\\` docs for your project\r\n3. Add PRDs to \\`tasks/\\` before implementing features\r\n4. Run \\`/update-agent-docs\\` after making changes\r\n5. Check \\`.agent/README.md\\` for complete navigation\r\n\r\n💡 **Pro tip**: AI agents will now read these docs to understand your project context efficiently!`,\r\n            timestamp: new Date(),\r\n          };\r\n          setChatHistory((prev) => [...prev, nextStepsEntry]);\r\n        }\r\n\r\n      } catch (error: any) {\r\n        const errorEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: `Failed to initialize agent system: ${error.message}`,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, errorEntry]);\r\n      }\r\n\r\n      setIsProcessing(false);\r\n      clearInput();\r\n      return true;\r\n    }\r\n\r\n    if (trimmedInput === \"/docs\") {\r\n      const userEntry: ChatEntry = {\r\n        type: \"user\",\r\n        content: \"/docs\",\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, userEntry]);\r\n\r\n      const menuEntry: ChatEntry = {\r\n        type: \"assistant\",\r\n        content: generateDocsMenuText(),\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, menuEntry]);\r\n\r\n      clearInput();\r\n      return true;\r\n    }\r\n\r\n    // Check if input is a docs menu selection\r\n    const docsMenuOption = findDocsMenuOption(trimmedInput);\r\n    if (docsMenuOption) {\r\n      const userEntry: ChatEntry = {\r\n        type: \"user\", \r\n        content: trimmedInput,\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, userEntry]);\r\n\r\n      const confirmEntry: ChatEntry = {\r\n        type: \"assistant\",\r\n        content: `🎯 Selected: ${docsMenuOption.title}\\nExecuting: \\`${docsMenuOption.command}\\`...`,\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, confirmEntry]);\r\n\r\n      // Execute the selected command\r\n      setTimeout(() => {\r\n        handleDirectCommand(docsMenuOption.command);\r\n      }, 100);\r\n\r\n      clearInput();\r\n      return true;\r\n    }\r\n\r\n    if (trimmedInput === \"/readme\" || trimmedInput.startsWith(\"/readme \")) {\r\n      const userEntry: ChatEntry = {\r\n        type: \"user\",\r\n        content: trimmedInput,\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, userEntry]);\r\n\r\n      setIsProcessing(true);\r\n\r\n      try {\r\n        const args = trimmedInput.split(' ').slice(1);\r\n        const updateExisting = args.includes('--update');\r\n        const template = args.find(arg => arg.startsWith('--template='))?.split('=')[1] as any || 'default';\r\n\r\n        const generator = new ReadmeGenerator({\r\n          projectName: '', // Will be auto-detected\r\n          rootPath: process.cwd(),\r\n          updateExisting,\r\n          template\r\n        });\r\n\r\n        const result = await generator.generateReadme();\r\n\r\n        const resultEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: result.message,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, resultEntry]);\r\n\r\n        if (result.success) {\r\n          const nextStepsEntry: ChatEntry = {\r\n            type: \"assistant\",\r\n            content: `📝 **README.md Generated!**\r\n\r\n**Next Steps:**\r\n1. Review and customize the generated content\r\n2. Add project-specific details and examples\r\n3. Update installation and usage instructions\r\n4. Consider adding screenshots or diagrams\r\n\r\n💡 **Tip**: Use \\`/docs\\` to access other documentation tools!`,\r\n            timestamp: new Date(),\r\n          };\r\n          setChatHistory((prev) => [...prev, nextStepsEntry]);\r\n        }\r\n\r\n      } catch (error: any) {\r\n        const errorEntry: ChatEntry = {\r\n          type: \"assistant\", \r\n          content: `Failed to generate README: ${error.message}`,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, errorEntry]);\r\n      }\r\n\r\n      setIsProcessing(false);\r\n      clearInput();\r\n      return true;\r\n    }\r\n\r\n    if (trimmedInput === \"/comments\" || trimmedInput.startsWith(\"/comments \")) {\r\n      const userEntry: ChatEntry = {\r\n        type: \"user\",\r\n        content: trimmedInput,\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, userEntry]);\r\n\r\n      setIsProcessing(true);\r\n\r\n      try {\r\n        const args = trimmedInput.split(' ').slice(1);\r\n        const filePath = args[0];\r\n\r\n        if (!filePath) {\r\n          const errorEntry: ChatEntry = {\r\n            type: \"assistant\",\r\n            content: \"❌ Please specify a file path. Usage: `/comments <file-path>`\\n\\nExample: `/comments src/utils/helper.ts`\",\r\n            timestamp: new Date(),\r\n          };\r\n          setChatHistory((prev) => [...prev, errorEntry]);\r\n          setIsProcessing(false);\r\n          clearInput();\r\n          return true;\r\n        }\r\n\r\n        const commentType = args.includes('--functions') ? 'functions' : \r\n                           args.includes('--classes') ? 'classes' : 'all';\r\n\r\n        const generator = new CommentsGenerator({\r\n          filePath: filePath.startsWith('/') ? filePath : path.join(process.cwd(), filePath),\r\n          commentType,\r\n          style: 'auto'\r\n        });\r\n\r\n        const result = await generator.generateComments();\r\n\r\n        const resultEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: result.message,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, resultEntry]);\r\n\r\n        if (result.success) {\r\n          const tipsEntry: ChatEntry = {\r\n            type: \"assistant\",\r\n            content: `💡 **Code Comments Added!**\r\n\r\n**Options for next time:**\r\n- \\`/comments file.ts --functions\\` - Only comment functions\r\n- \\`/comments file.ts --classes\\` - Only comment classes\r\n- \\`/comments file.ts\\` - Comment all (default)\r\n\r\n**Backup created** - Original file saved with .backup extension`,\r\n            timestamp: new Date(),\r\n          };\r\n          setChatHistory((prev) => [...prev, tipsEntry]);\r\n        }\r\n\r\n      } catch (error: any) {\r\n        const errorEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: `Failed to add comments: ${error.message}`,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, errorEntry]);\r\n      }\r\n\r\n      setIsProcessing(false);\r\n      clearInput();\r\n      return true;\r\n    }\r\n\r\n    if (trimmedInput === \"/api-docs\" || trimmedInput.startsWith(\"/api-docs \")) {\r\n      const userEntry: ChatEntry = {\r\n        type: \"user\",\r\n        content: trimmedInput,\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, userEntry]);\r\n\r\n      setIsProcessing(true);\r\n\r\n      try {\r\n        const args = trimmedInput.split(' ').slice(1);\r\n        const outputFormat = args.includes('--format=html') ? 'html' : 'md';\r\n        const includePrivate = args.includes('--private');\r\n        const scanPaths = args.filter(arg => !arg.startsWith('--') && arg !== '');\r\n\r\n        const generator = new ApiDocsGenerator({\r\n          rootPath: process.cwd(),\r\n          outputFormat,\r\n          includePrivate,\r\n          scanPaths: scanPaths.length > 0 ? scanPaths : ['src/']\r\n        });\r\n\r\n        const result = await generator.generateApiDocs();\r\n\r\n        const resultEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: result.message,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, resultEntry]);\r\n\r\n        if (result.success) {\r\n          const tipsEntry: ChatEntry = {\r\n            type: \"assistant\",\r\n            content: `📖 **API Documentation Generated!**\r\n\r\n**Options for next time:**\r\n- \\`/api-docs --format=html\\` - Generate HTML format\r\n- \\`/api-docs --private\\` - Include private members\r\n- \\`/api-docs src/ lib/\\` - Specify custom scan paths\r\n\r\n**Enhancement tips:**\r\n- Add JSDoc comments to your functions and classes\r\n- Use TypeScript for better type information\r\n- Organize exports clearly in your modules`,\r\n            timestamp: new Date(),\r\n          };\r\n          setChatHistory((prev) => [...prev, tipsEntry]);\r\n        }\r\n\r\n      } catch (error: any) {\r\n        const errorEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: `Failed to generate API docs: ${error.message}`,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, errorEntry]);\r\n      }\r\n\r\n      setIsProcessing(false);\r\n      clearInput();\r\n      return true;\r\n    }\r\n\r\n    if (trimmedInput === \"/changelog\" || trimmedInput.startsWith(\"/changelog \")) {\r\n      const userEntry: ChatEntry = {\r\n        type: \"user\",\r\n        content: trimmedInput,\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, userEntry]);\r\n\r\n      setIsProcessing(true);\r\n\r\n      try {\r\n        const args = trimmedInput.split(' ').slice(1);\r\n        const sinceVersion = args.find(arg => arg.startsWith('--since='))?.split('=')[1];\r\n        const commitCount = args.find(arg => arg.startsWith('--commits='))?.split('=')[1];\r\n        const format = args.includes('--simple') ? 'simple' : 'conventional';\r\n\r\n        const generator = new ChangelogGenerator({\r\n          rootPath: process.cwd(),\r\n          sinceVersion,\r\n          commitCount: commitCount ? parseInt(commitCount) : undefined,\r\n          format,\r\n          includeBreaking: true\r\n        });\r\n\r\n        const result = await generator.generateChangelog();\r\n\r\n        const resultEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: result.message,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, resultEntry]);\r\n\r\n        if (result.success) {\r\n          const tipsEntry: ChatEntry = {\r\n            type: \"assistant\",\r\n            content: `📝 **Changelog Generated!**\r\n\r\n**Options for next time:**\r\n- \\`/changelog --since=v1.0.0\\` - Generate since specific version\r\n- \\`/changelog --commits=10\\` - Limit to last N commits  \r\n- \\`/changelog --simple\\` - Use simple format (not conventional)\r\n\r\n**Pro tips:**\r\n- Use conventional commit format: \\`feat: add new feature\\`\r\n- Mark breaking changes: \\`feat!: breaking change\\`\r\n- The changelog follows Keep a Changelog format`,\r\n            timestamp: new Date(),\r\n          };\r\n          setChatHistory((prev) => [...prev, tipsEntry]);\r\n        }\r\n\r\n      } catch (error: any) {\r\n        const errorEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: `Failed to generate changelog: ${error.message}`,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, errorEntry]);\r\n      }\r\n\r\n      setIsProcessing(false);\r\n      clearInput();\r\n      return true;\r\n    }\r\n\r\n    if (trimmedInput === \"/update-agent-docs\" || trimmedInput.startsWith(\"/update-agent-docs \")) {\r\n      const userEntry: ChatEntry = {\r\n        type: \"user\",\r\n        content: trimmedInput,\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, userEntry]);\r\n\r\n      setIsProcessing(true);\r\n\r\n      try {\r\n        const args = trimmedInput.split(' ').slice(1);\r\n        const updateTarget = args.includes('--system') ? 'system' :\r\n                            args.includes('--tasks') ? 'tasks' :\r\n                            args.includes('--sop') ? 'sop' : 'all';\r\n        const autoCommit = args.includes('--commit');\r\n\r\n        const updater = new UpdateAgentDocs({\r\n          rootPath: process.cwd(),\r\n          updateTarget,\r\n          autoCommit\r\n        });\r\n\r\n        const result = await updater.updateDocs();\r\n\r\n        const resultEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: result.message,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, resultEntry]);\r\n\r\n        if (result.success && result.suggestions.length > 0) {\r\n          const suggestionsEntry: ChatEntry = {\r\n            type: \"assistant\",\r\n            content: `💡 **Suggestions for Manual Review:**\\n\\n${result.suggestions.map(s => `- ${s}`).join('\\n')}\\n\\n**Options:**\\n- \\`/update-agent-docs --system\\` - Update only system docs\\n- \\`/update-agent-docs --tasks\\` - Update only tasks docs\\n- \\`/update-agent-docs --sop\\` - Update only SOPs`,\r\n            timestamp: new Date(),\r\n          };\r\n          setChatHistory((prev) => [...prev, suggestionsEntry]);\r\n        }\r\n\r\n      } catch (error: any) {\r\n        const errorEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: `Failed to update agent docs: ${error.message}`,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, errorEntry]);\r\n      }\r\n\r\n      setIsProcessing(false);\r\n      clearInput();\r\n      return true;\r\n    }\r\n\r\n    if (trimmedInput === \"/compact\" || trimmedInput.startsWith(\"/compact \")) {\r\n      const userEntry: ChatEntry = {\r\n        type: \"user\",\r\n        content: trimmedInput,\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, userEntry]);\r\n\r\n      setIsProcessing(true);\r\n\r\n      try {\r\n        const args = trimmedInput.split(' ').slice(1);\r\n        // const force = args.includes('--force'); // TODO: implement force flag\r\n        const dryRun = args.includes('--dry-run');\r\n\r\n        // Simulate context compression using subagent framework\r\n        const subagentFramework = new SubagentFramework();\r\n        const taskId = await subagentFramework.spawnSubagent({\r\n          type: 'summarizer',\r\n          input: {\r\n            content: chatHistory.map(entry => entry.content).join('\\n'),\r\n            compressionTarget: 0.3 // 70% reduction\r\n          },\r\n          priority: 'medium'\r\n        });\r\n\r\n        const result = await subagentFramework.waitForResult(taskId, 10000);\r\n\r\n        if (result.success) {\r\n          // const metrics = subagentFramework.getPerformanceMetrics(); // TODO: use metrics\r\n          \r\n          const resultEntry: ChatEntry = {\r\n            type: \"assistant\",\r\n            content: dryRun \r\n              ? `📊 **Compression Preview (Dry Run)**\\n\\n${result.summary}\\n\\n💡 Use \\`/compact\\` to apply compression`\r\n              : `🧹 **Context Compressed Successfully**\\n\\n${result.summary}\\n\\n📈 **Performance:**\\n- Tokens saved: ~${result.output.compressionRatio * 100}%\\n- Processing time: ${result.executionTime}ms\\n- Subagent tokens used: ${result.tokensUsed}`,\r\n            timestamp: new Date(),\r\n          };\r\n          setChatHistory((prev) => [...prev, resultEntry]);\r\n\r\n          if (!dryRun && result.success) {\r\n            // In a real implementation, this would actually compress the chat history\r\n            const tipsEntry: ChatEntry = {\r\n              type: \"assistant\",\r\n              content: `✨ **Context Optimization Complete**\\n\\n**What happened:**\\n- Older conversations summarized\\n- Recent context preserved\\n- Key decisions and TODOs maintained\\n\\n**Options:**\\n- \\`/compact --dry-run\\` - Preview compression\\n- \\`/compact --force\\` - Force compression even if below threshold`,\r\n              timestamp: new Date(),\r\n            };\r\n            setChatHistory((prev) => [...prev, tipsEntry]);\r\n          }\r\n        }\r\n\r\n      } catch (error: any) {\r\n        const errorEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: `Failed to compress context: ${error.message}`,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, errorEntry]);\r\n      }\r\n\r\n      setIsProcessing(false);\r\n      clearInput();\r\n      return true;\r\n    }\r\n\r\n    if (trimmedInput === \"/heal\" || trimmedInput.startsWith(\"/heal \")) {\r\n      const userEntry: ChatEntry = {\r\n        type: \"user\",\r\n        content: trimmedInput,\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, userEntry]);\r\n\r\n      setIsProcessing(true);\r\n\r\n      try {\r\n        // const args = trimmedInput.split(' ').slice(1);\r\n        // const classify = args.includes('--classify'); // TODO: implement classify flag\r\n        // const playbook = args.includes('--playbook'); // TODO: implement playbook flag\r\n\r\n        const healingSystem = new SelfHealingSystem(process.cwd());\r\n\r\n        // For demo purposes, create a simulated error\r\n        const mockError = {\r\n          message: \"Example error for demonstration\",\r\n          stack: \"at someFunction (src/example.ts:42:10)\"\r\n        };\r\n        const mockContext = {\r\n          command: trimmedInput,\r\n          operation: \"heal-demo\",\r\n          files: [\"src/example.ts\"]\r\n        };\r\n\r\n        const result = await healingSystem.captureIncident(mockError, mockContext);\r\n\r\n        const resultEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: result.message,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, resultEntry]);\r\n\r\n        if (result.success) {\r\n          const tipsEntry: ChatEntry = {\r\n            type: \"assistant\",\r\n            content: `🔄 **Self-Healing System Activated**\r\n\r\n**What was captured:**\r\n- Incident documentation with root cause analysis\r\n- Automatic guardrail generation (if applicable)\r\n- Integration with existing .agent system\r\n\r\n**Options:**\r\n- \\`/heal --classify\\` - Classify failure type and suggest guardrail\r\n- \\`/heal --playbook\\` - Generate step-by-step recovery SOP\r\n- \\`/guardrails\\` - View and manage all prevention rules\r\n\r\n**Next steps:**\r\n- Review the incident documentation\r\n- Check if guardrail was created\r\n- Update SOPs with lessons learned`,\r\n            timestamp: new Date(),\r\n          };\r\n          setChatHistory((prev) => [...prev, tipsEntry]);\r\n        }\r\n\r\n      } catch (error: any) {\r\n        const errorEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: `Failed to process healing: ${error.message}`,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, errorEntry]);\r\n      }\r\n\r\n      setIsProcessing(false);\r\n      clearInput();\r\n      return true;\r\n    }\r\n\r\n    if (trimmedInput === \"/guardrails\" || trimmedInput.startsWith(\"/guardrails \")) {\r\n      const userEntry: ChatEntry = {\r\n        type: \"user\",\r\n        content: trimmedInput,\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, userEntry]);\r\n\r\n      setIsProcessing(true);\r\n\r\n      try {\r\n        const args = trimmedInput.split(' ').slice(1);\r\n        const check = args.includes('--check');\r\n        // const enable = args.find(arg => arg.startsWith('--enable'))?.split('=')[1]; // TODO: implement enable flag\r\n        // const disable = args.find(arg => arg.startsWith('--disable'))?.split('=')[1]; // TODO: implement disable flag\r\n\r\n        const healingSystem = new SelfHealingSystem(process.cwd());\r\n\r\n        if (check) {\r\n          const checkResult = await healingSystem.checkGuardrails('example-operation', {});\r\n          const resultEntry: ChatEntry = {\r\n            type: \"assistant\",\r\n            content: `🛡️ **Guardrail Check Results**\\n\\n**Status:** ${checkResult.passed ? '✅ All Clear' : '❌ Violations Found'}\\n**Violations:** ${checkResult.violations.length}\\n**Warnings:** ${checkResult.warnings.length}`,\r\n            timestamp: new Date(),\r\n          };\r\n          setChatHistory((prev) => [...prev, resultEntry]);\r\n        } else {\r\n          // List all guardrails\r\n          const incidents = await healingSystem.listIncidents();\r\n          const config = healingSystem.getConfig();\r\n          \r\n          const resultEntry: ChatEntry = {\r\n            type: \"assistant\",\r\n            content: `🛡️ **Guardrails Management**\r\n\r\n**System Status:** ${config.enabled ? '✅ Enabled' : '❌ Disabled'}\r\n**Enforcement:** ${config.enforceGuardrails ? '✅ Active' : '❌ Disabled'}\r\n**Error Prompt:** ${config.onErrorPrompt}\r\n\r\n**Recent Incidents:** ${incidents.length}\r\n${incidents.slice(0, 3).map(i => `- ${i.title} (${i.impact} impact)`).join('\\n')}\r\n\r\n**Available Commands:**\r\n- \\`/guardrails --check\\` - Check current plans against guardrails\r\n- \\`/heal\\` - Document new failure and create guardrail\r\n- View specific guardrails in \\`.agent/guardrails/\\``,\r\n            timestamp: new Date(),\r\n          };\r\n          setChatHistory((prev) => [...prev, resultEntry]);\r\n        }\r\n\r\n      } catch (error: any) {\r\n        const errorEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: `Failed to manage guardrails: ${error.message}`,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, errorEntry]);\r\n      }\r\n\r\n      setIsProcessing(false);\r\n      clearInput();\r\n      return true;\r\n    }\r\n\r\n    const directBashCommands = [\r\n      \"ls\",\r\n      \"pwd\",\r\n      \"cd\",\r\n      \"cat\",\r\n      \"mkdir\",\r\n      \"touch\",\r\n      \"echo\",\r\n      \"grep\",\r\n      \"find\",\r\n      \"cp\",\r\n      \"mv\",\r\n      \"rm\",\r\n    ];\r\n    const firstWord = trimmedInput.split(\" \")[0];\r\n\r\n    if (directBashCommands.includes(firstWord)) {\r\n      const userEntry: ChatEntry = {\r\n        type: \"user\",\r\n        content: trimmedInput,\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, userEntry]);\r\n\r\n      try {\r\n        const result = await agent.executeBashCommand(trimmedInput);\r\n\r\n        const commandEntry: ChatEntry = {\r\n          type: \"tool_result\",\r\n          content: result.success\r\n            ? result.output || \"Command completed\"\r\n            : result.error || \"Command failed\",\r\n          timestamp: new Date(),\r\n          toolCall: {\r\n            id: `bash_${Date.now()}`,\r\n            type: \"function\",\r\n            function: {\r\n              name: \"bash\",\r\n              arguments: JSON.stringify({ command: trimmedInput }),\r\n            },\r\n          },\r\n          toolResult: result,\r\n        };\r\n        setChatHistory((prev) => [...prev, commandEntry]);\r\n      } catch (error: any) {\r\n        const errorEntry: ChatEntry = {\r\n          type: \"assistant\",\r\n          content: `Error executing command: ${error.message}`,\r\n          timestamp: new Date(),\r\n        };\r\n        setChatHistory((prev) => [...prev, errorEntry]);\r\n      }\r\n\r\n      clearInput();\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  const processUserMessage = async (userInput: string) => {\r\n    const userEntry: ChatEntry = {\r\n      type: \"user\",\r\n      content: userInput,\r\n      timestamp: new Date(),\r\n    };\r\n    setChatHistory((prev) => [...prev, userEntry]);\r\n\r\n    setIsProcessing(true);\r\n    clearInput();\r\n\r\n    try {\r\n      setIsStreaming(true);\r\n      let streamingEntry: ChatEntry | null = null;\r\n      let accumulatedContent = \"\";\r\n      let lastTokenCount = 0;\r\n      let pendingToolCalls: GrokToolCall[] | null = null;\r\n      let pendingToolResults: Array<{ toolCall: GrokToolCall; toolResult: ToolResult }> = [];\r\n      let lastUpdateTime = Date.now();\r\n\r\n      const flushUpdates = () => {\r\n        const now = Date.now();\r\n        if (now - lastUpdateTime < 150) return; // Throttle to ~6-7 FPS\r\n\r\n        // Update token count if changed\r\n        if (lastTokenCount !== 0) {\r\n          setTokenCount(lastTokenCount);\r\n        }\r\n\r\n        // Handle accumulated content\r\n        if (accumulatedContent) {\r\n          if (!streamingEntry) {\r\n            const newStreamingEntry = {\r\n              type: \"assistant\" as const,\r\n              content: accumulatedContent,\r\n              timestamp: new Date(),\r\n              isStreaming: true,\r\n            };\r\n            setChatHistory((prev) => [...prev, newStreamingEntry]);\r\n            streamingEntry = newStreamingEntry;\r\n          } else {\r\n            setChatHistory((prev) =>\r\n              prev.map((entry, idx) =>\r\n                idx === prev.length - 1 && entry.isStreaming\r\n                  ? { ...entry, content: entry.content + accumulatedContent }\r\n                  : entry\r\n              )\r\n            );\r\n          }\r\n          accumulatedContent = \"\";\r\n        }\r\n\r\n        // Handle pending tool calls\r\n        if (pendingToolCalls) {\r\n          setChatHistory((prev) =>\r\n            prev.map((entry) =>\r\n              entry.isStreaming\r\n                ? {\r\n                    ...entry,\r\n                    isStreaming: false,\r\n                    toolCalls: pendingToolCalls,\r\n                  }\r\n                : entry\r\n            )\r\n          );\r\n          streamingEntry = null;\r\n\r\n          // Add individual tool call entries\r\n          pendingToolCalls.forEach((toolCall) => {\r\n            const toolCallEntry: ChatEntry = {\r\n              type: \"tool_call\",\r\n              content: \"Executing...\",\r\n              timestamp: new Date(),\r\n              toolCall: toolCall,\r\n            };\r\n            setChatHistory((prev) => [...prev, toolCallEntry]);\r\n          });\r\n          pendingToolCalls = null;\r\n        }\r\n\r\n        // Handle pending tool results\r\n        if (pendingToolResults.length > 0) {\r\n          setChatHistory((prev) =>\r\n            prev.map((entry) => {\r\n              if (entry.isStreaming) {\r\n                return { ...entry, isStreaming: false };\r\n              }\r\n              // Update matching tool_call entries\r\n              const matchingResult = pendingToolResults.find(\r\n                (result) => entry.type === \"tool_call\" && entry.toolCall?.id === result.toolCall.id\r\n              );\r\n              if (matchingResult) {\r\n                return {\r\n                  ...entry,\r\n                  type: \"tool_result\",\r\n                  content: matchingResult.toolResult.success\r\n                    ? matchingResult.toolResult.output || \"Success\"\r\n                    : matchingResult.toolResult.error || \"Error occurred\",\r\n                  toolResult: matchingResult.toolResult,\r\n                };\r\n              }\r\n              return entry;\r\n            })\r\n          );\r\n          streamingEntry = null;\r\n          pendingToolResults = [];\r\n        }\r\n\r\n        lastUpdateTime = now;\r\n      };\r\n\r\n      for await (const chunk of agent.processUserMessageStream(userInput)) {\r\n        switch (chunk.type) {\r\n          case \"content\":\r\n            if (chunk.content) {\r\n              accumulatedContent += chunk.content;\r\n            }\r\n            break;\r\n\r\n          case \"token_count\":\r\n            if (chunk.tokenCount !== undefined) {\r\n              lastTokenCount = chunk.tokenCount;\r\n            }\r\n            break;\r\n\r\n          case \"tool_calls\":\r\n            if (chunk.toolCalls) {\r\n              pendingToolCalls = chunk.toolCalls;\r\n            }\r\n            break;\r\n\r\n          case \"tool_result\":\r\n            if (chunk.toolCall && chunk.toolResult) {\r\n              pendingToolResults.push({ toolCall: chunk.toolCall, toolResult: chunk.toolResult });\r\n            }\r\n            break;\r\n\r\n          case \"done\":\r\n            // Flush all remaining updates\r\n            flushUpdates();\r\n            break;\r\n        }\r\n\r\n        // Flush updates periodically\r\n        flushUpdates();\r\n      }\r\n\r\n      // Final flush and cleanup\r\n      flushUpdates();\r\n      if (streamingEntry) {\r\n        setChatHistory((prev) =>\r\n          prev.map((entry) =>\r\n            entry.isStreaming ? { ...entry, isStreaming: false } : entry\r\n          )\r\n        );\r\n      }\r\n      setIsStreaming(false);\r\n    } catch (error: any) {\r\n      const errorEntry: ChatEntry = {\r\n        type: \"assistant\",\r\n        content: `Error: ${error.message}`,\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory((prev) => [...prev, errorEntry]);\r\n      setIsStreaming(false);\r\n    }\r\n\r\n    setIsProcessing(false);\r\n    processingStartTime.current = 0;\r\n  };\r\n\r\n\r\n  return {\r\n    input,\r\n    cursorPosition,\r\n    showCommandSuggestions,\r\n    selectedCommandIndex,\r\n    showModelSelection,\r\n    selectedModelIndex,\r\n    commandSuggestions,\r\n    availableModels,\r\n    agent,\r\n    autoEditEnabled,\r\n  };\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Box, Text } from \"ink\";\r\nimport { formatTokenCount } from \"../../utils/token-counter.js\";\r\n\r\ninterface LoadingSpinnerProps {\r\n  isActive: boolean;\r\n  processingTime: number;\r\n  tokenCount: number;\r\n}\r\n\r\nconst loadingTexts = [\r\n  \"Thinking...\",\r\n  \"Processing...\",\r\n  \"Analyzing...\",\r\n  \"Working...\",\r\n  \"Computing...\",\r\n  \"Generating...\",\r\n  \"Herding electrons...\",\r\n  \"Combobulating...\",\r\n  \"Discombobulating...\",\r\n  \"Recombobulating...\",\r\n  \"Calibrating flux capacitors...\",\r\n  \"Reticulating splines...\",\r\n  \"Adjusting bell curves...\",\r\n  \"Optimizing bit patterns...\",\r\n  \"Harmonizing frequencies...\",\r\n  \"Synchronizing timelines...\",\r\n  \"Defragmenting thoughts...\",\r\n  \"Compiling wisdom...\",\r\n  \"Bootstrapping reality...\",\r\n  \"Untangling quantum states...\",\r\n  \"Negotiating with servers...\",\r\n  \"Convincing pixels to cooperate...\",\r\n  \"Summoning digital spirits...\",\r\n  \"Caffeinating algorithms...\",\r\n  \"Debugging the universe...\",\r\n];\r\n\r\nexport function LoadingSpinner({\r\n  isActive,\r\n  processingTime,\r\n  tokenCount,\r\n}: LoadingSpinnerProps) {\r\n  if (!isActive) return null;\r\n\r\n  // Static snapshot: no animation to reduce render loop activity\r\n  const staticSpinner = \"⠋\";\r\n  const staticText = \"Processing...\";\r\n\r\n  return (\r\n    <Box marginTop={1}>\r\n      <Text color=\"blue\">\r\n        {staticSpinner} {staticText}\r\n      </Text>\r\n      <Text color=\"gray\">\r\n        {\" \"}({processingTime}s · ↑ {formatTokenCount(tokenCount)} tokens · esc to interrupt)\r\n      </Text>\r\n    </Box>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Box, Text } from \"ink\";\r\n\r\ninterface ModelOption {\r\n  model: string;\r\n}\r\n\r\ninterface ModelSelectionProps {\r\n  models: ModelOption[];\r\n  selectedIndex: number;\r\n  isVisible: boolean;\r\n  currentModel: string;\r\n}\r\n\r\nexport function ModelSelection({\r\n  models,\r\n  selectedIndex,\r\n  isVisible,\r\n  currentModel,\r\n}: ModelSelectionProps) {\r\n  if (!isVisible) return null;\r\n\r\n  return (\r\n    <Box marginTop={1} flexDirection=\"column\">\r\n      <Box marginBottom={1}>\r\n        <Text color=\"cyan\">Select Grok Model (current: {currentModel}):</Text>\r\n      </Box>\r\n      {models.map((modelOption, index) => (\r\n        <Box key={index} paddingLeft={1}>\r\n          <Text\r\n            color={index === selectedIndex ? \"black\" : \"white\"}\r\n            backgroundColor={index === selectedIndex ? \"cyan\" : undefined}\r\n          >\r\n            {modelOption.model}\r\n          </Text>\r\n        </Box>\r\n      ))}\r\n      <Box marginTop={1}>\r\n        <Text color=\"gray\" dimColor>\r\n          ↑↓ navigate • Enter/Tab select • Esc cancel\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}","/**\r\n * Color constants for the CLI interface\r\n */\r\nexport const Colors = {\r\n  AccentYellow: 'yellow',\r\n  Gray: 'gray',\r\n  Red: 'red',\r\n  Green: 'green',\r\n  Blue: 'blue',\r\n  Cyan: 'cyan',\r\n  Magenta: 'magenta',\r\n  White: 'white',\r\n  Black: 'black'\r\n} as const;","import React from 'react';\r\nimport { Box } from 'ink';\r\n\r\ninterface MaxSizedBoxProps {\r\n  maxHeight?: number;\r\n  maxWidth?: number;\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const MaxSizedBox: React.FC<MaxSizedBoxProps> = ({\r\n  maxHeight,\r\n  maxWidth,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Box \r\n      flexDirection=\"column\"\r\n      {...props}\r\n    >\r\n      {children}\r\n    </Box>\r\n  );\r\n};","/**\r\n * Professional diff renderer component\r\n */\r\n\r\nimport React from 'react';\r\nimport { Box, Text } from 'ink';\r\nimport { Colors } from '../utils/colors.js';\r\nimport crypto from 'crypto';\r\nimport { colorizeCode } from '../utils/code-colorizer.js';\r\nimport { MaxSizedBox } from '../shared/max-sized-box.js';\r\n\r\ninterface DiffLine {\r\n  type: 'add' | 'del' | 'context' | 'hunk' | 'other';\r\n  oldLine?: number;\r\n  newLine?: number;\r\n  content: string;\r\n}\r\n\r\nfunction parseDiffWithLineNumbers(diffContent: string): DiffLine[] {\r\n  const lines = diffContent.split('\\n');\r\n  const result: DiffLine[] = [];\r\n  let currentOldLine = 0;\r\n  let currentNewLine = 0;\r\n  let inHunk = false;\r\n  const hunkHeaderRegex = /^@@ -(\\d+),?\\d* \\+(\\d+),?\\d* @@/;\r\n\r\n  for (const line of lines) {\r\n    const hunkMatch = line.match(hunkHeaderRegex);\r\n    if (hunkMatch) {\r\n      currentOldLine = parseInt(hunkMatch[1], 10);\r\n      currentNewLine = parseInt(hunkMatch[2], 10);\r\n      inHunk = true;\r\n      result.push({ type: 'hunk', content: line });\r\n      // We need to adjust the starting point because the first line number applies to the *first* actual line change/context,\r\n      // but we increment *before* pushing that line. So decrement here.\r\n      currentOldLine--;\r\n      currentNewLine--;\r\n      continue;\r\n    }\r\n    if (!inHunk) {\r\n      // Skip standard Git header lines more robustly\r\n      if (\r\n        line.startsWith('--- ') ||\r\n        line.startsWith('+++ ') ||\r\n        line.startsWith('diff --git') ||\r\n        line.startsWith('index ') ||\r\n        line.startsWith('similarity index') ||\r\n        line.startsWith('rename from') ||\r\n        line.startsWith('rename to') ||\r\n        line.startsWith('new file mode') ||\r\n        line.startsWith('deleted file mode')\r\n      )\r\n        continue;\r\n      // If it's not a hunk or header, skip (or handle as 'other' if needed)\r\n      continue;\r\n    }\r\n    if (line.startsWith('+')) {\r\n      currentNewLine++; // Increment before pushing\r\n      result.push({\r\n        type: 'add',\r\n        newLine: currentNewLine,\r\n        content: line.substring(1),\r\n      });\r\n    } else if (line.startsWith('-')) {\r\n      currentOldLine++; // Increment before pushing\r\n      result.push({\r\n        type: 'del',\r\n        oldLine: currentOldLine,\r\n        content: line.substring(1),\r\n      });\r\n    } else if (line.startsWith(' ')) {\r\n      currentOldLine++; // Increment before pushing\r\n      currentNewLine++;\r\n      result.push({\r\n        type: 'context',\r\n        oldLine: currentOldLine,\r\n        newLine: currentNewLine,\r\n        content: line.substring(1),\r\n      });\r\n    } else if (line.startsWith('\\\\')) {\r\n      // Handle \"\\ No newline at end of file\"\r\n      result.push({ type: 'other', content: line });\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\ninterface DiffRendererProps {\r\n  diffContent: string;\r\n  filename?: string;\r\n  tabWidth?: number;\r\n  availableTerminalHeight?: number;\r\n  terminalWidth?: number;\r\n}\r\n\r\nconst DEFAULT_TAB_WIDTH = 4; // Spaces per tab for normalization\r\n\r\nexport const DiffRenderer = ({\r\n  diffContent,\r\n  filename,\r\n  tabWidth = DEFAULT_TAB_WIDTH,\r\n  availableTerminalHeight,\r\n  terminalWidth = 80,\r\n}: DiffRendererProps): React.ReactElement => {\r\n  if (!diffContent || typeof diffContent !== 'string') {\r\n    return <Text color={Colors.AccentYellow}>No diff content.</Text>;\r\n  }\r\n\r\n  // Strip the first summary line (e.g. \"Updated file.txt with 1 addition and 2 removals\")\r\n  const lines = diffContent.split('\\n');\r\n  const firstLine = lines[0];\r\n  let actualDiffContent = diffContent;\r\n  \r\n  if (firstLine && (firstLine.startsWith('Updated ') || firstLine.startsWith('Created '))) {\r\n    actualDiffContent = lines.slice(1).join('\\n');\r\n  }\r\n  \r\n  const parsedLines = parseDiffWithLineNumbers(actualDiffContent);\r\n\r\n  if (parsedLines.length === 0) {\r\n    return <Text dimColor>No changes detected.</Text>;\r\n  }\r\n\r\n  // Always render as diff format to show line numbers and + signs\r\n  const renderedOutput = renderDiffContent(\r\n    parsedLines,\r\n    filename,\r\n    tabWidth,\r\n    availableTerminalHeight,\r\n    terminalWidth,\r\n  );\r\n\r\n  return <>{renderedOutput}</>;\r\n};\r\n\r\nconst renderDiffContent = (\r\n  parsedLines: DiffLine[],\r\n  filename: string | undefined,\r\n  tabWidth = DEFAULT_TAB_WIDTH,\r\n  availableTerminalHeight: number | undefined,\r\n  terminalWidth: number,\r\n) => {\r\n  // 1. Normalize whitespace (replace tabs with spaces) *before* further processing\r\n  const normalizedLines = parsedLines.map((line) => ({\r\n    ...line,\r\n    content: line.content.replace(/\\t/g, ' '.repeat(tabWidth)),\r\n  }));\r\n\r\n  // Filter out non-displayable lines (hunks, potentially 'other') using the normalized list\r\n  const displayableLines = normalizedLines.filter(\r\n    (l) => l.type !== 'hunk' && l.type !== 'other',\r\n  );\r\n\r\n  if (displayableLines.length === 0) {\r\n    return <Text dimColor>No changes detected.</Text>;\r\n  }\r\n\r\n  // Calculate the minimum indentation across all displayable lines\r\n  let baseIndentation = Infinity; // Start high to find the minimum\r\n  for (const line of displayableLines) {\r\n    // Only consider lines with actual content for indentation calculation\r\n    if (line.content.trim() === '') continue;\r\n\r\n    const firstCharIndex = line.content.search(/\\S/); // Find index of first non-whitespace char\r\n    const currentIndent = firstCharIndex === -1 ? 0 : firstCharIndex; // Indent is 0 if no non-whitespace found\r\n    baseIndentation = Math.min(baseIndentation, currentIndent);\r\n  }\r\n  // If baseIndentation remained Infinity (e.g., no displayable lines with content), default to 0\r\n  if (!isFinite(baseIndentation)) {\r\n    baseIndentation = 0;\r\n  }\r\n\r\n  const key = filename\r\n    ? `diff-box-${filename}`\r\n    : `diff-box-${crypto.createHash('sha1').update(JSON.stringify(parsedLines)).digest('hex')}`;\r\n\r\n  let lastLineNumber: number | null = null;\r\n  const MAX_CONTEXT_LINES_WITHOUT_GAP = 5;\r\n\r\n  return (\r\n    <MaxSizedBox\r\n      maxHeight={availableTerminalHeight}\r\n      maxWidth={terminalWidth}\r\n      key={key}\r\n    >\r\n      {displayableLines.reduce<React.ReactNode[]>((acc, line, index) => {\r\n        // Determine the relevant line number for gap calculation based on type\r\n        let relevantLineNumberForGapCalc: number | null = null;\r\n        if (line.type === 'add' || line.type === 'context') {\r\n          relevantLineNumberForGapCalc = line.newLine ?? null;\r\n        } else if (line.type === 'del') {\r\n          // For deletions, the gap is typically in relation to the original file's line numbering\r\n          relevantLineNumberForGapCalc = line.oldLine ?? null;\r\n        }\r\n\r\n        if (\r\n          lastLineNumber !== null &&\r\n          relevantLineNumberForGapCalc !== null &&\r\n          relevantLineNumberForGapCalc >\r\n            lastLineNumber + MAX_CONTEXT_LINES_WITHOUT_GAP + 1\r\n        ) {\r\n          acc.push(\r\n            <Box key={`gap-${index}`}>\r\n              <Text wrap=\"truncate\">{'═'.repeat(terminalWidth)}</Text>\r\n            </Box>,\r\n          );\r\n        }\r\n\r\n        const lineKey = `diff-line-${index}`;\r\n        let gutterNumStr = '';\r\n        let backgroundColor: string | undefined = undefined;\r\n        let prefixSymbol = ' ';\r\n        let dim = false;\r\n\r\n        switch (line.type) {\r\n          case 'add':\r\n            gutterNumStr = (line.newLine ?? '').toString();\r\n            backgroundColor = '#86efac'; // Light green for additions\r\n            prefixSymbol = '+';\r\n            lastLineNumber = line.newLine ?? null;\r\n            break;\r\n          case 'del':\r\n            gutterNumStr = (line.oldLine ?? '').toString();\r\n            backgroundColor = 'redBright'; // Light red for deletions\r\n            prefixSymbol = '-';\r\n            // For deletions, update lastLineNumber based on oldLine if it's advancing.\r\n            // This helps manage gaps correctly if there are multiple consecutive deletions\r\n            // or if a deletion is followed by a context line far away in the original file.\r\n            if (line.oldLine !== undefined) {\r\n              lastLineNumber = line.oldLine;\r\n            }\r\n            break;\r\n          case 'context':\r\n            gutterNumStr = (line.newLine ?? '').toString();\r\n            dim = true;\r\n            prefixSymbol = ' ';\r\n            lastLineNumber = line.newLine ?? null;\r\n            break;\r\n          default:\r\n            return acc;\r\n        }\r\n\r\n        const displayContent = line.content.substring(baseIndentation);\r\n\r\n        acc.push(\r\n          <Box key={lineKey} flexDirection=\"row\">\r\n            <Text color={Colors.Gray} dimColor={dim}>{gutterNumStr.padEnd(4)}</Text>\r\n            <Text color={backgroundColor ? '#000000' : undefined} backgroundColor={backgroundColor} dimColor={!backgroundColor && dim}>{prefixSymbol} </Text>\r\n            <Text color={backgroundColor ? '#000000' : undefined} backgroundColor={backgroundColor} dimColor={!backgroundColor && dim} wrap=\"wrap\">\r\n              {displayContent}\r\n            </Text>\r\n          </Box>,\r\n        );\r\n        return acc;\r\n      }, [])}\r\n    </MaxSizedBox>\r\n  );\r\n};\r\n\r\n\r\nconst getLanguageFromExtension = (extension: string): string | null => {\r\n  const languageMap: { [key: string]: string } = {\r\n    js: 'javascript',\r\n    ts: 'typescript',\r\n    py: 'python',\r\n    json: 'json',\r\n    css: 'css',\r\n    html: 'html',\r\n    sh: 'bash',\r\n    md: 'markdown',\r\n    yaml: 'yaml',\r\n    yml: 'yaml',\r\n    txt: 'plaintext',\r\n    java: 'java',\r\n    c: 'c',\r\n    cpp: 'cpp',\r\n    rb: 'ruby',\r\n  };\r\n  return languageMap[extension] || null; // Return null if extension not found\r\n};","import React from 'react';\r\nimport { Text } from 'ink';\r\nimport { marked } from 'marked';\r\nimport TerminalRenderer from 'marked-terminal';\r\n\r\n// Configure marked to use the terminal renderer with default settings\r\nmarked.setOptions({\r\n  renderer: new (TerminalRenderer as any)()\r\n});\r\n\r\nexport function MarkdownRenderer({ content }: { content: string }) {\r\n  try {\r\n    // Use marked.parse for synchronous parsing\r\n    const result = marked.parse(content);\r\n    // Handle both sync and async results\r\n    const rendered = typeof result === 'string' ? result : content;\r\n    return <Text>{rendered}</Text>;\r\n  } catch (error) {\r\n    // Fallback to plain text if markdown parsing fails\r\n    console.error('Markdown rendering error:', error);\r\n    return <Text>{content}</Text>;\r\n  }\r\n}","import React from \"react\";\r\nimport { Box, Text } from \"ink\";\r\nimport { ChatEntry } from \"../../agent/grok-agent.js\";\r\nimport { DiffRenderer } from \"./diff-renderer.js\";\r\nimport { MarkdownRenderer } from \"../utils/markdown-renderer.js\";\r\n\r\ninterface ChatHistoryProps {\r\n  entries: ChatEntry[];\r\n  isConfirmationActive?: boolean;\r\n}\r\n\r\n// Helper to truncate content in compact mode\r\nconst truncateContent = (content: string, maxLength: number = 100): string => {\r\n  if (process.env.COMPACT !== '1') return content;\r\n  return content.length > maxLength ? content.substring(0, maxLength) + '...' : content;\r\n};\r\n\r\n// Memoized ChatEntry component to prevent unnecessary re-renders\r\nconst MemoizedChatEntry = React.memo(\r\n  ({ entry, index }: { entry: ChatEntry; index: number }) => {\r\n    const renderDiff = (diffContent: string, filename?: string) => {\r\n      return (\r\n        <DiffRenderer\r\n          diffContent={diffContent}\r\n          filename={filename}\r\n          terminalWidth={80}\r\n        />\r\n      );\r\n    };\r\n\r\n    const renderFileContent = (content: string) => {\r\n      const lines = content.split(\"\\n\");\r\n\r\n      // Calculate minimum indentation like DiffRenderer does\r\n      let baseIndentation = Infinity;\r\n      for (const line of lines) {\r\n        if (line.trim() === \"\") continue;\r\n        const firstCharIndex = line.search(/\\S/);\r\n        const currentIndent = firstCharIndex === -1 ? 0 : firstCharIndex;\r\n        baseIndentation = Math.min(baseIndentation, currentIndent);\r\n      }\r\n      if (!isFinite(baseIndentation)) {\r\n        baseIndentation = 0;\r\n      }\r\n\r\n      return lines.map((line, index) => {\r\n        const displayContent = line.substring(baseIndentation);\r\n        return (\r\n          <Text key={index} color=\"gray\">\r\n            {displayContent}\r\n          </Text>\r\n        );\r\n      });\r\n    };\r\n\r\n    switch (entry.type) {\r\n      case \"user\":\r\n        return (\r\n          <Box key={index} flexDirection=\"column\" marginTop={1}>\r\n            <Box>\r\n              <Text color=\"gray\">\r\n                {\">\"} {truncateContent(entry.content)}\r\n              </Text>\r\n            </Box>\r\n          </Box>\r\n        );\r\n\r\n      case \"assistant\":\r\n        return (\r\n          <Box key={index} flexDirection=\"column\" marginTop={1}>\r\n            <Box flexDirection=\"row\" alignItems=\"flex-start\">\r\n              <Text color=\"white\">⏺ </Text>\r\n              <Box flexDirection=\"column\" flexGrow={1}>\r\n                {entry.toolCalls ? (\r\n                  // If there are tool calls, just show plain text\r\n                  <Text color=\"white\">{truncateContent(entry.content.trim())}</Text>\r\n                ) : (\r\n                  // If no tool calls, render as markdown\r\n                  <MarkdownRenderer content={truncateContent(entry.content.trim())} />\r\n                )}\r\n                {entry.isStreaming && <Text color=\"cyan\">█</Text>}\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        );\r\n\r\n      case \"tool_call\":\r\n      case \"tool_result\":\r\n        const getToolActionName = (toolName: string) => {\r\n          // Handle MCP tools with mcp__servername__toolname format\r\n          if (toolName.startsWith(\"mcp__\")) {\r\n            const parts = toolName.split(\"__\");\r\n            if (parts.length >= 3) {\r\n              const serverName = parts[1];\r\n              const actualToolName = parts.slice(2).join(\"__\");\r\n              return `${serverName.charAt(0).toUpperCase() + serverName.slice(1)}(${actualToolName.replace(/_/g, \" \")})`;\r\n            }\r\n          }\r\n\r\n          switch (toolName) {\r\n            case \"view_file\":\r\n              return \"Read\";\r\n            case \"str_replace_editor\":\r\n              return \"Update\";\r\n            case \"create_file\":\r\n              return \"Create\";\r\n            case \"bash\":\r\n              return \"Bash\";\r\n            case \"search\":\r\n              return \"Search\";\r\n            case \"create_todo_list\":\r\n              return \"Created Todo\";\r\n            case \"update_todo_list\":\r\n              return \"Updated Todo\";\r\n            default:\r\n              return \"Tool\";\r\n          }\r\n        };\r\n\r\n        const toolName = entry.toolCall?.function?.name || \"unknown\";\r\n        const actionName = getToolActionName(toolName);\r\n\r\n        const getFilePath = (toolCall: any) => {\r\n          if (toolCall?.function?.arguments) {\r\n            try {\r\n              const args = JSON.parse(toolCall.function.arguments);\r\n              if (toolCall.function.name === \"search\") {\r\n                return args.query;\r\n              }\r\n              return args.path || args.file_path || args.command || \"\";\r\n            } catch {\r\n              return \"\";\r\n            }\r\n          }\r\n          return \"\";\r\n        };\r\n\r\n        const filePath = getFilePath(entry.toolCall);\r\n        const isExecuting = entry.type === \"tool_call\" || !entry.toolResult;\r\n        \r\n        // Format JSON content for better readability\r\n        const formatToolContent = (content: string, toolName: string) => {\r\n          const truncated = truncateContent(content, 200); // Allow longer for tools\r\n          if (toolName.startsWith(\"mcp__\")) {\r\n            try {\r\n              // Try to parse as JSON and format it\r\n              const parsed = JSON.parse(truncated);\r\n              if (Array.isArray(parsed)) {\r\n                // For arrays, show a summary instead of full JSON\r\n                return `Found ${parsed.length} items`;\r\n              } else if (typeof parsed === 'object') {\r\n                // For objects, show a formatted version\r\n                return JSON.stringify(parsed, null, 2);\r\n              }\r\n            } catch {\r\n              // If not JSON, return as is\r\n              return truncated;\r\n            }\r\n          }\r\n          return truncated;\r\n        };\r\n        const shouldShowDiff =\r\n          entry.toolCall?.function?.name === \"str_replace_editor\" &&\r\n          entry.toolResult?.success &&\r\n          entry.content.includes(\"Updated\") &&\r\n          entry.content.includes(\"---\") &&\r\n          entry.content.includes(\"+++\");\r\n\r\n        const shouldShowFileContent =\r\n          (entry.toolCall?.function?.name === \"view_file\" ||\r\n            entry.toolCall?.function?.name === \"create_file\") &&\r\n          entry.toolResult?.success &&\r\n          !shouldShowDiff;\r\n\r\n        return (\r\n          <Box key={index} flexDirection=\"column\" marginTop={1}>\r\n            <Box>\r\n              <Text color=\"magenta\">⏺</Text>\r\n              <Text color=\"white\">\r\n                {\" \"}\r\n                {filePath ? `${actionName}(${filePath})` : actionName}\r\n              </Text>\r\n            </Box>\r\n            <Box marginLeft={2} flexDirection=\"column\">\r\n              {isExecuting ? (\r\n                <Text color=\"cyan\">⎿ Executing...</Text>\r\n              ) : shouldShowFileContent ? (\r\n                <Box flexDirection=\"column\">\r\n                  <Text color=\"gray\">⎿ File contents:</Text>\r\n                  <Box marginLeft={2} flexDirection=\"column\">\r\n                    {renderFileContent(entry.content)}\r\n                  </Box>\r\n                </Box>\r\n              ) : shouldShowDiff ? (\r\n                // For diff results, show only the summary line, not the raw content\r\n                <Text color=\"gray\">⎿ {entry.content.split(\"\\n\")[0]}</Text>\r\n              ) : (\r\n                <Text color=\"gray\">⎿ {formatToolContent(entry.content, toolName)}</Text>\r\n              )}\r\n            </Box>\r\n            {shouldShowDiff && !isExecuting && (\r\n              <Box marginLeft={4} flexDirection=\"column\">\r\n                {renderDiff(entry.content, filePath)}\r\n              </Box>\r\n            )}\r\n          </Box>\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n);\r\n\r\nMemoizedChatEntry.displayName = \"MemoizedChatEntry\";\r\n\r\nexport function ChatHistory({\r\n  entries,\r\n  isConfirmationActive = false,\r\n}: ChatHistoryProps) {\r\n  // Filter out tool_call entries with \"Executing...\" when confirmation is active\r\n  const filteredEntries = isConfirmationActive\r\n    ? entries.filter(\r\n        (entry) =>\r\n          !(entry.type === \"tool_call\" && entry.content === \"Executing...\")\r\n      )\r\n    : entries;\r\n\r\n  // Compact mode: show fewer entries to reduce rendering overhead\r\n  const maxEntries = process.env.COMPACT === '1' ? 5 : 20;\r\n\r\n  return (\r\n    <Box flexDirection=\"column\">\r\n      {filteredEntries.slice(-maxEntries).map((entry, index) => (\r\n        <MemoizedChatEntry\r\n          key={`${entry.timestamp.getTime()}-${index}`}\r\n          entry={entry}\r\n          index={index}\r\n        />\r\n      ))}\r\n    </Box>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Box, Text } from \"ink\";\r\n\r\ninterface ChatInputProps {\r\n  input: string;\r\n  cursorPosition: number;\r\n  isProcessing: boolean;\r\n  isStreaming: boolean;\r\n}\r\n\r\nexport function ChatInput({\r\n  input,\r\n  cursorPosition,\r\n  isProcessing,\r\n  isStreaming,\r\n}: ChatInputProps) {\r\n  const beforeCursor = input.slice(0, cursorPosition);\r\n  // afterCursor removed - not used in single line mode\r\n\r\n  // Handle multiline input display\r\n  const lines = input.split(\"\\n\");\r\n  const isMultiline = lines.length > 1;\r\n\r\n  // Calculate cursor position across lines\r\n  let currentLineIndex = 0;\r\n  let currentCharIndex = 0;\r\n  let totalChars = 0;\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    if (totalChars + lines[i].length >= cursorPosition) {\r\n      currentLineIndex = i;\r\n      currentCharIndex = cursorPosition - totalChars;\r\n      break;\r\n    }\r\n    totalChars += lines[i].length + 1; // +1 for newline\r\n  }\r\n\r\n  const showCursor = !isProcessing && !isStreaming;\r\n  const borderColor = isProcessing || isStreaming ? \"yellow\" : \"blue\";\r\n  const promptColor = \"cyan\";\r\n\r\n  // Display placeholder when input is empty\r\n  const placeholderText = \"Ask me anything...\";\r\n  const isPlaceholder = !input;\r\n\r\n  if (isMultiline) {\r\n    return (\r\n      <Box\r\n        borderStyle=\"round\"\r\n        borderColor={borderColor}\r\n        paddingY={0}\r\n        marginTop={1}\r\n      >\r\n        {lines.map((line, index) => {\r\n          const isCurrentLine = index === currentLineIndex;\r\n          const promptChar = index === 0 ? \"❯\" : \"│\";\r\n\r\n          if (isCurrentLine) {\r\n            const beforeCursorInLine = line.slice(0, currentCharIndex);\r\n            const cursorChar =\r\n              line.slice(currentCharIndex, currentCharIndex + 1) || \" \";\r\n            const afterCursorInLine = line.slice(currentCharIndex + 1);\r\n\r\n            return (\r\n              <Box key={index}>\r\n                <Text color={promptColor}>{promptChar} </Text>\r\n                <Text>\r\n                  {beforeCursorInLine}\r\n                  {showCursor && (\r\n                    <Text backgroundColor=\"white\" color=\"black\">\r\n                      {cursorChar}\r\n                    </Text>\r\n                  )}\r\n                  {!showCursor && cursorChar !== \" \" && cursorChar}\r\n                  {afterCursorInLine}\r\n                </Text>\r\n              </Box>\r\n            );\r\n          } else {\r\n            return (\r\n              <Box key={index}>\r\n                <Text color={promptColor}>{promptChar} </Text>\r\n                <Text>{line}</Text>\r\n              </Box>\r\n            );\r\n          }\r\n        })}\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Single line input box\r\n  const cursorChar = input.slice(cursorPosition, cursorPosition + 1) || \" \";\r\n  const afterCursorText = input.slice(cursorPosition + 1);\r\n\r\n  return (\r\n    <Box\r\n      borderStyle=\"round\"\r\n      borderColor={borderColor}\r\n      paddingX={1}\r\n      paddingY={0}\r\n      marginTop={1}\r\n    >\r\n      <Box>\r\n        <Text color={promptColor}>❯ </Text>\r\n        {isPlaceholder ? (\r\n          <>\r\n            <Text color=\"gray\" dimColor>\r\n              {placeholderText}\r\n            </Text>\r\n            {showCursor && (\r\n              <Text backgroundColor=\"white\" color=\"black\">\r\n                {\" \"}\r\n              </Text>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <Text>\r\n            {beforeCursor}\r\n            {showCursor && (\r\n              <Text backgroundColor=\"white\" color=\"black\">\r\n                {cursorChar}\r\n              </Text>\r\n            )}\r\n            {!showCursor && cursorChar !== \" \" && cursorChar}\r\n            {afterCursorText}\r\n          </Text>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Box, Text } from \"ink\";\r\nimport { getMCPManager } from \"../../grok/tools.js\";\r\nimport { MCPTool } from \"../../mcp/client.js\";\r\n\r\ninterface MCPStatusProps {}\r\n\r\nexport function MCPStatus({}: MCPStatusProps) {\r\n  const [connectedServers, setConnectedServers] = useState<string[]>([]);\r\n  const [availableTools, setAvailableTools] = useState<MCPTool[]>([]);\r\n\r\n  useEffect(() => {\r\n    const updateStatus = () => {\r\n      try {\r\n        const manager = getMCPManager();\r\n        const servers = manager.getServers();\r\n        const tools = manager.getTools();\r\n\r\n        setConnectedServers(servers);\r\n        setAvailableTools(tools);\r\n      } catch (error) {\r\n        // MCP manager not initialized yet\r\n        setConnectedServers([]);\r\n        setAvailableTools([]);\r\n      }\r\n    };\r\n\r\n    // Initial update with a small delay to allow MCP initialization\r\n    const initialTimer = setTimeout(updateStatus, 2000);\r\n\r\n    // Set up polling to check for status changes\r\n    const interval = setInterval(updateStatus, 2000);\r\n\r\n    return () => {\r\n      clearTimeout(initialTimer);\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  if (connectedServers.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Box marginLeft={1}>\r\n      <Text color=\"green\">⚒ mcps: {connectedServers.length} </Text>\r\n    </Box>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Box, Text, useInput } from \"ink\";\r\nimport { DiffRenderer } from \"./diff-renderer.js\";\r\n\r\ninterface ConfirmationDialogProps {\r\n  operation: string;\r\n  filename: string;\r\n  onConfirm: (dontAskAgain?: boolean) => void;\r\n  onReject: (feedback?: string) => void;\r\n  showVSCodeOpen?: boolean;\r\n  content?: string; // Optional content to show (file content or command)\r\n}\r\n\r\nexport default function ConfirmationDialog({\r\n  operation,\r\n  filename,\r\n  onConfirm,\r\n  onReject,\r\n  showVSCodeOpen = false,\r\n  content,\r\n}: ConfirmationDialogProps) {\r\n  const [selectedOption, setSelectedOption] = useState(0);\r\n  const [feedbackMode, setFeedbackMode] = useState(false);\r\n  const [feedback, setFeedback] = useState(\"\");\r\n\r\n  const options = [\r\n    \"Yes\",\r\n    \"Yes, and don't ask again this session\",\r\n    \"No\",\r\n    \"No, with feedback\",\r\n  ];\r\n\r\n  useInput((input, key) => {\r\n    if (feedbackMode) {\r\n      if (key.return) {\r\n        onReject(feedback.trim());\r\n        return;\r\n      }\r\n      if (key.backspace || key.delete) {\r\n        setFeedback((prev) => prev.slice(0, -1));\r\n        return;\r\n      }\r\n      if (input && !key.ctrl && !key.meta) {\r\n        setFeedback((prev) => prev + input);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (key.upArrow || (key.shift && key.tab)) {\r\n      setSelectedOption((prev) => (prev > 0 ? prev - 1 : options.length - 1));\r\n      return;\r\n    }\r\n\r\n    if (key.downArrow || key.tab) {\r\n      setSelectedOption((prev) => (prev + 1) % options.length);\r\n      return;\r\n    }\r\n\r\n    if (key.return) {\r\n      if (selectedOption === 0) {\r\n        onConfirm(false);\r\n      } else if (selectedOption === 1) {\r\n        onConfirm(true);\r\n      } else if (selectedOption === 2) {\r\n        onReject(\"Operation cancelled by user\");\r\n      } else {\r\n        setFeedbackMode(true);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (key.escape) {\r\n      if (feedbackMode) {\r\n        setFeedbackMode(false);\r\n        setFeedback(\"\");\r\n      } else {\r\n        // Cancel the confirmation when escape is pressed from main confirmation\r\n        onReject(\"Operation cancelled by user (pressed Escape)\");\r\n      }\r\n      return;\r\n    }\r\n  });\r\n\r\n  if (feedbackMode) {\r\n    return (\r\n      <Box flexDirection=\"column\" padding={1}>\r\n        <Box flexDirection=\"column\" marginBottom={1}>\r\n          <Text color=\"gray\">\r\n            Type your feedback and press Enter, or press Escape to go back.\r\n          </Text>\r\n        </Box>\r\n\r\n        <Box\r\n          borderStyle=\"round\"\r\n          borderColor=\"yellow\"\r\n          paddingX={1}\r\n          marginTop={1}\r\n        >\r\n          <Text color=\"gray\">❯ </Text>\r\n          <Text>\r\n            {feedback}\r\n            <Text color=\"white\">█</Text>\r\n          </Text>\r\n        </Box>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box flexDirection=\"column\">\r\n      {/* Tool use header - styled like chat history */}\r\n      <Box marginTop={1}>\r\n        <Box>\r\n          <Text color=\"magenta\">⏺</Text>\r\n          <Text color=\"white\">\r\n            {\" \"}\r\n            {operation}({filename})\r\n          </Text>\r\n        </Box>\r\n      </Box>\r\n\r\n      <Box marginLeft={2} flexDirection=\"column\">\r\n        <Text color=\"gray\">⎿ Requesting user confirmation</Text>\r\n\r\n        {showVSCodeOpen && (\r\n          <Box marginTop={1}>\r\n            <Text color=\"gray\">⎿ Opened changes in Visual Studio Code ⧉</Text>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Show content preview if provided */}\r\n        {content && (\r\n          <>\r\n            <Text color=\"gray\">⎿ {content.split('\\n')[0]}</Text>\r\n            <Box marginLeft={4} flexDirection=\"column\">\r\n              <DiffRenderer\r\n                diffContent={content}\r\n                filename={filename}\r\n                terminalWidth={80}\r\n              />\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n\r\n      {/* Confirmation options */}\r\n      <Box flexDirection=\"column\" marginTop={1}>\r\n        <Box marginBottom={1}>\r\n          <Text>Do you want to proceed with this operation?</Text>\r\n        </Box>\r\n\r\n        <Box flexDirection=\"column\">\r\n          {options.map((option, index) => (\r\n            <Box key={index} paddingLeft={1}>\r\n              <Text\r\n                color={selectedOption === index ? \"black\" : \"white\"}\r\n                backgroundColor={selectedOption === index ? \"cyan\" : undefined}\r\n              >\r\n                {index + 1}. {option}\r\n              </Text>\r\n            </Box>\r\n          ))}\r\n        </Box>\r\n\r\n        <Box marginTop={1}>\r\n          <Text color=\"gray\" dimColor>\r\n            ↑↓ navigate • Enter select • Esc cancel\r\n          </Text>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Box, Text, useInput, useApp } from \"ink\";\r\nimport { GrokAgent } from \"../../agent/grok-agent.js\";\r\nimport { getSettingsManager } from \"../../utils/settings-manager.js\";\r\n\r\ninterface ApiKeyInputProps {\r\n  onApiKeySet: (agent: GrokAgent) => void;\r\n}\r\n\r\nexport default function ApiKeyInput({ onApiKeySet }: ApiKeyInputProps) {\r\n  const [input, setInput] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const { exit } = useApp();\r\n\r\n  useInput((inputChar, key) => {\r\n    if (isSubmitting) return;\r\n\r\n    if (key.ctrl && inputChar === \"c\") {\r\n      exit();\r\n      return;\r\n    }\r\n\r\n    if (key.return) {\r\n      handleSubmit();\r\n      return;\r\n    }\r\n\r\n\r\n    if (key.backspace || key.delete) {\r\n      setInput((prev) => prev.slice(0, -1));\r\n      setError(\"\");\r\n      return;\r\n    }\r\n\r\n    if (inputChar && !key.ctrl && !key.meta) {\r\n      setInput((prev) => prev + inputChar);\r\n      setError(\"\");\r\n    }\r\n  });\r\n\r\n\r\n  const handleSubmit = async () => {\r\n    if (!input.trim()) {\r\n      setError(\"API key cannot be empty\");\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n    try {\r\n      const apiKey = input.trim();\r\n      const agent = new GrokAgent(apiKey);\r\n      \r\n      // Set environment variable for current process\r\n      process.env.GROK_API_KEY = apiKey;\r\n      \r\n      // Save to user settings\r\n      try {\r\n        const manager = getSettingsManager();\r\n        manager.updateUserSetting('apiKey', apiKey);\r\n        console.log(`\\n✅ API key saved to ~/.grok/user-settings.json`);\r\n      } catch (error) {\r\n        console.log('\\n⚠️ Could not save API key to settings file');\r\n        console.log('API key set for current session only');\r\n      }\r\n      \r\n      onApiKeySet(agent);\r\n    } catch (error: any) {\r\n      setError(\"Invalid API key format\");\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const displayText = input.length > 0 ? \r\n    (isSubmitting ? \"*\".repeat(input.length) : \"*\".repeat(input.length) + \"█\") : \r\n    (isSubmitting ? \" \" : \"█\");\r\n\r\n  return (\r\n    <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\r\n      <Text color=\"yellow\">🔑 Grok API Key Required</Text>\r\n      <Box marginBottom={1}>\r\n        <Text color=\"gray\">Please enter your Grok API key to continue:</Text>\r\n      </Box>\r\n      \r\n      <Box borderStyle=\"round\" borderColor=\"blue\" paddingX={1} marginBottom={1}>\r\n        <Text color=\"gray\">❯ </Text>\r\n        <Text>{displayText}</Text>\r\n      </Box>\r\n\r\n      {error ? (\r\n        <Box marginBottom={1}>\r\n          <Text color=\"red\">❌ {error}</Text>\r\n        </Box>\r\n      ) : null}\r\n\r\n      <Box flexDirection=\"column\" marginTop={1}>\r\n        <Text color=\"gray\" dimColor>• Press Enter to submit</Text>\r\n        <Text color=\"gray\" dimColor>• Press Ctrl+C to exit</Text>\r\n        <Text color=\"gray\" dimColor>Note: API key will be saved to ~/.grok/user-settings.json</Text>\r\n      </Box>\r\n\r\n      {isSubmitting ? (\r\n        <Box marginTop={1}>\r\n          <Text color=\"yellow\">🔄 Validating API key...</Text>\r\n        </Box>\r\n      ) : null}\r\n    </Box>\r\n  );\r\n}","import React, { useState, useEffect, useRef } from \"react\";\r\nimport pkg from '../../../package.json' with { type: 'json' };\r\n\r\nimport { Box, Text, DOMElement } from \"ink\";\r\nimport { GrokAgent, ChatEntry } from \"../../agent/grok-agent.js\";\r\nimport { useInputHandler } from \"../../hooks/use-input-handler.js\";\r\nimport { LoadingSpinner } from \"./loading-spinner.js\";\r\nimport { CommandSuggestions } from \"./command-suggestions.js\";\r\nimport { ModelSelection } from \"./model-selection.js\";\r\nimport { ChatHistory } from \"./chat-history.js\";\r\nimport { ChatInput } from \"./chat-input.js\";\r\nimport { MCPStatus } from \"./mcp-status.js\";\r\nimport ConfirmationDialog from \"./confirmation-dialog.js\";\r\nimport {\r\n  ConfirmationService,\r\n  ConfirmationOptions,\r\n} from \"../../utils/confirmation-service.js\";\r\nimport ApiKeyInput from \"./api-key-input.js\";\r\n\r\ninterface ChatInterfaceProps {\r\n  agent?: GrokAgent;\r\n  initialMessage?: string;\r\n}\r\n\r\n// Main chat component that handles input when agent is available\r\nfunction ChatInterfaceWithAgent({\r\n  agent,\r\n  initialMessage,\r\n}: {\r\n  agent: GrokAgent;\r\n  initialMessage?: string;\r\n}) {\r\n  const [chatHistory, setChatHistory] = useState<ChatEntry[]>([]);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [processingTime, setProcessingTime] = useState(0);\r\n  const [tokenCount, setTokenCount] = useState(0);\r\n  const [isStreaming, setIsStreaming] = useState(false);\r\n  const [confirmationOptions, setConfirmationOptions] =\r\n    useState<ConfirmationOptions | null>(null);\r\n  const scrollRef = useRef<DOMElement | null>(null);\r\n  const processingStartTime = useRef<number>(0);\r\n\r\n  const confirmationService = ConfirmationService.getInstance();\r\n\r\n  const {\r\n    input,\r\n    cursorPosition,\r\n    showCommandSuggestions,\r\n    selectedCommandIndex,\r\n    showModelSelection,\r\n    selectedModelIndex,\r\n    commandSuggestions,\r\n    availableModels,\r\n    autoEditEnabled,\r\n  } = useInputHandler({\r\n    agent,\r\n    chatHistory,\r\n    setChatHistory,\r\n    setIsProcessing,\r\n    setIsStreaming,\r\n    setTokenCount,\r\n    setProcessingTime,\r\n    processingStartTime,\r\n    isProcessing,\r\n    isStreaming,\r\n    isConfirmationActive: !!confirmationOptions,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Only clear console on non-Windows platforms or if not PowerShell\r\n    // Windows PowerShell can have issues with console.clear() causing flickering\r\n    const isWindows = process.platform === \"win32\";\r\n    const isPowerShell =\r\n      process.env.ComSpec?.toLowerCase().includes(\"powershell\") ||\r\n      process.env.PSModulePath !== undefined;\r\n\r\n    if (!isWindows || !isPowerShell) {\r\n      console.clear();\r\n    }\r\n\r\n    // Add top padding\r\n    console.log(\"    \");\r\n\r\n\r\n\r\n    console.log(\" \");\r\n\r\n    // Generate welcome text with margin to match Ink paddingX={2}\r\n    const logoOutput = \"HURRY MODE\" + \"\\n\" + pkg.version;\r\n\r\n    const logoLines = logoOutput.split(\"\\n\");\r\n    logoLines.forEach((line: string) => {\r\n      if (line.trim()) {\r\n        console.log(\" \" + line); // Add 2 spaces for horizontal margin\r\n      } else {\r\n        console.log(line); // Keep empty lines as-is\r\n      }\r\n    });\r\n\r\n    console.log(\" \"); // Spacing after logo\r\n\r\n    setChatHistory([]);\r\n  }, []);\r\n\r\n  // Process initial message if provided (streaming for faster feedback)\r\n  useEffect(() => {\r\n    if (initialMessage && agent) {\r\n      const userEntry: ChatEntry = {\r\n        type: \"user\",\r\n        content: initialMessage,\r\n        timestamp: new Date(),\r\n      };\r\n      setChatHistory([userEntry]);\r\n\r\n      const processInitialMessage = async () => {\r\n        setIsProcessing(true);\r\n        setIsStreaming(true);\r\n\r\n        try {\r\n          let streamingEntry: ChatEntry | null = null;\r\n          let accumulatedContent = \"\";\r\n          let lastTokenCount = 0;\r\n          let pendingToolCalls: any[] | null = null;\r\n          let pendingToolResults: Array<{ toolCall: any; toolResult: any }> = [];\r\n          let lastUpdateTime = Date.now();\r\n\r\n          const flushUpdates = () => {\r\n            const now = Date.now();\r\n            if (now - lastUpdateTime < 150) return; // Throttle to ~6-7 FPS\r\n\r\n            // Update token count if changed\r\n            if (lastTokenCount !== 0) {\r\n              setTokenCount(lastTokenCount);\r\n            }\r\n\r\n            // Handle accumulated content\r\n            if (accumulatedContent) {\r\n              if (!streamingEntry) {\r\n                const newStreamingEntry = {\r\n                  type: \"assistant\" as const,\r\n                  content: accumulatedContent,\r\n                  timestamp: new Date(),\r\n                  isStreaming: true,\r\n                };\r\n                setChatHistory((prev) => [...prev, newStreamingEntry]);\r\n                streamingEntry = newStreamingEntry;\r\n              } else {\r\n                setChatHistory((prev) =>\r\n                  prev.map((entry, idx) =>\r\n                    idx === prev.length - 1 && entry.isStreaming\r\n                      ? { ...entry, content: entry.content + accumulatedContent }\r\n                      : entry\r\n                  )\r\n                );\r\n              }\r\n              accumulatedContent = \"\";\r\n            }\r\n\r\n            // Handle pending tool calls\r\n            if (pendingToolCalls) {\r\n              setChatHistory((prev) =>\r\n                prev.map((entry) =>\r\n                  entry.isStreaming\r\n                    ? {\r\n                        ...entry,\r\n                        isStreaming: false,\r\n                        toolCalls: pendingToolCalls,\r\n                      }\r\n                    : entry\r\n                )\r\n              );\r\n              streamingEntry = null;\r\n\r\n              // Add individual tool call entries\r\n              pendingToolCalls.forEach((toolCall) => {\r\n                const toolCallEntry: ChatEntry = {\r\n                  type: \"tool_call\",\r\n                  content: \"Executing...\",\r\n                  timestamp: new Date(),\r\n                  toolCall: toolCall,\r\n                };\r\n                setChatHistory((prev) => [...prev, toolCallEntry]);\r\n              });\r\n              pendingToolCalls = null;\r\n            }\r\n\r\n            // Handle pending tool results\r\n            if (pendingToolResults.length > 0) {\r\n              setChatHistory((prev) =>\r\n                prev.map((entry) => {\r\n                  if (entry.isStreaming) {\r\n                    return { ...entry, isStreaming: false };\r\n                  }\r\n                  // Update matching tool_call entries\r\n                  const matchingResult = pendingToolResults.find(\r\n                    (result) => entry.type === \"tool_call\" && entry.toolCall?.id === result.toolCall.id\r\n                  );\r\n                  if (matchingResult) {\r\n                    return {\r\n                      ...entry,\r\n                      type: \"tool_result\",\r\n                      content: matchingResult.toolResult.success\r\n                        ? matchingResult.toolResult.output || \"Success\"\r\n                        : matchingResult.toolResult.error || \"Error occurred\",\r\n                      toolResult: matchingResult.toolResult,\r\n                    };\r\n                  }\r\n                  return entry;\r\n                })\r\n              );\r\n              streamingEntry = null;\r\n              pendingToolResults = [];\r\n            }\r\n\r\n            lastUpdateTime = now;\r\n          };\r\n\r\n          for await (const chunk of agent.processUserMessageStream(initialMessage)) {\r\n            switch (chunk.type) {\r\n              case \"content\":\r\n                if (chunk.content) {\r\n                  accumulatedContent += chunk.content;\r\n                }\r\n                break;\r\n\r\n              case \"token_count\":\r\n                if (chunk.tokenCount !== undefined) {\r\n                  lastTokenCount = chunk.tokenCount;\r\n                }\r\n                break;\r\n\r\n              case \"tool_calls\":\r\n                if (chunk.toolCalls) {\r\n                  pendingToolCalls = chunk.toolCalls;\r\n                }\r\n                break;\r\n\r\n              case \"tool_result\":\r\n                if (chunk.toolCall && chunk.toolResult) {\r\n                  pendingToolResults.push({ toolCall: chunk.toolCall, toolResult: chunk.toolResult });\r\n                }\r\n                break;\r\n\r\n              case \"done\":\r\n                // Flush all remaining updates\r\n                flushUpdates();\r\n                break;\r\n            }\r\n\r\n            // Flush updates periodically\r\n            flushUpdates();\r\n          }\r\n\r\n          // Final flush and cleanup\r\n          flushUpdates();\r\n          if (streamingEntry) {\r\n            setChatHistory((prev) =>\r\n              prev.map((entry) =>\r\n                entry.isStreaming ? { ...entry, isStreaming: false } : entry\r\n              )\r\n            );\r\n          }\r\n          setIsStreaming(false);\r\n        } catch (error: unknown) {\r\n          const errorMessage = error instanceof Error ? error.message : String(error);\r\n          const errorEntry: ChatEntry = {\r\n            type: \"assistant\",\r\n            content: `Error: ${errorMessage}`,\r\n            timestamp: new Date(),\r\n          };\r\n          setChatHistory((prev) => [...prev, errorEntry]);\r\n          setIsStreaming(false);\r\n        }\r\n\r\n        setIsProcessing(false);\r\n        processingStartTime.current = 0;\r\n      };\r\n\r\n      processInitialMessage();\r\n    }\r\n  }, [initialMessage, agent]);\r\n\r\n  useEffect(() => {\r\n    const handleConfirmationRequest = (options: ConfirmationOptions) => {\r\n      setConfirmationOptions(options);\r\n    };\r\n\r\n    confirmationService.on(\"confirmation-requested\", handleConfirmationRequest);\r\n\r\n    return () => {\r\n      confirmationService.off(\r\n        \"confirmation-requested\",\r\n        handleConfirmationRequest\r\n      );\r\n    };\r\n  }, [confirmationService]);\r\n\r\n  useEffect(() => {\r\n    if (!isProcessing && !isStreaming) {\r\n      setProcessingTime(0);\r\n      return;\r\n    }\r\n\r\n    if (processingStartTime.current === 0) {\r\n      processingStartTime.current = Date.now();\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      setProcessingTime(\r\n        Math.floor((Date.now() - processingStartTime.current) / 1000)\r\n      );\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [isProcessing, isStreaming]);\r\n\r\n  const handleConfirmation = (dontAskAgain?: boolean) => {\r\n    confirmationService.confirmOperation(true, dontAskAgain);\r\n    setConfirmationOptions(null);\r\n  };\r\n\r\n  const handleRejection = (feedback?: string) => {\r\n    confirmationService.rejectOperation(feedback);\r\n    setConfirmationOptions(null);\r\n\r\n    // Reset processing states when operation is cancelled\r\n    setIsProcessing(false);\r\n    setIsStreaming(false);\r\n    setTokenCount(0);\r\n    setProcessingTime(0);\r\n    processingStartTime.current = 0;\r\n  };\r\n\r\n  return (\r\n    <Box flexDirection=\"column\" paddingX={2}>\r\n      {/* Show logo and tips only when no chat history and no confirmation dialog */}\r\n      {chatHistory.length === 0 && !confirmationOptions && (\r\n        <Box flexDirection=\"column\" marginBottom={2}>\r\n          <Text color=\"cyan\" bold>\r\n{`    dBBBBb dBBBBBb    dBBBBP  dBP dBP          dBBBP  dBP    dBP\r\n               dBP   dB'.BP  dBP.d8P                            \r\n  dBBBB    dBBBBK'  dB'.BP  dBBBBP'          dBP    dBP    dBP  \r\n dB' BB   dBP  BB  dB'.BP  dBP BB  dBBBBBP  dBP    dBP    dBP   \r\ndBBBBBB  dBP  dB' dBBBBP  dBP dB'          dBBBBP dBBBBP dBP    `}\r\n          </Text>\r\n          <Text color=\"cyan\" bold>\r\n            Tips for getting started:\r\n          </Text>\r\n          <Box marginTop={1} flexDirection=\"column\">\r\n            <Text color=\"gray\">\r\n              1. Ask questions, edit files, or run commands.\r\n            </Text>\r\n            <Text color=\"gray\">2. Be specific for the best results.</Text>\r\n            <Text color=\"gray\">\r\n              3. Create GROK.md files to customize your interactions with Grok.\r\n            </Text>\r\n            <Text color=\"gray\">\r\n              4. Press Shift+Tab to toggle auto-edit mode.\r\n            </Text>\r\n            <Text color=\"gray\">\r\n              5. Run \"/init-agent\" to set up an .agent docs system for this project.\r\n            </Text>\r\n            <Text color=\"gray\">\r\n              6. Run \"/heal\" after errors to capture a fix and add a guardrail.\r\n            </Text>\r\n            <Text color=\"gray\">7. /help for more information.</Text>\r\n          </Box>\r\n        </Box>\r\n      )}\r\n\r\n      <Box flexDirection=\"column\" marginBottom={1}>\r\n        <Text color=\"gray\">\r\n          Type your request in natural language. Ctrl+C to clear, 'exit' to\r\n          quit.\r\n        </Text>\r\n      </Box>\r\n\r\n      <Box flexDirection=\"column\" ref={scrollRef}>\r\n        <ChatHistory\r\n          entries={chatHistory}\r\n          isConfirmationActive={!!confirmationOptions}\r\n        />\r\n      </Box>\r\n\r\n      {/* Show confirmation dialog if one is pending */}\r\n      {confirmationOptions && (\r\n        <ConfirmationDialog\r\n          operation={confirmationOptions.operation}\r\n          filename={confirmationOptions.filename}\r\n          showVSCodeOpen={confirmationOptions.showVSCodeOpen}\r\n          content={confirmationOptions.content}\r\n          onConfirm={handleConfirmation}\r\n          onReject={handleRejection}\r\n        />\r\n      )}\r\n\r\n      {!confirmationOptions && (\r\n        <>\r\n          <LoadingSpinner\r\n            isActive={isProcessing || isStreaming}\r\n            processingTime={processingTime}\r\n            tokenCount={tokenCount}\r\n          />\r\n\r\n          <ChatInput\r\n            input={input}\r\n            cursorPosition={cursorPosition}\r\n            isProcessing={isProcessing}\r\n            isStreaming={isStreaming}\r\n          />\r\n\r\n          <Box flexDirection=\"row\" marginTop={1}>\r\n            <Box marginRight={2}>\r\n              <Text color=\"cyan\">\r\n                {autoEditEnabled ? \"▶\" : \"⏸\"} auto-edit:{\" \"}\r\n                {autoEditEnabled ? \"on\" : \"off\"}\r\n              </Text>\r\n              <Text color=\"gray\" dimColor>\r\n                {\" \"}\r\n                (shift + tab)\r\n              </Text>\r\n            </Box>\r\n            <Box marginRight={2}>\r\n              <Text color=\"yellow\">≋ {agent.getCurrentModel()}</Text>\r\n            </Box>\r\n            <MCPStatus />\r\n          </Box>\r\n\r\n          <CommandSuggestions\r\n            suggestions={commandSuggestions}\r\n            input={input}\r\n            selectedIndex={selectedCommandIndex}\r\n            isVisible={showCommandSuggestions}\r\n          />\r\n\r\n          <ModelSelection\r\n            models={availableModels}\r\n            selectedIndex={selectedModelIndex}\r\n            isVisible={showModelSelection}\r\n            currentModel={agent.getCurrentModel()}\r\n          />\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\n// Main component that handles API key input or chat interface\r\nexport default function ChatInterface({\r\n  agent,\r\n  initialMessage,\r\n}: ChatInterfaceProps) {\r\n  const [currentAgent, setCurrentAgent] = useState<GrokAgent | null>(\r\n    agent || null\r\n  );\r\n\r\n  const handleApiKeySet = (newAgent: GrokAgent) => {\r\n    setCurrentAgent(newAgent);\r\n  };\r\n\r\n  if (!currentAgent) {\r\n    return <ApiKeyInput onApiKeySet={handleApiKeySet} />;\r\n  }\r\n\r\n  return (\r\n    <ChatInterfaceWithAgent\r\n      agent={currentAgent}\r\n      initialMessage={initialMessage}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { render } from \"ink\";\r\nimport { program } from \"commander\";\r\nimport * as dotenv from \"dotenv\";\r\nimport { GrokAgent } from \"./agent/grok-agent.js\";\r\nimport ChatInterface from \"./ui/components/chat-interface.js\";\r\nimport { getSettingsManager } from \"./utils/settings-manager.js\";\r\nimport { ConfirmationService } from \"./utils/confirmation-service.js\";\r\nimport { createMCPCommand } from \"./commands/mcp.js\";\r\nimport type { ChatCompletionMessageParam } from \"openai/resources/chat\";\r\nimport pkg from \"../package.json\" with { type: \"json\" };\r\n\r\n// Load environment variables\r\ndotenv.config();\r\n\r\n// Disable default SIGINT handling to let Ink handle Ctrl+C\r\n// We'll handle exit through the input system instead\r\n\r\nprocess.on(\"SIGTERM\", () => {\r\n  // Restore terminal to normal mode before exit\r\n  if (process.stdin.isTTY && process.stdin.setRawMode) {\r\n    try {\r\n      process.stdin.setRawMode(false);\r\n    } catch {\r\n      // Ignore errors when setting raw mode\r\n    }\r\n  }\r\n  console.log(\"\\nGracefully shutting down...\");\r\n  process.exit(0);\r\n});\r\n\r\n// Handle uncaught exceptions to prevent hanging\r\nprocess.on(\"uncaughtException\", (error) => {\r\n  console.error(\"Uncaught exception:\", error);\r\n  process.exit(1);\r\n});\r\n\r\nprocess.on(\"unhandledRejection\", (reason, promise) => {\r\n  console.error(\"Unhandled rejection at:\", promise, \"reason:\", reason);\r\n  process.exit(1);\r\n});\r\n\r\n// Ensure user settings are initialized\r\nfunction ensureUserSettingsDirectory(): void {\r\n  try {\r\n    const manager = getSettingsManager();\r\n    // This will create default settings if they don't exist\r\n    manager.loadUserSettings();\r\n  } catch {\r\n    // Silently ignore errors during setup\r\n  }\r\n}\r\n\r\n// Load API key from user settings if not in environment\r\nfunction loadApiKey(): string | undefined {\r\n  const manager = getSettingsManager();\r\n  return manager.getApiKey();\r\n}\r\n\r\n// Load base URL from user settings if not in environment\r\nfunction loadBaseURL(): string {\r\n  const manager = getSettingsManager();\r\n  return manager.getBaseURL();\r\n}\r\n\r\n// Save command line settings to user settings file\r\nasync function saveCommandLineSettings(\r\n  apiKey?: string,\r\n  baseURL?: string\r\n): Promise<void> {\r\n  try {\r\n    const manager = getSettingsManager();\r\n\r\n    // Update with command line values\r\n    if (apiKey) {\r\n      manager.updateUserSetting(\"apiKey\", apiKey);\r\n      console.log(\"✅ API key saved to ~/.grok/user-settings.json\");\r\n    }\r\n    if (baseURL) {\r\n      manager.updateUserSetting(\"baseURL\", baseURL);\r\n      console.log(\"✅ Base URL saved to ~/.grok/user-settings.json\");\r\n    }\r\n  } catch (error) {\r\n    console.warn(\r\n      \"⚠️ Could not save settings to file:\",\r\n      error instanceof Error ? error.message : \"Unknown error\"\r\n    );\r\n  }\r\n}\r\n\r\n// Load model from user settings if not in environment\r\nfunction loadModel(): string | undefined {\r\n  // First check environment variables\r\n  let model = process.env.GROK_MODEL;\r\n\r\n  if (!model) {\r\n    // Use the unified model loading from settings manager\r\n    try {\r\n      const manager = getSettingsManager();\r\n      model = manager.getCurrentModel();\r\n    } catch {\r\n      // Ignore errors, model will remain undefined\r\n    }\r\n  }\r\n\r\n  return model;\r\n}\r\n\r\n// Handle commit-and-push command in headless mode\r\nasync function handleCommitAndPushHeadless(\r\n  apiKey: string,\r\n  baseURL?: string,\r\n  model?: string,\r\n  maxToolRounds?: number\r\n): Promise<void> {\r\n  try {\r\n    const agent = new GrokAgent(apiKey, baseURL, model, maxToolRounds);\r\n\r\n    // Configure confirmation service for headless mode (auto-approve all operations)\r\n    const confirmationService = ConfirmationService.getInstance();\r\n    confirmationService.setSessionFlag(\"allOperations\", true);\r\n\r\n    console.log(\"🤖 Processing commit and push...\\n\");\r\n    console.log(\"> /commit-and-push\\n\");\r\n\r\n    // First check if there are any changes at all\r\n    const initialStatusResult = await agent.executeBashCommand(\r\n      \"git status --porcelain\"\r\n    );\r\n\r\n    if (!initialStatusResult.success || !initialStatusResult.output?.trim()) {\r\n      console.log(\"❌ No changes to commit. Working directory is clean.\");\r\n      process.exit(1);\r\n    }\r\n\r\n    console.log(\"✅ git status: Changes detected\");\r\n\r\n    // Add all changes\r\n    const addResult = await agent.executeBashCommand(\"git add .\");\r\n\r\n    if (!addResult.success) {\r\n      console.log(\r\n        `❌ git add: ${addResult.error || \"Failed to stage changes\"}`\r\n      );\r\n      process.exit(1);\r\n    }\r\n\r\n    console.log(\"✅ git add: Changes staged\");\r\n\r\n    // Get staged changes for commit message generation\r\n    const diffResult = await agent.executeBashCommand(\"git diff --cached\");\r\n\r\n    // Generate commit message using AI\r\n    const commitPrompt = `Generate a concise, professional git commit message for these changes:\r\n\r\nGit Status:\r\n${initialStatusResult.output}\r\n\r\nGit Diff (staged changes):\r\n${diffResult.output || \"No staged changes shown\"}\r\n\r\nFollow conventional commit format (feat:, fix:, docs:, etc.) and keep it under 72 characters.\r\nRespond with ONLY the commit message, no additional text.`;\r\n\r\n    console.log(\"🤖 Generating commit message...\");\r\n\r\n    const commitMessageEntries = await agent.processUserMessage(commitPrompt);\r\n    let commitMessage = \"\";\r\n\r\n    // Extract the commit message from the AI response\r\n    for (const entry of commitMessageEntries) {\r\n      if (entry.type === \"assistant\" && entry.content.trim()) {\r\n        commitMessage = entry.content.trim();\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!commitMessage) {\r\n      console.log(\"❌ Failed to generate commit message\");\r\n      process.exit(1);\r\n    }\r\n\r\n    // Clean the commit message\r\n    const cleanCommitMessage = commitMessage.replace(/^[\"']|[\"']$/g, \"\");\r\n    console.log(`✅ Generated commit message: \"${cleanCommitMessage}\"`);\r\n\r\n    // Execute the commit\r\n    const commitCommand = `git commit -m \"${cleanCommitMessage}\"`;\r\n    const commitResult = await agent.executeBashCommand(commitCommand);\r\n\r\n    if (commitResult.success) {\r\n      console.log(\r\n        `✅ git commit: ${\r\n          commitResult.output?.split(\"\\n\")[0] || \"Commit successful\"\r\n        }`\r\n      );\r\n\r\n      // If commit was successful, push to remote\r\n      // First try regular push, if it fails try with upstream setup\r\n      let pushResult = await agent.executeBashCommand(\"git push\");\r\n\r\n      if (\r\n        !pushResult.success &&\r\n        pushResult.error?.includes(\"no upstream branch\")\r\n      ) {\r\n        console.log(\"🔄 Setting upstream and pushing...\");\r\n        pushResult = await agent.executeBashCommand(\"git push -u origin HEAD\");\r\n      }\r\n\r\n      if (pushResult.success) {\r\n        console.log(\r\n          `✅ git push: ${\r\n            pushResult.output?.split(\"\\n\")[0] || \"Push successful\"\r\n          }`\r\n        );\r\n      } else {\r\n        console.log(`❌ git push: ${pushResult.error || \"Push failed\"}`);\r\n        process.exit(1);\r\n      }\r\n    } else {\r\n      console.log(`❌ git commit: ${commitResult.error || \"Commit failed\"}`);\r\n      process.exit(1);\r\n    }\r\n  } catch (error: any) {\r\n    console.error(\"❌ Error during commit and push:\", error.message);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\n// Headless mode processing function\r\nasync function processPromptHeadless(\r\n  prompt: string,\r\n  apiKey: string,\r\n  baseURL?: string,\r\n  model?: string,\r\n  maxToolRounds?: number\r\n): Promise<void> {\r\n  try {\r\n    const agent = new GrokAgent(apiKey, baseURL, model, maxToolRounds);\r\n\r\n    // Configure confirmation service for headless mode (auto-approve all operations)\r\n    const confirmationService = ConfirmationService.getInstance();\r\n    confirmationService.setSessionFlag(\"allOperations\", true);\r\n\r\n    // Process the user message\r\n    const chatEntries = await agent.processUserMessage(prompt);\r\n\r\n    // Convert chat entries to OpenAI compatible message objects\r\n    const messages: ChatCompletionMessageParam[] = [];\r\n\r\n    for (const entry of chatEntries) {\r\n      switch (entry.type) {\r\n        case \"user\":\r\n          messages.push({\r\n            role: \"user\",\r\n            content: entry.content,\r\n          });\r\n          break;\r\n\r\n        case \"assistant\":\r\n          const assistantMessage: ChatCompletionMessageParam = {\r\n            role: \"assistant\",\r\n            content: entry.content,\r\n          };\r\n\r\n          // Add tool calls if present\r\n          if (entry.toolCalls && entry.toolCalls.length > 0) {\r\n            assistantMessage.tool_calls = entry.toolCalls.map((toolCall) => ({\r\n              id: toolCall.id,\r\n              type: \"function\",\r\n              function: {\r\n                name: toolCall.function.name,\r\n                arguments: toolCall.function.arguments,\r\n              },\r\n            }));\r\n          }\r\n\r\n          messages.push(assistantMessage);\r\n          break;\r\n\r\n        case \"tool_result\":\r\n          if (entry.toolCall) {\r\n            messages.push({\r\n              role: \"tool\",\r\n              tool_call_id: entry.toolCall.id,\r\n              content: entry.content,\r\n            });\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    // Output each message as a separate JSON object\r\n    for (const message of messages) {\r\n      console.log(JSON.stringify(message));\r\n    }\r\n  } catch (error: any) {\r\n    // Output error in OpenAI compatible format\r\n    console.log(\r\n      JSON.stringify({\r\n        role: \"assistant\",\r\n        content: `Error: ${error.message}`,\r\n      })\r\n    );\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\nprogram\r\n  .name(\"grok\")\r\n  .description(\r\n    \"A conversational AI CLI tool powered by Grok with text editor capabilities\"\r\n  )\r\n  .version(pkg.version)\r\n  .argument(\"[message...]\", \"Initial message to send to Grok\")\r\n  .option(\"-d, --directory <dir>\", \"set working directory\", process.cwd())\r\n  .option(\"-k, --api-key <key>\", \"Grok API key (or set GROK_API_KEY env var)\")\r\n  .option(\r\n    \"-u, --base-url <url>\",\r\n    \"Grok API base URL (or set GROK_BASE_URL env var)\"\r\n  )\r\n  .option(\r\n    \"-m, --model <model>\",\r\n    \"AI model to use (e.g., grok-code-fast-1, grok-4-latest) (or set GROK_MODEL env var)\"\r\n  )\r\n  .option(\r\n    \"-p, --prompt <prompt>\",\r\n    \"process a single prompt and exit (headless mode)\"\r\n  )\r\n  .option(\r\n    \"--max-tool-rounds <rounds>\",\r\n    \"maximum number of tool execution rounds (default: 400)\",\r\n    \"400\"\r\n  )\r\n  .action(async (message, options) => {\r\n    if (options.directory) {\r\n      try {\r\n        process.chdir(options.directory);\r\n      } catch (error: any) {\r\n        console.error(\r\n          `Error changing directory to ${options.directory}:`,\r\n          error.message\r\n        );\r\n        process.exit(1);\r\n      }\r\n    }\r\n\r\n    try {\r\n      // Get API key from options, environment, or user settings\r\n      const apiKey = options.apiKey || loadApiKey();\r\n      const baseURL = options.baseUrl || loadBaseURL();\r\n      const model = options.model || loadModel();\r\n      const maxToolRounds = parseInt(options.maxToolRounds) || 400;\r\n\r\n      if (!apiKey) {\r\n        console.error(\r\n          \"❌ Error: API key required. Set GROK_API_KEY environment variable, use --api-key flag, or save to ~/.grok/user-settings.json\"\r\n        );\r\n        process.exit(1);\r\n      }\r\n\r\n      // Save API key and base URL to user settings if provided via command line\r\n      if (options.apiKey || options.baseUrl) {\r\n        await saveCommandLineSettings(options.apiKey, options.baseUrl);\r\n      }\r\n\r\n      // Headless mode: process prompt and exit\r\n      if (options.prompt) {\r\n        await processPromptHeadless(\r\n          options.prompt,\r\n          apiKey,\r\n          baseURL,\r\n          model,\r\n          maxToolRounds\r\n        );\r\n        return;\r\n      }\r\n\r\n      // Interactive mode: launch UI\r\n      if (!process.stdin.isTTY) {\r\n        console.error(\"❌ Error: Grok CLI requires an interactive terminal. Please run in a TTY environment.\");\r\n        process.exit(1);\r\n      }\r\n\r\n      const agent = new GrokAgent(apiKey, baseURL, model, maxToolRounds);\r\n      console.log(\"🤖 Starting Grok CLI Conversational Assistant...\\n\");\r\n\r\n      ensureUserSettingsDirectory();\r\n\r\n      // Support variadic positional arguments for multi-word initial message\r\n      const initialMessage = Array.isArray(message)\r\n        ? message.join(\" \")\r\n        : message;\r\n\r\n      const app = render(React.createElement(ChatInterface, { agent, initialMessage }));\r\n\r\n      // Cleanup on exit\r\n      const cleanup = () => {\r\n        app.unmount();\r\n        agent.abortCurrentOperation();\r\n        if (process.env.DEBUG === '1') {\r\n          const handles = (process as any)._getActiveHandles?.() || [];\r\n          console.log(`[DEBUG] Active handles on exit: ${handles.length}`);\r\n        }\r\n      };\r\n\r\n      process.on('exit', cleanup);\r\n      process.on('SIGINT', () => {\r\n        cleanup();\r\n        process.exit(0);\r\n      });\r\n      process.on('SIGTERM', cleanup);\r\n    } catch (error: any) {\r\n      console.error(\"❌ Error initializing Grok CLI:\", error.message);\r\n      process.exit(1);\r\n    }\r\n  });\r\n\r\n// Git subcommand\r\nconst gitCommand = program\r\n  .command(\"git\")\r\n  .description(\"Git operations with AI assistance\");\r\n\r\ngitCommand\r\n  .command(\"commit-and-push\")\r\n  .description(\"Generate AI commit message and push to remote\")\r\n  .option(\"-d, --directory <dir>\", \"set working directory\", process.cwd())\r\n  .option(\"-k, --api-key <key>\", \"Grok API key (or set GROK_API_KEY env var)\")\r\n  .option(\r\n    \"-u, --base-url <url>\",\r\n    \"Grok API base URL (or set GROK_BASE_URL env var)\"\r\n  )\r\n  .option(\r\n    \"-m, --model <model>\",\r\n    \"AI model to use (e.g., grok-code-fast-1, grok-4-latest) (or set GROK_MODEL env var)\"\r\n  )\r\n  .option(\r\n    \"--max-tool-rounds <rounds>\",\r\n    \"maximum number of tool execution rounds (default: 400)\",\r\n    \"400\"\r\n  )\r\n  .action(async (options) => {\r\n    if (options.directory) {\r\n      try {\r\n        process.chdir(options.directory);\r\n      } catch (error: any) {\r\n        console.error(\r\n          `Error changing directory to ${options.directory}:`,\r\n          error.message\r\n        );\r\n        process.exit(1);\r\n      }\r\n    }\r\n\r\n    try {\r\n      // Get API key from options, environment, or user settings\r\n      const apiKey = options.apiKey || loadApiKey();\r\n      const baseURL = options.baseUrl || loadBaseURL();\r\n      const model = options.model || loadModel();\r\n      const maxToolRounds = parseInt(options.maxToolRounds) || 400;\r\n\r\n      if (!apiKey) {\r\n        console.error(\r\n          \"❌ Error: API key required. Set GROK_API_KEY environment variable, use --api-key flag, or save to ~/.grok/user-settings.json\"\r\n        );\r\n        process.exit(1);\r\n      }\r\n\r\n      // Save API key and base URL to user settings if provided via command line\r\n      if (options.apiKey || options.baseUrl) {\r\n        await saveCommandLineSettings(options.apiKey, options.baseUrl);\r\n      }\r\n\r\n      await handleCommitAndPushHeadless(apiKey, baseURL, model, maxToolRounds);\r\n    } catch (error: any) {\r\n      console.error(\"❌ Error during git commit-and-push:\", error.message);\r\n      process.exit(1);\r\n    }\r\n  });\r\n\r\n// MCP command\r\nprogram.addCommand(createMCPCommand());\r\n\r\nprogram.parse();\r\n","import { Command } from 'commander';\r\nimport { addMCPServer, removeMCPServer, loadMCPConfig, PREDEFINED_SERVERS } from '../mcp/config.js';\r\nimport { getMCPManager } from '../grok/tools.js';\r\nimport { MCPServerConfig } from '../mcp/client.js';\r\nimport chalk from 'chalk';\r\n\r\nexport function createMCPCommand(): Command {\r\n  const mcpCommand = new Command('mcp');\r\n  mcpCommand.description('Manage MCP (Model Context Protocol) servers');\r\n\r\n  // Add server command\r\n  mcpCommand\r\n    .command('add <name>')\r\n    .description('Add an MCP server')\r\n    .option('-t, --transport <type>', 'Transport type (stdio, http, sse, streamable_http)', 'stdio')\r\n    .option('-c, --command <command>', 'Command to run the server (for stdio transport)')\r\n    .option('-a, --args [args...]', 'Arguments for the server command (for stdio transport)', [])\r\n    .option('-u, --url <url>', 'URL for HTTP/SSE transport')\r\n    .option('-h, --headers [headers...]', 'HTTP headers (key=value format)', [])\r\n    .option('-e, --env [env...]', 'Environment variables (key=value format)', [])\r\n    .action(async (name: string, options) => {\r\n      try {\r\n        // Check if it's a predefined server\r\n        if (PREDEFINED_SERVERS[name]) {\r\n          const config = PREDEFINED_SERVERS[name];\r\n          addMCPServer(config);\r\n          console.log(chalk.green(`✓ Added predefined MCP server: ${name}`));\r\n          \r\n          // Try to connect immediately\r\n          const manager = getMCPManager();\r\n          await manager.addServer(config);\r\n          console.log(chalk.green(`✓ Connected to MCP server: ${name}`));\r\n          \r\n          const tools = manager.getTools().filter(t => t.serverName === name);\r\n          console.log(chalk.blue(`  Available tools: ${tools.length}`));\r\n          \r\n          return;\r\n        }\r\n\r\n        // Custom server\r\n        const transportType = options.transport.toLowerCase();\r\n        \r\n        if (transportType === 'stdio') {\r\n          if (!options.command) {\r\n            console.error(chalk.red('Error: --command is required for stdio transport'));\r\n            process.exit(1);\r\n          }\r\n        } else if (transportType === 'http' || transportType === 'sse' || transportType === 'streamable_http') {\r\n          if (!options.url) {\r\n            console.error(chalk.red(`Error: --url is required for ${transportType} transport`));\r\n            process.exit(1);\r\n          }\r\n        } else {\r\n          console.error(chalk.red('Error: Transport type must be stdio, http, sse, or streamable_http'));\r\n          process.exit(1);\r\n        }\r\n\r\n        // Parse environment variables\r\n        const env: Record<string, string> = {};\r\n        for (const envVar of options.env || []) {\r\n          const [key, value] = envVar.split('=', 2);\r\n          if (key && value) {\r\n            env[key] = value;\r\n          }\r\n        }\r\n\r\n        // Parse headers\r\n        const headers: Record<string, string> = {};\r\n        for (const header of options.headers || []) {\r\n          const [key, value] = header.split('=', 2);\r\n          if (key && value) {\r\n            headers[key] = value;\r\n          }\r\n        }\r\n\r\n        const config = {\r\n          name,\r\n          transport: {\r\n            type: transportType as 'stdio' | 'http' | 'sse' | 'streamable_http',\r\n            command: options.command,\r\n            args: options.args || [],\r\n            url: options.url,\r\n            env,\r\n            headers: Object.keys(headers).length > 0 ? headers : undefined\r\n          }\r\n        };\r\n\r\n        addMCPServer(config);\r\n        console.log(chalk.green(`✓ Added MCP server: ${name}`));\r\n        \r\n        // Try to connect immediately\r\n        const manager = getMCPManager();\r\n        await manager.addServer(config);\r\n        console.log(chalk.green(`✓ Connected to MCP server: ${name}`));\r\n        \r\n        const tools = manager.getTools().filter(t => t.serverName === name);\r\n        console.log(chalk.blue(`  Available tools: ${tools.length}`));\r\n\r\n      } catch (error: any) {\r\n        console.error(chalk.red(`Error adding MCP server: ${error.message}`));\r\n        process.exit(1);\r\n      }\r\n    });\r\n\r\n  // Add server from JSON command\r\n  mcpCommand\r\n    .command('add-json <name> <json>')\r\n    .description('Add an MCP server from JSON configuration')\r\n    .action(async (name: string, jsonConfig: string) => {\r\n      try {\r\n        let config;\r\n        try {\r\n          config = JSON.parse(jsonConfig);\r\n        } catch {\r\n          console.error(chalk.red('Error: Invalid JSON configuration'));\r\n          process.exit(1);\r\n        }\r\n\r\n        const serverConfig: MCPServerConfig = {\r\n          name,\r\n          transport: {\r\n            type: 'stdio', // default\r\n            command: config.command,\r\n            args: config.args || [],\r\n            env: config.env || {},\r\n            url: config.url,\r\n            headers: config.headers\r\n          }\r\n        };\r\n\r\n        // Override transport type if specified\r\n        if (config.transport) {\r\n          if (typeof config.transport === 'string') {\r\n            serverConfig.transport.type = config.transport as 'stdio' | 'http' | 'sse';\r\n          } else if (typeof config.transport === 'object') {\r\n            serverConfig.transport = { ...serverConfig.transport, ...config.transport };\r\n          }\r\n        }\r\n\r\n        addMCPServer(serverConfig);\r\n        console.log(chalk.green(`✓ Added MCP server: ${name}`));\r\n        \r\n        // Try to connect immediately\r\n        const manager = getMCPManager();\r\n        await manager.addServer(serverConfig);\r\n        console.log(chalk.green(`✓ Connected to MCP server: ${name}`));\r\n        \r\n        const tools = manager.getTools().filter(t => t.serverName === name);\r\n        console.log(chalk.blue(`  Available tools: ${tools.length}`));\r\n\r\n      } catch (error: any) {\r\n        console.error(chalk.red(`Error adding MCP server: ${error.message}`));\r\n        process.exit(1);\r\n      }\r\n    });\r\n\r\n  // Remove server command\r\n  mcpCommand\r\n    .command('remove <name>')\r\n    .description('Remove an MCP server')\r\n    .action(async (name: string) => {\r\n      try {\r\n        const manager = getMCPManager();\r\n        await manager.removeServer(name);\r\n        removeMCPServer(name);\r\n        console.log(chalk.green(`✓ Removed MCP server: ${name}`));\r\n      } catch (error: any) {\r\n        console.error(chalk.red(`Error removing MCP server: ${error.message}`));\r\n        process.exit(1);\r\n      }\r\n    });\r\n\r\n  // List servers command\r\n  mcpCommand\r\n    .command('list')\r\n    .description('List configured MCP servers')\r\n    .action(() => {\r\n      const config = loadMCPConfig();\r\n      const manager = getMCPManager();\r\n      \r\n      if (config.servers.length === 0) {\r\n        console.log(chalk.yellow('No MCP servers configured'));\r\n        return;\r\n      }\r\n\r\n      console.log(chalk.bold('Configured MCP servers:'));\r\n      console.log();\r\n\r\n      for (const server of config.servers) {\r\n        const isConnected = manager.getServers().includes(server.name);\r\n        const status = isConnected \r\n          ? chalk.green('✓ Connected') \r\n          : chalk.red('✗ Disconnected');\r\n        \r\n        console.log(`${chalk.bold(server.name)}: ${status}`);\r\n        \r\n        // Display transport information\r\n        if (server.transport) {\r\n          console.log(`  Transport: ${server.transport.type}`);\r\n          if (server.transport.type === 'stdio') {\r\n            console.log(`  Command: ${server.transport.command} ${(server.transport.args || []).join(' ')}`);\r\n          } else if (server.transport.type === 'http' || server.transport.type === 'sse') {\r\n            console.log(`  URL: ${server.transport.url}`);\r\n          }\r\n        } else if (server.command) {\r\n          // Legacy format\r\n          console.log(`  Command: ${server.command} ${(server.args || []).join(' ')}`);\r\n        }\r\n        \r\n        if (isConnected) {\r\n          const transportType = manager.getTransportType(server.name);\r\n          if (transportType) {\r\n            console.log(`  Active Transport: ${transportType}`);\r\n          }\r\n          \r\n          const tools = manager.getTools().filter(t => t.serverName === server.name);\r\n          console.log(`  Tools: ${tools.length}`);\r\n          if (tools.length > 0) {\r\n            tools.forEach(tool => {\r\n              const displayName = tool.name.replace(`mcp__${server.name}__`, '');\r\n              console.log(`    - ${displayName}: ${tool.description}`);\r\n            });\r\n          }\r\n        }\r\n        \r\n        console.log();\r\n      }\r\n    });\r\n\r\n  // Test server command\r\n  mcpCommand\r\n    .command('test <name>')\r\n    .description('Test connection to an MCP server')\r\n    .action(async (name: string) => {\r\n      try {\r\n        const config = loadMCPConfig();\r\n        const serverConfig = config.servers.find(s => s.name === name);\r\n        \r\n        if (!serverConfig) {\r\n          console.error(chalk.red(`Server ${name} not found`));\r\n          process.exit(1);\r\n        }\r\n\r\n        console.log(chalk.blue(`Testing connection to ${name}...`));\r\n        \r\n        const manager = getMCPManager();\r\n        await manager.addServer(serverConfig);\r\n        \r\n        const tools = manager.getTools().filter(t => t.serverName === name);\r\n        console.log(chalk.green(`✓ Successfully connected to ${name}`));\r\n        console.log(chalk.blue(`  Available tools: ${tools.length}`));\r\n        \r\n        if (tools.length > 0) {\r\n          console.log('  Tools:');\r\n          tools.forEach(tool => {\r\n            const displayName = tool.name.replace(`mcp__${name}__`, '');\r\n            console.log(`    - ${displayName}: ${tool.description}`);\r\n          });\r\n        }\r\n\r\n      } catch (error: any) {\r\n        console.error(chalk.red(`✗ Failed to connect to ${name}: ${error.message}`));\r\n        process.exit(1);\r\n      }\r\n    });\r\n\r\n  return mcpCommand;\r\n}"]}